<html><h1>RadialTree Layout</h1>

<p>The Radial Layout sample demonstrates the <strong>RadialTreeLayoutManager</strong> layout management class in 
Essential Diagram.</p>

<p><div align=center><img src="images/sample.png" alt="RadialLayout Image" title="" /></div></p>

<p>
<p><strong>Features</strong></p>
<ul>
<li>	Horizontal Spacing - Sets the horizontal spacing between the adjacent nodes.</li>
<li>	Vertical Spacing - Sets the vertical spacing between the adjacent nodes.</li>
<li>	Top Margin - Sets the top margin of the layout manager.</li>
<li>	Left Margin - Sets the left margin of the layout manager.</li>
<li>	RadialTreeLayoutManager implements an algorithm for laying out the nodes of a directed tree graph in a circular balloon-like arrangement.</li>
<li> 	RadialTreeLayoutManager positions the root node at the center of the graph and locates the child nodes in a circular fashion around the root. </li>
<li> 	Sub-trees formed by the branching of child nodes are located radially around the child nodes.</li>
<li>	AutoLayout - Updates the layout of the model automatically.</li>
</ul>
<ul>
<p>	To create <strong>RadialTreeLayoutManager</strong> with the tree rotation as "TopToBottom" (i.e.RotationAngle =0),  horizontal and vertical spacing as 50 and 50 respectively, use the following code.</p>
<p><font color="#8D2E1C"><pre>
			RadialTreeLayoutManager rdlLyt = new RadialTreeLayoutManager(this.diagram1.Model, 0, 50, 50);
            //Sets the RadialTreeLayoutManager as the responsible for updating the layout of the diagram.
            this.diagram1.LayoutManager = rdlLyt;
            // Updates the layout of the nodes in the model.
            this.diagram1.LayoutManager.UpdateLayout(null);
</pre></font></p>

</html>