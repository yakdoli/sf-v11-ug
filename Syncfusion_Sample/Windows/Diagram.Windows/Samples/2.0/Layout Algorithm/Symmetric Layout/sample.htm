<html><h1>Symmetric Layout</h1>

<p>The symmetric layout sample demonstrates the <strong>SymmetricLayoutManager</strong> layout management in Essential Diagram.</p>
<p>The SymmetricLayoutManager's pre-built layout algorithm arranges the nodes quickly in a symmetric manner without implementing any tedious node layout routines.</p>

<p><div align=center><img src="images/sample.png" alt="Symmetric layout Image" title="" /></div></p>

<p><strong>Features</strong></p>
<ul>
<li>	Horizontal Spacing - Sets the horizontal spacing between the adjacent nodes.</li>
<li>	Vertical Spacing - Sets the vertical spacing between the adjacent nodes.</li>
<li>	SpringLength - Sets the length of the spring of layout manager.</li>
<li>	SpringFactor - Sets the SpringFactor of layout Manager.</li>
<li>	MaxIteraction - Sets the maximum count of iteration of layout manager.</li>
<li>	AutoLayout - Updates the layout of the model automatically.</li>
</ul><ul>
<p>	To create <strong>SymmetricLayoutManager</strong> with the VerticalDistance as 50, use the following code.</p>
<p><font color="#8D2E1C"><pre>
			SymmetricLayoutManager smtLayout = new SymmetricLayoutManager(this.diagram1.Model, DEF_LAYOUT_DISTANCE);
            //Sets the max count of iteration for layout.
            smtLayout.MaxIteraction = 1000;
            //Sets the length of the spring of layout Manager.
            smtLayout.SpringLength = 80;
            //Sets the spring factor of layout Manager.
            smtLayout.SpringFactor = 1.6112;
            //Sets the DirectedTreeLayoutManager as the responsible for updating the layout of the diagram.
            this.diagram1.LayoutManager = smtLayout;
            // Updates the layout of the nodes in the model.
            this.diagram1.LayoutManager.UpdateLayout(null);
</pre></font></p></ul>

</html>