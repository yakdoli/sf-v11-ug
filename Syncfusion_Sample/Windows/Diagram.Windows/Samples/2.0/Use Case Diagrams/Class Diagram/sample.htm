<html><h1>Class Diagram</h1>

<p>This sample generates a class diagram based on the given class definitions and relations. It uses the data fetched from a database file to generates the class diagram. The generated class diagram has custom symbols which have the look and feel similar to Visual Studio class diagram. It also uses custom labels with image. You can create your own custom symbols/labels derived from base <strong>Node / Label</strong> classes respectively.</p>

<div align=center><img src="images/sample.png" alt="Class Diagram Image" title="" /></div>

<h3><strong>Features</strong></h3>
<ul>
<li>	The custom symbols “RowRectangle”,  “CustomGroup”, and “CustomRectangle” draws the class definition and give the look and feel which is similar to Visual Studio class diagram symbols.</li>
<li>	The custom label “ImageLabel” class the Label class and draws an image prefix the label text.</li>
<li>	The RadialTreeLayoutManager is used to laying out the nodes on the diagram.</li> </ul>
<ul>
<li>New - Creates a new diagram.</li>
<p>The following code is used to create a new diagram.</p>
<p><font color="#8D2E1C"><pre>
            //Initializes a new instance of the model class.
            Model model = new Model();
            //Sets smoothing (antialiasing) to lines and curves and the edges of the filled areas.
            model.RenderingStyle.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.HighQuality;
	        //Sets color used to draw lines.
            model.LineStyle.LineColor = Color.LightGray;
            //Sets the model contains the hierarchy of graphical nodes that are rendered onto the view and manipulated by the controller.
            diagram1.Model = model;
</pre></font></p></ul>
<ul>
<li>Open - Opens the serialized binary/xml diagram file.</li>
<p>Use the below code to open a file in binary/xml format.</p>
<p><font color="#8D2E1C"><pre>
			// Loads the diagram from a file in the binary format.
            diagram1.LoadBinary(strFileName);
            // Loads the diagram from a file in the SOAP format.
            diagram1.LoadSoap(strFileName);
</pre></font></p></ul>			
<ul>			
<li>Save As - Saves the diagram in the binary/xml file.</li>
<p>Use the below code to save the diagram in binary/xml format.</p>
<p><font color="#8D2E1C"><pre>
		// Saves the diagram to a file in the binary format.
        diagram1.SaveBinary (strFileName);
        // Saves the diagram to a file in the SOAP format.
        diagram1.SaveSoap(strFileName) ;
</pre></font></p></ul>
<ul>
<li>Export - Exports a diagram as an image with the given image format. This sample has an option to export the image in the PNG, JPEG and GIF formats.	</li>
<p>Use the below code to exports a diagram as an image.</p>
<p><font color="#8D2E1C"><pre>
Image img = diagram1.View.ExportDiagramAsImage(false);		
</pre></font></p></ul>
<ul>
<li>Cut - Cuts the selected node in the diagram and moves it to the clipboard.</li>
<p>Use the below code to cut the selected node from the Diagram control.</p>
<p><font color="#8D2E1C"><pre>
// Remove the currently selected nodes from the diagram and move it to the clipboard.
diagram1.Controller.Cut();
</pre></font></p></ul>
<ul>
<li>Copy - Copies the selected node in the diagram and moves them to the clipboard. </li>
<p>Use the below code to cut the selected node from the Diagram control.</p>
<p><font color="#8D2E1C"><pre>
// Copy the currently selected nodes to the clipboard.
diagram1.Controller.Copy();
</pre></font></p></ul>
<ul>
<li>Paste - Pastes the node in the clipboard to the diagram.</li>
<p>Use the below code to paste the nodes to the diagram.</p>
<p><font color="#8D2E1C"><pre>
// Paste the contents of the clipboard to the diagram.
diagram1.Controller.Paste();
</pre></font></p></ul>
<ul>
<li>Delete - Deletes the selected node in the diagram.</li>
<p>Use the below code to delete the selected node from the diagram.</p>
<p><font color="#8D2E1C"><pre>
// Removes the first occurrence of a specific node from the NodeCollection
diagram1.Model.Nodes.Remove(diagram1.Controller.SelectionList[i]);
</pre></font></p></ul>
<ul>
<li>ZoomIn - Zooms in the diagram document. </li>
<p>Use the below code to zoom-in the diagram document.</p>
<p><font color="#8D2E1C"><pre>
// Zoom in the document.
diagram1.View.ZoomIn();
</pre></font></p></ul>
<ul>
<li>ZoomOut - Zooms out the diagram document. </li>
<p>Use the below code to zoom-out the diagram document.</p>
<p><font color="#8D2E1C"><pre>
// Zoom out the document.
diagram1.View.ZoomOut();
</pre></font></p></ul>	
<ul>
<li>ZoomToActual - Zooms to the actual size of the document.</li>
<p>Use the below code to zoom the diagram document to its actual size.</p>
<p><font color="#8D2E1C"><pre>
// Zoom the document to the actual size.
diagram1.View.ZoomToActual();
</pre></font></p></ul>		
</html>