<html>

<head>
<style type="text/css">
.style1 {
	margin-left: 40px;
}
</style>
</head>

<h1>Sequence Diagram</h1>

<p>This sample lets you to create a sequence diagram with the symbols designed by Essential Diagram SymbolDesigner utility. This sample shows how to programmatically load a symbol palette file, generated by SymbolDesigner, and how to use the SymbolModels, sourced from the SymbolPalette to create the diagram symbols. You can easily design your sequence diagram by dragging and dropping symbols from palette and connect them.</p>

<p><div align=center><img src="images/sample.png" alt="Sequence Image" title="" /></div></p>

<p><strong>Features</strong></p>
<ul>
<li>New - Creates a new diagram.</li>
<p>The following code is used to create a new diagram.</p>
<p><font color="#8D2E1C"><pre>
            //Initializes a new instance of the model class.
            Model model = new Model();
            //Sets smoothing (antialiasing) to lines and curves and the edges of the filled areas.
            model.RenderingStyle.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.HighQuality;
	        //Sets color used to draw lines.
            model.LineStyle.LineColor = Color.LightGray;
            //Sets the model contains the hierarchy of graphical nodes that are rendered onto the view and manipulated by the controller.
            diagram1.Model = model;
</pre></font></p></ul>
<ul>
<li>Open - Opens the serialized binary/xml diagram file.</li>
<p>Use the below code to open a file in binary/xml format.</p>
<p><font color="#8D2E1C"><pre>
			// Loads the diagram from a file in the binary format.
            diagram1.LoadBinary(strFileName);
            // Loads the diagram from a file in the SOAP format.
            diagram1.LoadSoap(strFileName);
</pre></font></p></ul>			
<ul>			
<li>Save As - Saves the diagram in the binary/xml file.</li>
<p>Use the below code to save the diagram in binary/xml format.</p>
<p><font color="#8D2E1C"><pre>
		// Saves the diagram to a file in the binary format.
        diagram1.SaveBinary (strFileName);
        // Saves the diagram to a file in the SOAP format.
        diagram1.SaveSoap(strFileName) ;
</pre></font></p></ul>
<ul>
<li>Export - Exports a diagram as an image with the given image format. This sample has an option to export the image in the PNG, JPEG and GIF formats.	</li>
<p>Use the below code to exports a diagram as an image.</p>
<p><font color="#8D2E1C"><pre>
Image img = diagram1.View.ExportDiagramAsImage(false);		
</pre></font></p></ul>
<ul>
<li>Cut - Cuts the selected node in the diagram and moves it to the clipboard.</li>
<p>Use the below code to cut the selected node from the Diagram control.</p>
<p><font color="#8D2E1C"><pre>
// Remove the currently selected nodes from the diagram and move it to the clipboard.
diagram1.Controller.Cut();
</pre></font></p></ul>
<ul>
<li>Copy - Copies the selected node in the diagram and moves them to the clipboard. </li>
<p>Use the below code to cut the selected node from the Diagram control.</p>
<p><font color="#8D2E1C"><pre>
// Copy the currently selected nodes to the clipboard.
diagram1.Controller.Copy();
</pre></font></p></ul>
<ul>
<li>Paste - Pastes the node in the clipboard to the diagram.</li>
<p>Use the below code to paste the nodes to the diagram.</p>
<p><font color="#8D2E1C"><pre>
// Paste the contents of the clipboard to the diagram.
diagram1.Controller.Paste();
</pre></font></p></ul>
<ul>
<li>Grid - It is a evenly spaced points that provides a visual guide to the user.</li>
<p>Use the below code to enable the grid in the diagram.</p>
<p><font color="#8D2E1C"><pre>
diagram1.View.Grid.Visible = true;
</pre></font></p></ul>
<ul>
<li>SnapToGrid - It's used to enable/disable the SnapToGrid feature in the diagram document.</li>
<p>Use the below code to enable/disable SnapToGrid feature in the diagram document.</p>
<p><font color="#8D2E1C"><pre>
diagram1.View.Grid.SnapToGrid = true;
</pre></font></p></ul>			
<ul>
<li>Rulers - It's used to show the horizontal and vertical rulers in the diagram document</li>
<p>Use the below code to show the rulers in the diagram document.</p>
<p><font color="#8D2E1C"><pre>
diagram1.ShowRulers = true;
</pre></font></p></ul>
<ul>
<li>Undo - It backups the last user operation.</li>
<p>Use the below code to undo the last operation performed in the diagram document.</p>
<p><font color="#8D2E1C"><pre>
diagram1.Model.HistoryManager.Undo();
</pre></font></p></ul>		
<ul>
<li>Redo - It steps forward to operation history records.</li>
<p>Use the below code to perform the redo operation</p>
<p><font color="#8D2E1C"><pre>
diagram1.Model.HistoryManager.Redo();
</pre></font></p></ul>
<ul>						 
<li>Size - Changes the settings of the model document size in the diagram control.</li>
	<p>Use the below code to change the model document size.</p>
	<p><font color="#8D2E1C"><pre>
		 private void btnSize_Click(object sender, EventArgs e)
        {
            //Open a page size dialog for change the model document size
            using (PageSizeDialog dlgPageSize = new PageSizeDialog())
            {
                dlgPageSize.PageSize = (PageSize)this.diagram1.Model.DocumentSize.Clone();
                dlgPageSize.PrinterSettings = (System.Drawing.Printing.PageSettings)this.diagram1.View.PageSettings.Clone();
                if (dlgPageSize.ShowDialog(this.diagram1) == DialogResult.OK)
                {
                    this.diagram1.Model.DocumentSize = dlgPageSize.PageSize;
                    this.diagram1.View.PageSettings.Landscape = dlgPageSize.PrinterSettings.Landscape;
                }
            }
        }
	   </pre></font></p></ul>
<ul>
<li>AutoSize - Fit the document to the diagram content</li>
<p>Use the below code to fit the document to the diagram content.</p>
<p><font color="#8D2E1C"><pre>
diagram1.Model.SizeToContent = true;
</pre></font></p>
</ul>   
<ul>						 
<li>PageSettings - Changes the settings of the page in the diagram control.</li>
	<p>Use the below code to change the page settings.</p>
	<p><font color="#8D2E1C"><pre>
		private void pageSettingsToolStripButton_Click(object sender, EventArgs e)
        {
            //Open a page setup dialog for diagram page setup
            using (Syncfusion.Windows.Forms.Diagram.PageSetupDialog dlgPageSetup = new Syncfusion.Windows.Forms.Diagram.PageSetupDialog(diagram1.View))
            {
                if (dlgPageSetup.ShowDialog() == DialogResult.OK)
                {
                    diagram1.UpdateView();
                }
            }
       } 
	   </pre></font></p></ul>
<ul>
<p>To print preview the diagram control, use the following code.</p>
<p><font color="#8D2E1C"><pre>
		private void previewToolStripButton_Click(object sender, EventArgs e)
        {
            //creates a print document
            PrintDocument printDoc = diagram1.CreatePrintDocument();            
            PrintPreviewDialog printPreviewDlg = new PrintPreviewDialog();
            printDoc.PrinterSettings.FromPage = 0;
            printDoc.PrinterSettings.ToPage = 0;
            printDoc.PrinterSettings.PrintRange = PrintRange.AllPages;

            printPreviewDlg.Document = printDoc;
            printPreviewDlg.ShowDialog(this);
        }
		</pre></font></p></ul>
<ul>
<p>To print the daigram control, use the following code.</p>
<p><font color="#8D2E1C"><pre>
		private void printToolStripButton_Click(object sender, EventArgs e)
        {
            DiagramPrintDocument printDoc = diagram1.CreatePrintDocument();
            printDialog.Document = printDoc;
            printDialog.UseEXDialog = true;
            printDialog.AllowSomePages = true;
            if (printDialog.ShowDialog(this) == DialogResult.OK)
            {
                printDoc.PrinterSettings = printDialog.PrinterSettings;
                printDoc.Print();
            }
        }
</pre></font></p></ul>
</html>