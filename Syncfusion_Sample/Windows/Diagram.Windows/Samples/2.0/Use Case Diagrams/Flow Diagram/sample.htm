<html>

<head>
<style type="text/css">
.style1 {
	margin-left: 40px;
}
</style>
</head>

<h1>Flow Diagram</h1>

<p>This sample lets you to create various process flow diagrams using the symbols designed with the Essential Diagram’s SymbolDesigner utility. The sample shows how to programmatically load a symbol palette file generated by the SymbolDesigner and use the SymbolModel sourced from the SymbolPalette to create the diagram symbols. You can easily design your flow diagram by dragging and dropping the symbols from palette and connect them.</p>

<p><div align=center><img src="images/sample.png" alt="Flow Diagram Image" title="" /></div></p>

<p><strong>Features</strong></p>
<ul>
<li>New - Creates a new diagram.</li>
<p>The following code is used to create a new diagram.</p>
<p><font color="#8D2E1C"><pre>
            //Initializes a new instance of the model class.
            Model model = new Model();
            //Sets smoothing (antialiasing) to lines and curves and the edges of the filled areas.
            model.RenderingStyle.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.HighQuality;
	        //Sets color used to draw lines.
            model.LineStyle.LineColor = Color.LightGray;
            //Sets the model contains the hierarchy of graphical nodes that are rendered onto the view and manipulated by the controller.
            diagram1.Model = model;
</pre></font></p></ul>
<ul>
<li>Open - Opens the serialized binary/xml diagram file.</li>
<p>Use the below code to open a file in binary/xml format.</p>
<p><font color="#8D2E1C"><pre>
			// Loads the diagram from a file in the binary format.
            diagram1.LoadBinary(strFileName);
            // Loads the diagram from a file in the SOAP format.
            diagram1.LoadSoap(strFileName);
</pre></font></p></ul>			
<ul>			
<li>Save As - Saves the diagram in the binary/xml file.</li>
<p>Use the below code to save the diagram in binary/xml format.</p>
<p><font color="#8D2E1C"><pre>
		// Saves the diagram to a file in the binary format.
        diagram1.SaveBinary (strFileName);
        // Saves the diagram to a file in the SOAP format.
        diagram1.SaveSoap(strFileName) ;
</pre></font></p></ul>
<ul>
<li>Export - Exports a diagram as an image with the given image format. This sample has an option to export the image in the PNG, JPEG and GIF formats.	</li>
<p>Use the below code to exports a diagram as an image.</p>
<p><font color="#8D2E1C"><pre>
Image img = diagram1.View.ExportDiagramAsImage(false);		
</pre></font></p></ul>
<ul>
<li>Cut - Cuts the selected node in the diagram and moves it to the clipboard.</li>
<p>Use the below code to cut the selected node from the Diagram control.</p>
<p><font color="#8D2E1C"><pre>
// Remove the currently selected nodes from the diagram and move it to the clipboard.
diagram1.Controller.Cut();
</pre></font></p></ul>
<ul>
<li>Copy - Copies the selected node in the diagram and moves them to the clipboard. </li>
<p>Use the below code to cut the selected node from the Diagram control.</p>
<p><font color="#8D2E1C"><pre>
// Copy the currently selected nodes to the clipboard.
diagram1.Controller.Copy();
</pre></font></p></ul>
<ul>
<li>Paste - Pastes the node in the clipboard to the diagram.</li>
<p>Use the below code to paste the nodes to the diagram.</p>
<p><font color="#8D2E1C"><pre>
// Paste the contents of the clipboard to the diagram.
diagram1.Controller.Paste();
</pre></font></p></ul>
<ul>
<li>Delete - Deletes the selected node in the diagram.</li>
<p>Use the below code to delete the selected node from the diagram.</p>
<p><font color="#8D2E1C"><pre>
// Removes the first occurrence of a specific node from the NodeCollection
diagram1.Model.Nodes.Remove(diagram1.Controller.SelectionList[i]);
</pre></font></p></ul>
<ul>
<li>FillStyle - Properties of the brush used to fill interior regions.</li>
<p>Use the below code to change the FillStyle of a node.</p>
<p><font color="#8D2E1C"><pre>
// Sets the Color used to draw lines.
node.LineStyle.LineColor = Color.Yellow;
// Sets the type of brush to be used to fill regions.
node.FillStyle.Type = FillStyleType.LinearGradient;
</pre></font></p></ul>
<ul>
<li>LineStyle - Line drawing properties of the node.</li>
<p>Use the below code to change the LineStyle of a node.</p>
<p><font color="#8D2E1C"><pre>
// Sets the Color used to draw lines.
rect1.LineStyle.LineColor = Color.Yellow;
</pre></font></p></ul>
<ul>
<li>ShadowStyle - Properties of the shadow applied to the shape.</li>
<p>Use the below code to change the ShadowStyle of a node.</p>
<p><font color="#8D2E1C"><pre>
// Sets the value indicating that the shadow is visible.
node.ShadowStyle.Visible = true;
// Sets the shadow color.
node.ShadowStyle.Color = Color.Red;
// Sets the distance of the shadow offset from the shape along the X axis.
node.ShadowStyle.OffsetX = 10;
// Sets the distance of the shadow offset from the shape along the Y axis.
node.ShadowStyle.OffsetY = 10;
</pre></font></p></ul>
<ul>
<li>EnableShading - Enables the shading of the nodes.</li>
<p>Use the below code to enable the shading of a node.</p>
<p><font color="#8D2E1C"><pre>
// Sets the value indicating whether shading should be enabled.
node.EnableShading = true;
</pre></font></p></ul>
<ul>
<li>ZoomIn - Zooms in the diagram document. </li>
<p>Use the below code to zoom-in the diagram document.</p>
<p><font color="#8D2E1C"><pre>
// Zoom in the document.
diagram1.View.ZoomIn();
</pre></font></p></ul>
<ul>
<li>ZoomOut - Zooms out the diagram document. </li>
<p>Use the below code to zoom-out the diagram document.</p>
<p><font color="#8D2E1C"><pre>
// Zoom out the document.
diagram1.View.ZoomOut();
</pre></font></p></ul>	
<ul>
<li>ZoomToActual - Zooms to the actual size of the document.</li>
<p>Use the below code to zoom the diagram document to its actual size.</p>
<p><font color="#8D2E1C"><pre>
// Zoom the document to the actual size.
diagram1.View.ZoomToActual();
</pre></font></p></ul>	
<ul>
<li>Pan Tool - It activates/deactivates the panning tool.</li>
<p>To activate the pan tool use the following code.</p>
<p><font color="#8D2E1C"><pre>
diagram1.Controller.ActivateTool("PanTool");
</pre></font></p></ul>		
<ul>
<li>Grid - It is a evenly spaced points that provides a visual guide to the user.</li>
<p>Use the below code to enable the grid in the diagram.</p>
<p><font color="#8D2E1C"><pre>
diagram1.View.Grid.Visible = true;
</pre></font></p></ul>		
<ul>
<li>SnapToGrid - It's used to enable/disable the SnapToGrid feature in the diagram document.</li>
<p>Use the below code to enable/disable SnapToGrid feature in the diagram document.</p>
<p><font color="#8D2E1C"><pre>
diagram1.View.Grid.SnapToGrid = true;
</pre></font></p></ul>		
<ul>
<li>Undo - It backups the last user operation.</li>
<p>Use the below code to undo the last operation performed in the diagram document.</p>
<p><font color="#8D2E1C"><pre>
diagram1.Model.HistoryManager.Undo();
</pre></font></p></ul>		
<ul>
<li>Redo - It steps forward to operation history records.</li>
<p>Use the below code to perform the redo operation</p>
<p><font color="#8D2E1C"><pre>
diagram1.Model.HistoryManager.Redo();
</pre></font></p></ul>		
<ul>
<li>PageSettings - Changes the settings of the page in the diagram control.</li>
	<p>Use the below code to change the page settings.</p>
	<p><font color="#8D2E1C"><pre>
		private void pageSettingsToolStripButton_Click(object sender, EventArgs e)
        {
            if (this.diagram1 != null && this.diagram1.Model != null)
            {
                Syncfusion.Windows.Forms.Diagram.PageSetupDialog dlgPrintSetup = new Syncfusion.Windows.Forms.Diagram.PageSetupDialog();
                // Makes the values more user friendly. 
                dlgPrintSetup.PrintSettings = this.diagram1.View.PageSettings;
                dlgPrintSetup.PrintZoom = this.diagram1.View.PrintZoom;
                if (dlgPrintSetup.ShowDialog() == DialogResult.OK)
                {
					//Sets the page settings to create a print document for the model.
					this.diagram1.View.PageSettings = dlgPrintSetup.PrintSettings;
	                //Sets the diagram printing zoom value.
	                this.diagram1.View.PrintZoom = dlgPrintSetup.PrintZoom;
					// Refreshes the view's page size with the new bounds obtained from the View.PageSettings property.
					this.diagram1.View.RefreshPageSettings();  
	            }
           }
       } 
	   </pre></font></p></ul>
<ul>
<p>To print preview the diagram control, use the following code.</p>
<p><font color="#8D2E1C"><pre>
		private void previewToolStripButton_Click(object sender, EventArgs e)
        {
            if (this.diagram1 != null)
            {
				// Creates an instance of the DiagramPrintDocument and initializes it with the diagram's view.
                PrintDocument printDoc = this.diagram1.CreatePrintDocument();
                PrintPreviewDialog printPreviewDlg = new PrintPreviewDialog();
                printDoc.PrinterSettings.FromPage = 0;
                printDoc.PrinterSettings.ToPage = 0;
                printDoc.PrinterSettings.PrintRange = PrintRange.AllPages;
                printPreviewDlg.Document = printDoc;
				//Shows the preview dialog.
                printPreviewDlg.ShowDialog(this);
            }
        }
		</pre></font></p></ul>
<ul>
<p>To print the daigram control, use the following code.</p>
<p><font color="#8D2E1C"><pre>
		private void printToolStripButton_Click(object sender, EventArgs e)
        {
            if (this.diagram1 != null)
            {
				// Creates an instance of the DiagramPrintDocument and initializes it with the diagram's view.
                PrintDocument printDoc = this.diagram1.CreatePrintDocument();
                PrintDialog printDlg = new PrintDialog();
                printDlg.Document = printDoc;
                printDlg.AllowSomePages = true;
                if (printDlg.ShowDialog(this) == DialogResult.OK)
                {
						//Sets the print dialog's printer settings to the Diagram   control's print document.
	            		printDoc.PrinterSettings = printDlg.PrinterSettings;
	            		//Prints the diagram document.
						printDoc.Print();    
				}
            }
        }
</pre></font></p></ul>
</html>