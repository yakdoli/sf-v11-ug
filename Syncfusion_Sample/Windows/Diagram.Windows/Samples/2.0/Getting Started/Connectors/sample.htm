<html>

<head>
<style type="text/css">
.style1 {
	margin-left: 40px;
}
</style>
</head>

<h1>Connectors</h1>

<p> The connectors sample illustrates the various types of connectors supported by Essential Diagram. 
You can create your own custom connectors programmatically by inheriting the predefined connectors according to your requirement.</p>

<p><div align=center><img src="images/sample.png" alt="Connector Sample Image" title="" /></div></p>

<p><strong>Features</strong></p><ul>
 <li>The following list of connectors are available in Essential Diagram.
		<ul><li>LineConnector</li>
		<li>OrthogonalConnector</li>
		<li>OrgLineConnector</li>
		<li>PolylineConnector</li>
		<li>Spline</li>
		<li>BezierCurve</li></li></ul>
<li>You can change the properties of the connectors by using the properties provided in the property editor.</li>		
<li>You can add the decorator shapes to the end points of the connector.</li> 

<li>Connector has various decorator shapes such as Open45Arrow, Filled45Arrow and Diamond.</li> </ul>
<ul><p>To create a connector, use the following code.</p>
		<p><font color="#8D2E1C"><pre><code>
			//Creating an orthogonal connector.
	        OrthogonalConnector orthogonalLine = new OrthogonalConnector(new PointF(50, 50), new PointF(245, 135));
            //Sets the head decorator shape of the connector.
            orthogonalLine.HeadDecorator.DecoratorShape = DecoratorShape.OpenFancyArrow;
            //Sets the width and height of the decorator.
            orthogonalLine.HeadDecorator.Size = new SizeF(10, 10);
            //Sets the tail decorator shape of the connector.
            orthogonalLine.TailDecorator.DecoratorShape = DecoratorShape.FilledFancyArrow;
            orthogonalLine.TailDecorator.Size = new SizeF(10, 10);
            //Sets the width of the line.
            orthogonalLine.LineStyle.LineWidth = 1;
            // Appends the given node to the model.
            diagram1.Model.AppendChild(orthogonalLine);
		</code></pre></font></p></ul>
</html>