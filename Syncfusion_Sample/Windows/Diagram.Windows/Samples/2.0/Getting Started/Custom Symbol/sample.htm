<html>

<head>
<style type="text/css">
.style1 {
	margin-left: 40px;
}
</style>
</head>

<h1>Custom Symbol</h1>

<p>The Custom Symbol sample demonstrates how to customize the behavior of a 
symbol designed with the Essential Diagram symbol designer by subclassifying it at the application level.</p>
<p>The <strong>MySymbol</strong> class defined within the application (or optionally in a separate library) is used for subclassifying a symbol 
contained within the <strong>CustomSymbol.edp</strong> symbol palette file generated by the 
symbol designer. </p>

<p><div align=center><img src="images/sample.png" alt="CustomSymbol Image" title="" /></div></p>

<p>
<p><strong>Features</strong></p>
<ul>
	<li> To add a custom symbol to a diagram, use the following code.</li>
<p><font color="#8D2E1C"><pre>
        MySymbol symb = new MySymbol();
        this.diagram1.Model.AppendChild(symb);</pre></font></p>

<li> To clone a selected symbol and add it to a diagram, use the following 
	code.</li>
<p><font color="#8D2E1C"><pre>
        Group symbolClone = (Group) selectedSymbol.Clone();
        symbolClone.Translate(5,5);
        this.diagram1.Model.AppendChild(symbolClone);</pre></font></p>

<li> Use the following code to only show specified properties in the 
	property editor.</li>

<p><font color="#8D2E1C"><pre>
        public class MySymbolConverter : TypeConverter
	{	
          public override PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes)
	  {
	        Attribute[] attrs = new Attribute[]
	        {
	         new BrowsableAttribute(true)
	        };

	       // This code returns only the specified properties. It can be used to filter out
	       // properties that you do not wish to expose to in property grid.
	       PropertyDescriptor[] props = new PropertyDescriptor[2];
	       props[0] = TypeDescriptor.CreateProperty(typeof(MySymbol), "Name", typeof(string), attrs);
	       props[1] = TypeDescriptor.CreateProperty(typeof(MySymbol), "ClickCount", typeof(int), attrs);
	       return new PropertyDescriptorCollection(props);
	  } 
        }</pre></font></p></ul>

</html>