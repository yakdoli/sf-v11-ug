<html>

<head>
<style type="text/css">
.style1 {
	margin-left: 40px;
}
</style>
</head>

<h1>Array ICalcData Demo</h1>

<p>This sample adds calculation support to a double array by wrapping the array in a class that implements the
<strong>ICalcData</strong> interface. The sample adds an extra row and column to the wrapper class to hold the calculation results. Here, an array of random doubles is generated. Then this array is wrapped in an
<strong>ICalcData</strong> object that adds an extra row and column to hold the row sum and column sum of the original array.</p>
<p><strong>Features</strong>:</p>

<p class="style1">The following illustration demonstrates the usage of the Generate Data button, 
that has been pressed to generate a 7x3 array of doubles. The multiline text box displays the array. The column on the right-hand side edge is the sum of the columns in the array, and the row at the very bottom is the sum of rows in the array.</p>

<p><div align=center><img src="images/sample1.png" alt="Adding Calculation Support to Double Array " title="A 3x7 Array with Summary Row and Column" ></div>
<br>
<div align=center><b>A 3x7 Array with Summary Rows and Columns</b></div></p>

<p><br /></p>

<p class="style1">The following illustration displays the results of setting the value in row 1, column 1 to 1,000. Notice that the sum 
has been updated to reflect the newly entered value. The <strong>ICalcData</strong> interface handles the adjustments of the the row and column sum automatically. </p>

<p><div align=center><img src="images/sample2.png" alt="Adding Calculation Support to a Double Array " title="Adding Calculation Support to Double Array" ></div>
<br>
<div align=center><b>After Setting a Cell Value of 1,000</b></div></p>

<p><br /></p>

<p>The following code sets a single value in a data array and displays the results in the 
multiline text box.</p>

<font color="#8D2E1C"><pre><code>		private void button2_Click(object sender, System.EventArgs e)
		{
			if (this.nRows == 0)
			{
				MessageBox.Show("Generate data first.");
				return;
			}

			int row = int.Parse(this.textBox2.Text);
			int col = int.Parse(this.textBox3.Text);
			string val = this.textBox4.Text;

			this.data[row, col] = val;

			ShowObject();
		}

		private void ShowObject()
		{
			this.textBox1.Text = "";
			for(int i = 0; i &lt;= this.nRows; ++i)
			{
				for(int j = 0; j &lt;= this.nCols; ++j)
				{
					this.textBox1.Text += this.data[i, j].ToString() + "\t";

				}
				this.textBox1.Text += "\r\n";
			}
		}
</code></pre></font>
</html>