<h1>
    Data Validation</h1>
<p>
    Data validation is a feature of Excel that helps to control the kind of information
    that is entered in a worksheet. It provides users with the following options:
    <br />
    <li>A list of choices<br />
    <li>Restriction of entries to a specific type or size<br />
    <p>Creation of custom settings<br /><br />Essential XlsIO has support for reading and writing data validations. This sample
    focuses on writing a data validation in an Excel template. </p>
<p></p>
<p style="font-size:large">Features:</p>
<ul>
	<li>Text validation</li>
	</li>
	<li>Validating input text length based on the given constraints</li>
</ul>
<p>Below is an image in Excel.</p>
<p></p>
<div align="Center">
	<img src="images/textvalid.png" alt="XlsIO" title="" /></div>
<p></p>
<p><b>Here is a code snippet:</b></p>
<pre>//Create validation for the range.
IDataValidation validation = sheet.Range["E30"].DataValidation;
//Set the type of validation
validation.AllowType = ExcelDataType.TextLength;
//Apply the constraints.
validation.CompareOperator = ExcelDataValidationComparisonOperator.Between;
validation.FirstFormula = "1";
validation.SecondFormula = "25";
</pre>
<br />
<li><b>Time Validation</b><br />
    <br />
</li>
This validates user-input time and format based on given constraints.
<p>
    Below is an image in Excel.<br />
    <br />
</p>
<p>
    <div align="Center">
        <img src="images/timevalid.png" alt="XlsIO" title="" /></div>
</p>
<p>
    <b>Here is a code snippet:</b></p>
<pre>
//Set the type of validation
validation.AllowType = ExcelDataType.Time;

//Apply the constraints.
validation.CompareOperator = ExcelDataValidationComparisonOperator.Between;
validation.FirstFormula = "1";
validation.SecondFormula = "12";
</pre>
<br />
<p>
    <li><b>Date Validation</b>
        <br />
    </p>
<p>
    This validates user-input date and format based on given constraints.
    </p>
	<p>
    <br />
    Below is an image in Excel.
</p>
<p>
    <div align="Center">
        <img src="images/datevalid.png" alt="XlsIO" title="" /></div>
</p>
	Here is a code snippet:<br />
<pre>
//Set the type of validation
validation.AllowType = ExcelDataType.Date;
//Apply the constraints.
validation.CompareOperator = ExcelDataValidationComparisonOperator.Between;
validation.FirstDateTime = new DateTime(1900,1,1);
validation.SecondDateTime = new DateTime(1984,1,1);
</pre>
<br />
<li><b>List Validation</b><br />
<p>
    This allows creating a drop-down list with the actual data that has to be selected
    in the preferred cell. Users can quickly select an item from the list and then
    move on to the next entry without typing unwanted data.</p>
<p>
    Below is an image in Excel.</p>
<p>
    <div align="Center">
        <img src="images/list.png" alt="XlsIO" title="" /></div>
</p>
<p>
    <div align="Center">
        <img src="images/listvalid.png" alt="XlsIO" title="" /></div>
</p>
<br />
<br />
Here is a code snippet:<br />
<pre>
validation.ListOfValues = new string[] {"Essential XlsIO", "Essential PDF", "Essential DocIO"};
</pre>
<br />
<li><b>Number Validation</b><br />
    <br />
<p>
    This allows validating a user-input number.</p>
<p>
    Below is an image in Excel.</p>
<p>
    <div align="Center">
        <img src="images/numvalid.png" alt="XlsIO" title="" /></div>
</p>
<br />
<br />
Here is a code snippet:<br />
<pre>
//Set the type of validation
validation.AllowType = ExcelDataType.Integer;
//Apply the constraints.
validation.CompareOperator = ExcelDataValidationComparisonOperator.Between;
validation.FirstFormula = "18";
validation.SecondFormula = "100";
</pre>
<br />
<p>
    It is also possible to prompt for an error message using the following statement.</p>
<p>
    Below is an illustration in Excel.<br />
    <br />
</p>
<p>
    <div align="Center">
        <img src="images/error.png" alt="XlsIO" title="" /></div>
</p>
<p>
    <div align="Center">
        <img src="images/errormsg.png" alt="XlsIO" title="" /></div>
</p>
Here is a code snippet:<br />
<pre>
//Set the text for error message
validation.PromptBoxText = "Data Validation using Condition for Time";
//Enable the prompt box.
validation.ShowPromptBox = true;
</pre>
<br />

<p style="font-size:large">Interactive Features:</p>
<ul>
<li>Choose anyone from the options--Excel 2003,Excel 2007,Excel 2010--to generate 
a document in Excel 2003, Excel 2007,Excel 2010 respectively.</li>
<li>Click <b>Create</b> button to generate and view the document.</li>
<li>All features in the preceding list are illustrated in this file.</li>
</ul>

<p>
    Below is an illustration of the output.</p>
<p>
    <div align="Center">
        <img src="images/sample.png" alt="XlsIO" title="" /></div>
</p>
