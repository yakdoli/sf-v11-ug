<h1>Zooming and Scrolling</h1>

<p>This sample demonstrates the zooming and scrolling features in Essential Chart. </p>

<div align=center><img src="images/sample.png" alt="Key Zooming" title="Key Zooming"/></div>
<p><div align=center><TABLE><TR>
		<TD align=center><b>Chart Zooming</b></TD>
	</TR>
		
		<tr><td style="height:5"> </td></tr>
		</TABLE></div></p>
<p><strong>Features</strong>:</p>
<ul>
<li><b>Zooming</b>
<p>Zooming is enabled along a specific axis by using the <b>EnableXZooming</b> and <b>EnableYZooming</b> properties.</p>
<font color="#8D2E1C"><pre><code>
this.chartControl1.EnableXZooming = true;
this.chartControl1.EnableYZooming = true;
</code></pre></font>
<ol>
<li><b>Zoom Button</b>
<p>The zoom buttons, appearing to the left and the top of the vertical and 
horizontal scrollbars, can be made visible or hidden by setting the <b>ZoomButton.Size</b> property. 
<font color="#8D2E1C"><pre><code>
<font color="#008000">//Zoom Buttons are hidden</font>
this.chartControl1.GetVScrollBar(this.chartControl1.PrimaryYAxis).ZoomButton.Size = new Size(0, 0);
this.chartControl1.GetHScrollBar(this.chartControl1.PrimaryXAxis).ZoomButton.Size = new Size(0, 0);
<font color="#008000">//Zoom Buttons are visible</font>
this.chartControl1.GetVScrollBar(this.chartControl1.PrimaryYAxis).ZoomButton.Size = new Size(14, 14);
this.chartControl1.GetHScrollBar(this.chartControl1.PrimaryXAxis).ZoomButton.Size = new Size(14, 14);
</code></pre></font>      
             
</li>
<li><b>Zooming Factor</b>
<p>To produce a fine-grained range while zooming, you can set the value by which 
intervals are multiplied. This is done by setting the <b>ZoomFactorX</b> and <b>ZoomFactorY</b> properties.
<font color="#8D2E1C"><pre><code>
this.chartControl1.ZoomFactorX = 1;
this.chartControl1.ZoomFactorX = 1;
</code></pre></font>
</li>
<li><b>Zooming Keys</b>
<p>The shortcut keys used to control zooming in and zooming out are set by the <b>ZoomIn</b> and <b>ZoomOut</b> properties.
<font color="#8D2E1C"><pre><code>
this.chartControl1.ZoomIn = Keys.Oemplus;
this.chartControl1.ZoomOut = Keys.OemMinus;
</code></pre></font>
</li>
<li><b>Zooming Interior</b>
<p>The zoom area that appears while a user zooms in on a chart can be set with 
gradient colors. This is executed with the following code.
<font color="#8D2E1C"><pre><code>
this.chartControl1.Zooming.Interior = new BrushInfo(GradientStyle.PathEllipse, Color.Red, Color.Yellow);
</code></pre></font>
</li>
<li><b>Zoom-Area Border</b>
<p>The zoom-area border can be made visible by setting the <b>ShowBorder</b> property.
<font color="#8D2E1C"><pre><code>
this.chartControl1.Zooming.ShowBorder = true;
</code></pre></font>Border width can be set by using the following code.
<font color="#8D2E1C"><pre><code>
this.chartControl1.Zooming.Border.Width = 1;
</code></pre></font>
The line style and the color of a border can also be customized, as shown in the 
following code.
<font color="#8D2E1C"><pre><code>
this.chartControl1.Zooming.Border.DashStyle = System.Drawing.Drawing2D.DashStyle.Solid;
this.chartControl1.Zooming.Border.ForeColor = Color.Orange;
</code></pre></font>
</li>
</li>
</ol>

<li><b>Scrolling</b>
<p>The scroll bars of a chart control can be made visible by setting the <b>ShowScrollBars</b> property.
<font color="#8D2E1C"><pre><code>
this.chartControl1.ShowScrollBars = true;
</code></pre></font>
<ol>
<li><b>Scrolling Keys</b>
<p>The keys used to scroll a chart area to the right, left, up, and down can be 
set by using the following code.<font color="#8D2E1C"><pre><code>
this.chartControl1.ZoomRight = Keys.Right;
this.chartControl1.ZoomLeft = Keys.Left;
this.chartControl1.ZoomUp = Keys.Up;
this.chartControl1.ZoomDown = Keys.Down;
</code></pre></font>
</li>
</ol>
</li>
<li><b>Panning</b>
<p>The chart windows support a panning feature after zooming; this is done by setting the <b>MouseAction and ZoomAction </b>properties. </p>
<font color="#8D2E1C"><pre><code>
<font color="#008000">//Enable the panning functionality using MouseAction and ZoomAction properties in chart control.</font> 

this.chartControl1.MouseAction = ChartMouseAction.Panning;
this.chartControl1.PrimaryXAxis.ZoomActions = ChartZoomAction.Panning;
this.chartControl1.PrimaryYAxis.ZoomActions = ChartZoomAction.Panning;

<font color="#008000">//Disable the panning after zooming the chart control.</font>

this.chartControl1.PrimaryXAxis.ZoomActions = ChartZoomAction.None;
this.chartControl1.PrimaryYAxis.ZoomActions = ChartZoomAction.None;

</code></pre></font>
</li>
</ul>
</html>