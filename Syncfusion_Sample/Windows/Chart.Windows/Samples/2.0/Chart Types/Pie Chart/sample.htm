<html>

<head>
</head>

<h1>Pie Chart</h1>
<p>This sample demonstrates how a pie chart<strong> </strong>can be implemented using Essential Chart.</p>
<p><div align=center>
<TABLE id="Table1" >
<tr><td align=center><b>Pie Chart</b></td>
<td align=center><b>Pie Chart with Explode Slice</b></td></tr>
<TR>

<TD><div align=center><img src="images/Sample1.png" alt= "PieType:None"title=""/></div></TD>
<TD><div align=center><img src="images/Sample2.png" alt= "PieType:None"title=""/></div></TD>
</TR>
<tr><td align=center><b>Doughnut Chart</b></td>
<td align=center><b>Doughnut Chart with Explode Slice</b></td></tr>
<TR>
<TD><div align=center><img src="images/Sample3.png" alt= "PieType:None"title=""/></div></TD>
<TD><div align=center><img src="images/Sample4.png" alt= "PieType:None"title=""/></div></TD>
</TR>
</TABLE>
</div></p>
<h3><strong>Features</strong></h3>

<p>The chart-control type is set to <em>pie</em> by using the following code. 
</p>
<font color="#8D2E1C"><pre><code>
this.chartControl1.Series[0].Type = ChartSeriesType.Pie;
</code></pre></font>

<ul>
<li><b>Pie Chart Types</b>
<p>The various types of pie charts are set as shown in the following code. </p>
<font color="#8D2E1C"><pre><code>
this.chartControl1.Series[0].ConfigItems.PieItem.PieType = ChartPieType.Bevel;
this.chartControl1.Series[0].ConfigItems.PieItem.PieType = ChartPieType.Custom;
this.chartControl1.Series[0].ConfigItems.PieItem.PieType = ChartPieType.InSide;
this.chartControl1.Series[0].ConfigItems.PieItem.PieType = ChartPieType.OutSide;
this.chartControl1.Series[0].ConfigItems.PieItem.PieType = ChartPieType.Round;
</code></pre></font>
</li>


<li><b>Optimize Pie Point Positions</b>

<p>When the <strong>OptimizePiePointPositions</strong> property is set to <em>true</em>, 
the pie chart is optimized for small values. Data points with smaller values are 
grouped together and ordered. By default, they are sorted in the order in 
which the points were added to the series.</p>


<p><font color="#8D2E1C"><pre><code>
<font color="#008000">// The chart is rendered with optimized values.</font>
this.chartControl1.Series[0].OptimizePiePointPositions = true;
</code></pre></font>

<li><b>Show Ticks</b>
<p>The ticks of a pie chart are turned o<em>n </em>using the <strong>ShowTicks</strong> 
property of the <strong>ChartSeries</strong> class.</p>

<font color="#8D2E1C"><pre><code>
<font color="#008000">/ Specifies whether the Ticks must be shown or not. </font>
this.chartControl1.Series[0].ShowTicks = true;
</pre></code></p></font>

<li><b>Explode Slices</b>
<p>All the slices of  a pie chart can be exploded (separated from the pie) with 
the specified explosion offset when the <strong>ExplodedAll</strong> property is enabled.</p>

<p><font color="#8D2E1C"><pre><code>
this.chartControl1.Series[0].ExplodedAll = true;
this.chartControl1.Series[0].ExplosionOffset = 8f;
</pre></code></font></p>

<li><b>Doughnut structure</b>
<p>A pie chart can be rendered to a doughnut structure by making use of the
<strong>ChartConfigItem.DoughnutCoeficient</strong> property. Height of the 
chart can also be adjusted, as shown in the following code.</p>

<font color="#8D2E1C"><pre><code>
this.chartControl1.Series[0].ConfigItems.PieItem.DoughnutCoeficient = 0.1;
this.chartControl1.Series[0].ConfigItems.PieItem.HeightCoeficient=0.5;
</pre></code></font></li>

<li><b>Rotating Pie Chart</b>
<p>A pie chart can be rotated using the <b>AngleOffset</b> property.</p>
<font color="#8D2E1C"><pre><code>
this.chartControl1.Series[0].ConfigItems.PieItem.AngleOffset += 5;
</pre></code></font></li>

</ul>
</html>










