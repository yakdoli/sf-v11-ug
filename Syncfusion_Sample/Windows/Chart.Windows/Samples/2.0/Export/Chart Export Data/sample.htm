<html>
<h1>Chart Export Data</h1>
<p>This sample shows the different ways to export<strong> </strong>a chart using 
Essential Chart.</p>

<div align=center><img src="images/sample.png" alt="Chart Export Sample" title="" /></div>
<p><div align=center><TABLE><TR>
		<TD align=center><b>Chart Exporting</b></TD>
	</TR>
		
		<tr><td style="height:5"> </td></tr>
		</TABLE></div></p>

<p><strong>Features:</strong></p>

<ul>
	<li>Chart data can be exported to various formats such as:
	<ul>
		<li>Image</li>
		<li>Document</li>
		<li>PDF</li>
		<li>Excel</li>
		<li>Grid</li>
		<li>CSV</li>
		<li>EMF</li>
		<li>SVG</li>
	</ul>
</li>
</ul>
<p>&nbsp;</p>
<ul>
	<ul>
		<li><b>Export as an image</b>
		<p>Chart data can be exported as an image, as shown in the following 
		code.</p>
		</li>
	</ul>
<font color="#8D2E1C"><pre><code>
string fileName = Application.StartupPath + "\\chartexport";
exportFileName = fileName + ".gif";
this.chartControl1.SaveImage(exportFileName);
</code></pre></font>                

<li><b>Export to Document</b>
<p>Chart data can be exported to a document by using Syncfusion DocIO.
<font color="#8D2E1C"><pre><code>
exportFileName = fileName + ".doc";
string file = fileName + ".gif";
if (!System.IO.File.Exists(file))
	this.chartControl1.SaveImage(file);
<font color="#008000">//Create a new document</font>
WordDocument document = new WordDocument();
<font color="#008000">//Adding a new section to the document.</font>
IWSection section = document.AddSection();
<font color="#008000">//Adding a paragraph to the section</font>
IWParagraph paragraph = section.AddParagraph();
<font color="#008000">//Writing text.</font>
paragraph.AppendText("Essential Chart");
<font color="#008000">//Adding a new paragraph</font>		
paragraph = section.AddParagraph();
paragraph.ParagraphFormat.HorizontalAlignment = Syncfusion.DocIO.DLS.HorizontalAlignment.Center;
<font color="#008000">//Inserting chart.</font>
paragraph.AppendPicture(Image.FromFile(file));
<font color="#008000">//Save the Document to disk.</font>
document.Save(exportFileName, Syncfusion.DocIO.FormatType.Doc);
</code></pre></font>
</li>
<li><b>Export to PDF</b>
<p>Chart data can be exported to a PDF.
<font color="#8D2E1C"><pre><code>
exportFileName = fileName + ".pdf";
string file = fileName + ".gif";
if (!System.IO.File.Exists(file))
   this.chartControl1.SaveImage(file);
<font color="#008000">//Create a new PDF Document. The pdfDoc object represents the PDF document.</font>
<font color="#008000">//This document has one page by default and additional pages have to be added.</font>
PdfDocument pdfDoc = new PdfDocument();
pdfDoc.Pages.Add();
pdfDoc.Pages[0].Graphics.DrawImage(PdfImage.FromFile(file), new PointF(10,30));
<font color="#008000">//Save the PDF Document to disk.</font>
pdfDoc.Save(exportFileName);
</code></pre></font>
</li>

<li><b>Export to Excel</b>
<p>Chart data can be exported to an Excel sheet using Syncfusion XlsIO.
<font color="#8D2E1C"><pre><code>
exportFileName = fileName + ".xls";
<font color="#008000">//A new workbook with a worksheet is created.</font>
IWorkbook chartBook = ExcelUtils.CreateWorkbook(1);
IWorksheet sheet = chartBook.Worksheets[0];
<font color="#008000">//Fill the worksheet by chart data.</font>
for (int i = 1; i <= 4; i++)
{
      sheet.Range[i, 1].Number = this.chartControl1.Series[0].Points[i - 1].X;
      sheet.Range[i, 2].Number = this.chartControl1.Series[0].Points[i - 1].YValues[0];
}
for (int i = 1; i <= 4; i++)
{
      sheet.Range[i + 5, 1].Number = this.chartControl1.Series[1].Points[i - 1].X;
      sheet.Range[i + 5, 2].Number = this.chartControl1.Series[1].Points[i - 1].YValues[0];
}
<font color="#008000">//Create a chart worksheet.</font>
IChart chart = chartBook.Charts.Add("Essential Chart");
<font color="#008000">//Specifies the title of the Chart.</font>
chart.ChartTitle = "Essential Chart";
<font color="#008000">//Initializes a new series instance and adds it to the series collection of the chart.</font>
IChartSerie series1 = chart.Series.Add();
<font color="#008000">//Specify the chart type of the series.</font>
series1.SerieType = ExcelChartType.Column_Clustered;
<font color="#008000">//Specify the name of the series. This will be displayed as the text of the legend.</font>
series1.Name = "Sample Series";
<font color="#008000">//Specify the value ranges for the series.</font>
series1.Values = sheet.Range["B1:B5"];
<font color="#008000">//Specify the Category labels for the series.</font>
series1.CategoryLabels = sheet.Range["A1:A5"];
IChartSerie series2 = chart.Series.Add();
<font color="#008000">//Specify the chart type of the series.</font>
series2.SerieType = ExcelChartType.Column_Clustered;
<font color="#008000">//Specify the name of the series. This will be displayed as the text of the legend.</font>
series2.Name = "Sample Series";
<font color="#008000">//Specify the value ranges for the series.</font>
series2.Values = sheet.Range["B6:B10"];
<font color="#008000">//Specify the Category labels for the series.</font>
series2.CategoryLabels = sheet.Range["A6:A10"];

<font color="#008000">//Makes the chart as active sheet.</font>
chart.Activate();
<font color="#008000">//Save the Chart book.</font>
chartBook.SaveAs(exportFileName);
chartBook.Close();
ExcelUtils.Close();
</code></pre></font>
</li>

<li><b>Export to Grid</b>
<p>Chart data can be exported to a grid.
<font color="#8D2E1C"><pre><code>
string file = fileName + ".gif";
if (!System.IO.File.Exists(file))
       this.chartControl1.SaveImage(file);
<font color="#008000">//Creates a new instance of the Imagelist class.</font>
ImageList img = new ImageList();
<font color="#008000">//Adds the image to the Image collection of the Imagelist.</font>
img.Images.Add(Image.FromFile(file));
<font color="#008000">//Specify the size of the image.</font>
img.ImageSize = new Size(256, 256);            
<font color="#008000">//Set the imagelist of the cell.</font>
this.gridControl1[1,1].ImageList = img;
<font color="#008000">//Specify the index for the image to be displayed.</font>
this.gridControl1[1, 1].ImageIndex = 0;
<font color="#008000">//Specify the row and column height of the cell.</font>
this.gridControl1.RowHeights[1] = 300;
this.gridControl1.ColWidths[1] = 300;
<font color="#008000">//Specify the image size mode.</font>
this.gridControl1[1, 1].ImageSizeMode = GridImageSizeMode.CenterImage;
</code></pre></font>
</li>
<li><b>Export to CSV format</b>
<p>Chart data can be exported to a CSV format, as shown in the following code.
<font color="#8D2E1C"><pre><code>
string csvContent = String.Empty, csvLine = String.Empty;
string comma = ",";
exportFileName = fileName + ".csv";
try
{
    foreach (ChartSeries series in this.chartControl1.Series)
    {
       string seriesName = series.Name;
       int pointCount = series.Points.Count;
       string seriesType = series.Type.ToString();
       for (int p = 0; p < pointCount; p++)
       {
           ChartPoint point = series.Points[p];
           string yvaluescsv = String.Empty;
           int count = point.YValues.Length;
           for (int i = 0; i < count; i++)
           {
              yvaluescsv += point.YValues[i];
              if (i != count - 1)
                   yvaluescsv += comma;
           }

<font color="#008000">//The format of the csv can be given here.</font>
//csvLine = seriesName + "-" + seriesType + comma + point.X + comma + yvaluescsv;
csvLine = point.X + comma + yvaluescsv;
csvContent += csvLine + "\n";
       }
}
<font color="#008000">/Initializes the stream to write the contents in a file.</font>
System.IO.StreamWriter file = new System.IO.StreamWriter(exportFileName);
file.WriteLine(csvContent);
file.Close();
</code></pre></font>
</li>
<li><b>Export to EMF</b>
<p>Chart data can be exported to an EMF format.
<font color="#8D2E1C"><pre><code>
exportFileName = fileName + ".emf";
this.chartControl1.SaveImage(exportFileName);
</code></pre></font>
</li>
<li><b>Export to SVG</b>
<p>Chart data can be exported into a SVG format.
<font color="#8D2E1C"><pre><code>
exportFileName = fileName + ".svg";
this.chartControl1.SaveImage(exportFileName);
</code></pre></font>
</li>



</html>