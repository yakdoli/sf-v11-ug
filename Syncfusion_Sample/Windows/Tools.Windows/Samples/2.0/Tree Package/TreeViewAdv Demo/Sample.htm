<html>

<head>
<style type="text/css">
.style1 {
	margin-left: 40px;
}
</style>
</head>

<h1>TreeViewAdv Demo</h1>

<p>This sample illustrates the basic functionalities of a <strong>TreeViewAdv
</strong>control. With numerous appearance options and an inheritable styles architecture, the tree 
control lets users quickly create complex and rich trees.</p>
<p><strong>Features</strong>:</p>

<p><strong>Expand</strong></p>
<p class="style1">Tree nodes can be expanded to display the next level of child tree nodes. Users can expand the tree node by pressing the plus 
(+) button next to the <strong>TreeNodeAdv,</strong> if one is displayed; 
otherwise, they can expand the <strong>TreeNodeAdv</strong> by calling the 
<strong>Expand</strong> method.
 To expand all child tree node levels in the <strong>Nodes</strong> collection, 
users can call the 
<strong>ExpandAll</strong> method.</p>

<p><strong>Collapse</strong></p>
<p class="style1">Users can collapse the child <strong>TreeNodeAdv</strong> level by calling the <strong>CollapseAll</strong> method, 
or they can press the minus (-) button
 next to the <strong>TreeNodeAdv</strong>, if one is displayed. They can also alternate the 
tree node between its expanded and collapsed 
states by using the <strong>Expanded</strong> property.</p>

<p><div align=center><img src="images/sample.png" alt="TreeViewAdvDemo" title="" /></div></p>

<h3> Properties and Features</h3>
<p class="style1">Each node in a tree can have its own check box type, as seen 
here:</p>

<p><strong><li class="style1">Check Boxes</li></strong></p>
<ul>
<p><strong>Interactive Check Box - </strong>Indicates whether the state of the parent node's check box is based on the check-state of its child node&#39;s check 
boxes</p>

<p><strong>Tri-State Check Box - </strong>In the <strong>TreeViewAdv</strong>, 
the partial checking of child nodes is supported. The following list contains 
the three states.</p>
</ul>
<ol>
	<li>&nbsp;Checked </li>
	<li>Unchecked </li>
	<li>Intermediate</li>
</ol>
&nbsp;</p>

<p><strong><li class="style1">Radio Button</li></strong></p>
<ul><p><strong>Ensure Default Option Button</strong>
<p>This property of the <strong>TreeNodeAdv</strong> specifies whether one child of the parent node should be optioned at all 
times.</p></p>
<p><strong>Enabled Buttons</strong></p>
<p>The check box or the radio button can be locked by setting the <strong>EnabledButtons</strong> property to 
<em>true</em>, but <strong>TreeNodeAdv</strong> can be selected or deselected.</p>
</ul>

<br>
<p><strong><li class="style1">Images Property</li></strong></p>
<ul>
<p>The image content of  a tree node is drawn in the following order.</p>

(1) <strong>State Image</strong>
(2) <strong>Left Image</strong>
(3) <strong>Right Image</strong> 

<p><strong> State Image - </strong>The state image will be one of <strong>OpenImgIndex</strong>, 
<strong>ClosedImgIndex</strong>, or <strong>NoChildrenImgIndex</strong>.</p> 

<p><strong>Left Images and Right Images - </strong>This sample  is filled with multiple 
left images and right images on either
 side of a node's text.</p>
</ul>
<br>
<p><strong><li class="style1">Image Padding Property</li></strong></p>
<ul>
There are two types of image padding; they are given as follows.


<p><strong>Left Image Padding - </strong>This specifies the width of the spaces between the left images and the node's text, 
enabling the
padding between the left image and the state image, as well as the padding between the left image and the text, 
to be adjusted.</p>

<p><strong>Right Image Padding - </strong>This specifies the width of the spaces between the right images and the node's text.</p>
</ul>
<br>
<p><strong><li class="style1">Gutter Space and Indentation</li></strong></p>
<ul>
<p><strong> Gutter Space - </strong>The <strong>GutterSpace</strong><strong> </strong>property behaves like 
the left margin of the <strong>TreeViewAdv</strong>; it indicates the space that 
remains on
 the left side of the control.</p>

<p><strong> Indentation - </strong>Indicates the indentation of the child nodes from the 
parent nodes.</p>
</ul>
<br>
<p><strong><li class="style1">Context Menu</li></strong></p>
<ul>
<p>In this sample, the context menu is associated with the tree and editing. Also, the validation of the
<strong>TreeNodeAdv</strong> label is finished. The <strong>TreeNodeAdv</strong> label is displayed by setting the 
<strong>Text</strong> property explicitly.
The <strong>TreeViewAdv</strong>'s <strong>RMouseDownNode</strong> is used to selectively hide 
or display menu items for particular nodes.</p>

<p>The following code snippet will select the current node for editing.</p>

<pre>
<code>this.rightMouseDownNodeCached = this.treeViewAdv1.RMouseDownNode;
</code>
</pre>
</ul>
<p>In the
<strong>TreeViewAdv</strong> control, users can also employ Syncfusion pop-up 
menus instead of a context menu. </p>

</html>






