<h1>Layout Managers </h1>

<p>This sample illustrates the usage of the <strong>Border Layout</strong>, 
<strong>Flow Layout</strong>, <strong>Card Layout</strong>, <strong>Grid Layout</strong>, and 
<strong>Grid-Bag Layout</strong> managers. Also, it shows you how to lay out non-control-based child components.</p>

<div align=center><img src="images/sample.PNG" alt="Layout Managers Demo Image" title="" /></div>

<p>
<p><strong>Features</strong>:</p>
<ul>
	<li><strong>Border Layout</strong> lays out child controls along the borders and at the center, just like 
the .NET framework's built-in docking support.</li><br><br>

<li><strong>Card Layout</strong> shows one child at a time in a container. The child can either fill 
the container or simply be centered within it. </li><br><br>

<li><strong>Flow Layout</strong> will lay out child components horizontally or vertically in a specific order, based on constraints; 
it is one of the most commonly used layout managers.</li><br><br>

<li><strong>Grid Layout</strong> lays out child controls in a grid of rows and columns. The Grid Layout simply divides the available space into a number of rows and columns based on the number of child controls. The number of rows and columns is specified through the <strong>Rows</strong> and <strong>Columns</strong> properties.</li><br><br>

<li><strong>Grid-Bag Layout</strong> lays out child controls in a virtual grid of rows and columns. But unlike 
the Grid Layout manger, the size of the columns or rows can be varied and the 
child controls may span more than one cell.</li><br>
</ul>

<p>This sample also shows how the layout-manager architecture seamlessly allows 
using non-control derived child instances as layout children.</p>
</p>


