<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAEBAAAAEAIABoBAAAFgAAACgAAAAQAAAAIAAAAAEAIAAAAAAAQAQAAAAAAAAAAAAAAAAAAAAA
        AAB8QTK2fEEytnxBMrZ8QTK2fEEyQXxBMrZ8QTK2fEEytnxBMnV8QTJ1fEEytnxBMrZ8QTK2fEEyQQAA
        AAAAAAAAfEEy/3xBMv98QTL/fEEy/3xBMlt8QTL/fEEy/3xBMv98QTKkfEEypHxBMv98QTL/fEEy/3xB
        MlsAAAAAAAAAAHxBMv98QTL/fEEy/3xBMv98QTJbfEEy/3xBMv98QTL/e0EypHtBMqR8QTL/fEEy/3xB
        Mv97QTNbAAAAAAAAAAB8QTL/fEEy/3xBMv98QTL/fEEyW3xBMv98QTL/fEEy/3tCNKR7QjSkfEEy/3xB
        Mv98QTL/c0pGWwAAAAAAAAAAfEEyW3xBMlt8QTJbfEEyW3xBMiB8QTJbfEEyW3lDN1tzSUU6ZllpOmBf
        dltdY39bXWOAW1tlhCAAAAAAAAAAAHxBMux8QTLsfEEy7HxBMux8QTJUfEEy7HxBMux8QTLseEQ6mDmN
        35gylvLsMpby7DKW8uw+htBUAAAAAAAAAAB8QTL/fEEy/3xBMv98QTL/fEEyW3xBMv98QTL/fEEy/3dG
        PaQ3j+KkMpby/zKW8v8ylvL/NJLrWwAAAAAAAAAAfEEy/3xBMv98QTL/fEEy/3xBMlt8QTL/fEEy/3xB
        Mv93Rj6kN4/ipDKW8v8ylvL/Mpby/zKW8lsAAAAAAAAAAHxBMux8QTLsfEEy7HxBMux8QTJUfEEy7HxB
        Mux8QTLsd0U8mDiO4ZgylvLsMpby7DKW8uwylvJUAAAAAAAAAAB8QTJtfEEybXxBMm18QTJtfEEyJ3xB
        Mm18QTJtekI1bXRIREZYaY0LQ4DCEjKU7xIylvISMpbyBgAAAAAAAAAAfEEy/3xBMv98QTL/fEEy/3xB
        Mlt8QTL/fEEy/3xBMv95QzekAAAAAAAAAAAAAAAAMpbyVzKW8rIylvIHAAAAAHxBMv98QTL/fEEy/3xB
        Mv98QTJbfEEy/3xBMv98QTL/ekI1pAAAAABLd60BM5TvdDKW8voylvL/MpbymTKW8gJ8QTL/fEEy/3xB
        Mv98QTL/fEEyW3xBMv98QTL/fEEy/3pCNaQAAAAAOovafzKW8v4ylvL/Mpby/zKW8v4ylvJ6fEEyo3xB
        MqN8QTKjfEEyo3xBMjp8QTKjfEEyo3xBMqN4RDlpAAAAAD+FzCsylfHrMpby/zKW8v8ylvL9MpbyhwAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMpXwQTKW8vcylvL3MpbyYgAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAylvJdMpbyRgAA
        AAAAAAAAAAMAAAADAAAAAwAAAAMAAAADAAAAAwAAAAMAAAADAAAAAwAAAAMAAABxAAAAQAAAAEAAAABA
        AAD/4QAA//MAAA==
</value>
  </data>
</root>