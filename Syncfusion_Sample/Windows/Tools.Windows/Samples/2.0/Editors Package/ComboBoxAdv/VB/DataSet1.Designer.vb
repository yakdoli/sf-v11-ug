'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.42
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------



Imports Microsoft.VisualBasic
	Imports System
Namespace ComboTest


	<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), Serializable(), System.ComponentModel.DesignerCategoryAttribute("code"), System.ComponentModel.ToolboxItem(True), System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"), System.Xml.Serialization.XmlRootAttribute("DataSet1"), System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")> _
	Public partial Class DataSet1 : Inherits System.Data.DataSet

		Private tableCustomers As CustomersDataTable

		Private _schemaSerializationMode As System.Data.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema

		<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Public Sub New()
			Me.BeginInit()
			Me.InitClass()
			Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = New System.ComponentModel.CollectionChangeEventHandler(AddressOf Me.SchemaChanged)
			AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
			AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
			Me.EndInit()
		End Sub

		<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
			MyBase.New(info, context, False)
			If (Me.IsBinarySerialized(info, context) = True) Then
				Me.InitVars(False)
				Dim schemaChangedHandler1 As System.ComponentModel.CollectionChangeEventHandler = New System.ComponentModel.CollectionChangeEventHandler(AddressOf Me.SchemaChanged)
				AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
				AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
				Return
			End If
			Dim strSchema As String = (CStr(info.GetValue("XmlSchema", GetType(String))))
			If (Me.DetermineSchemaSerializationMode(info, context) = System.Data.SchemaSerializationMode.IncludeSchema) Then
				Dim ds As System.Data.DataSet = New System.Data.DataSet()
				ds.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
				If (Not ds.Tables("Customers") Is Nothing) Then
					MyBase.Tables.Add(New CustomersDataTable(ds.Tables("Customers")))
				End If
				Me.DataSetName = ds.DataSetName
				Me.Prefix = ds.Prefix
				Me.Namespace = ds.Namespace
				Me.Locale = ds.Locale
				Me.CaseSensitive = ds.CaseSensitive
				Me.EnforceConstraints = ds.EnforceConstraints
				Me.Merge(ds, False, System.Data.MissingSchemaAction.Add)
				Me.InitVars()
			Else
				Me.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
			End If
			Me.GetSerializationData(info, context)
			Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = New System.ComponentModel.CollectionChangeEventHandler(AddressOf Me.SchemaChanged)
			AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
			AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
		End Sub

		<System.Diagnostics.DebuggerNonUserCodeAttribute(), System.ComponentModel.Browsable(False), System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)> _
		Public ReadOnly Property Customers() As CustomersDataTable
			Get
				Return Me.tableCustomers
			End Get
		End Property

		<System.Diagnostics.DebuggerNonUserCodeAttribute(), System.ComponentModel.BrowsableAttribute(True), System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)> _
		Public Overrides Property SchemaSerializationMode() As System.Data.SchemaSerializationMode
			Get
				Return Me._schemaSerializationMode
			End Get
			Set
				Me._schemaSerializationMode = Value
			End Set
		End Property

		<System.Diagnostics.DebuggerNonUserCodeAttribute(), System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)> _
		Public Shadows ReadOnly Property Tables() As System.Data.DataTableCollection
			Get
				Return MyBase.Tables
			End Get
		End Property

		<System.Diagnostics.DebuggerNonUserCodeAttribute(), System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)> _
		Public Shadows ReadOnly Property Relations() As System.Data.DataRelationCollection
			Get
				Return MyBase.Relations
			End Get
		End Property

		<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Protected Overrides Sub InitializeDerivedDataSet()
			Me.BeginInit()
			Me.InitClass()
			Me.EndInit()
		End Sub

		<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Public Overrides Function Clone() As System.Data.DataSet
			Dim cln As DataSet1 = (CType(MyBase.Clone(), DataSet1))
			cln.InitVars()
			cln.SchemaSerializationMode = Me.SchemaSerializationMode
			Return cln
		End Function

		<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Protected Overrides Function ShouldSerializeTables() As Boolean
			Return False
		End Function

		<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Protected Overrides Function ShouldSerializeRelations() As Boolean
			Return False
		End Function

		<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Protected Overrides Sub ReadXmlSerializable(ByVal reader As System.Xml.XmlReader)
			If (Me.DetermineSchemaSerializationMode(reader) = System.Data.SchemaSerializationMode.IncludeSchema) Then
				Me.Reset()
				Dim ds As System.Data.DataSet = New System.Data.DataSet()
				ds.ReadXml(reader)
				If (Not ds.Tables("Customers") Is Nothing) Then
					MyBase.Tables.Add(New CustomersDataTable(ds.Tables("Customers")))
				End If
				Me.DataSetName = ds.DataSetName
				Me.Prefix = ds.Prefix
				Me.Namespace = ds.Namespace
				Me.Locale = ds.Locale
				Me.CaseSensitive = ds.CaseSensitive
				Me.EnforceConstraints = ds.EnforceConstraints
				Me.Merge(ds, False, System.Data.MissingSchemaAction.Add)
				Me.InitVars()
			Else
				Me.ReadXml(reader)
				Me.InitVars()
			End If
		End Sub

		<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
			Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream()
			Me.WriteXmlSchema(New System.Xml.XmlTextWriter(stream, Nothing))
			stream.Position = 0
			Return System.Xml.Schema.XmlSchema.Read(New System.Xml.XmlTextReader(stream), Nothing)
		End Function

		<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Friend Sub InitVars()
			Me.InitVars(True)
		End Sub

		<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Friend Sub InitVars(ByVal initTable As Boolean)
			Me.tableCustomers = (CType(MyBase.Tables("Customers"), CustomersDataTable))
			If (initTable = True) Then
				If (Not Me.tableCustomers Is Nothing) Then
					Me.tableCustomers.InitVars()
				End If
			End If
		End Sub

		<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Private Sub InitClass()
			Me.DataSetName = "DataSet1"
			Me.Prefix = ""
			Me.Namespace = "http://www.tempuri.org/DataSet1.xsd"
			Me.EnforceConstraints = True
			Me.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
			Me.tableCustomers = New CustomersDataTable()
			MyBase.Tables.Add(Me.tableCustomers)
		End Sub

		<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Private Function ShouldSerializeCustomers() As Boolean
			Return False
		End Function

		<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
			If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
				Me.InitVars()
			End If
		End Sub

		<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Public Shared Function GetTypedDataSetSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
			Dim ds As DataSet1 = New DataSet1()
			Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType()
			Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence()
			xs.Add(ds.GetSchemaSerializable())
			Dim any As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny()
			any.Namespace = ds.Namespace
			sequence.Items.Add(any)
			type.Particle = sequence
			Return type
		End Function

		Public Delegate Sub CustomersRowChangeEventHandler(ByVal sender As Object, ByVal e As CustomersRowChangeEvent)

		<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), System.Serializable(), System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
		Public partial Class CustomersDataTable : Inherits System.Data.DataTable : Implements System.Collections.IEnumerable

			Private columnCustomerName As System.Data.DataColumn

			Private columnID As System.Data.DataColumn

			Private columnSex As System.Data.DataColumn

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub New()
				Me.TableName = "Customers"
				Me.BeginInit()
				Me.InitClass()
				Me.EndInit()
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Friend Sub New(ByVal table As System.Data.DataTable)
				Me.TableName = table.TableName
				If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
					Me.CaseSensitive = table.CaseSensitive
				End If
				If (table.Locale.ToString() <> table.DataSet.Locale.ToString()) Then
					Me.Locale = table.Locale
				End If
				If (table.Namespace <> table.DataSet.Namespace) Then
					Me.Namespace = table.Namespace
				End If
				Me.Prefix = table.Prefix
				Me.MinimumCapacity = table.MinimumCapacity
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
				MyBase.New(info, context)
				Me.InitVars()
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property CustomerNameColumn() As System.Data.DataColumn
				Get
					Return Me.columnCustomerName
				End Get
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property IDColumn() As System.Data.DataColumn
				Get
					Return Me.columnID
				End Get
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property SexColumn() As System.Data.DataColumn
				Get
					Return Me.columnSex
				End Get
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute(), System.ComponentModel.Browsable(False)> _
			Public ReadOnly Property Count() As Integer
				Get
					Return Me.Rows.Count
				End Get
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Default Property Item(ByVal index As Integer) As CustomersRow
				Get
					Return (CType(Me.Rows(index), CustomersRow))
				End Get
			End Property

			Public Event CustomersRowChanging As CustomersRowChangeEventHandler

			Public Event CustomersRowChanged As CustomersRowChangeEventHandler

			Public Event CustomersRowDeleting As CustomersRowChangeEventHandler

			Public Event CustomersRowDeleted As CustomersRowChangeEventHandler

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub AddCustomersRow(ByVal row As CustomersRow)
				Me.Rows.Add(row)
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function AddCustomersRow(ByVal CustomerName As String, ByVal Sex As String) As CustomersRow
				Dim rowCustomersRow As CustomersRow = (CType(Me.NewRow(), CustomersRow))
				rowCustomersRow.ItemArray = New Object() { CustomerName, Nothing, Sex}
				Me.Rows.Add(rowCustomersRow)
				Return rowCustomersRow
			End Function

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function FindByID(ByVal ID As Integer) As CustomersRow
				Return (CType(Me.Rows.Find(New Object() { ID}), CustomersRow))
			End Function

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
				Return Me.Rows.GetEnumerator()
			End Function

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Overrides Overloads Function Clone() As System.Data.DataTable
				Dim cln As CustomersDataTable = (CType(MyBase.Clone(), CustomersDataTable))
				cln.InitVars()
				Return cln
			End Function

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Protected Overrides Function CreateInstance() As System.Data.DataTable
				Return New CustomersDataTable()
			End Function

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Friend Sub InitVars()
				Me.columnCustomerName = MyBase.Columns("CustomerName")
				Me.columnID = MyBase.Columns("ID")
				Me.columnSex = MyBase.Columns("Sex")
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Private Sub InitClass()
				Me.columnCustomerName = New System.Data.DataColumn("CustomerName", GetType(String), Nothing, System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnCustomerName)
				Me.columnID = New System.Data.DataColumn("ID", GetType(Integer), Nothing, System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnID)
				Me.columnSex = New System.Data.DataColumn("Sex", GetType(String), Nothing, System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnSex)
				Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() { Me.columnID}, True))
				Me.columnID.AutoIncrement = True
				Me.columnID.AllowDBNull = False
				Me.columnID.Unique = True
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function NewCustomersRow() As CustomersRow
				Return (CType(Me.NewRow(), CustomersRow))
			End Function

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
				Return New CustomersRow(builder)
			End Function

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Protected Overrides Function GetRowType() As System.Type
				Return GetType(CustomersRow)
			End Function

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
				MyBase.OnRowChanged(e)
				If (Not Me.CustomersRowChangedEvent Is Nothing) Then
					RaiseEvent CustomersRowChanged(Me, New CustomersRowChangeEvent((CType(e.Row, CustomersRow)), e.Action))
				End If
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
				MyBase.OnRowChanging(e)
				If (Not Me.CustomersRowChangingEvent Is Nothing) Then
					RaiseEvent CustomersRowChanging(Me, New CustomersRowChangeEvent((CType(e.Row, CustomersRow)), e.Action))
				End If
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
				MyBase.OnRowDeleted(e)
				If (Not Me.CustomersRowDeletedEvent Is Nothing) Then
					RaiseEvent CustomersRowDeleted(Me, New CustomersRowChangeEvent((CType(e.Row, CustomersRow)), e.Action))
				End If
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
				MyBase.OnRowDeleting(e)
				If (Not Me.CustomersRowDeletingEvent Is Nothing) Then
					RaiseEvent CustomersRowDeleting(Me, New CustomersRowChangeEvent((CType(e.Row, CustomersRow)), e.Action))
				End If
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub RemoveCustomersRow(ByVal row As CustomersRow)
				Me.Rows.Remove(row)
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
				Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType()
				Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence()
				Dim ds As DataSet1 = New DataSet1()
				xs.Add(ds.GetSchemaSerializable())
				Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny()
				any1.Namespace = "http://www.w3.org/2001/XMLSchema"
				any1.MinOccurs = New Decimal(0)
				any1.MaxOccurs = Decimal.MaxValue
				any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
				sequence.Items.Add(any1)
				Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny()
				any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
				any2.MinOccurs = New Decimal(1)
				any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
				sequence.Items.Add(any2)
				Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute()
				attribute1.Name = "namespace"
				attribute1.FixedValue = ds.Namespace
				type.Attributes.Add(attribute1)
				Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute()
				attribute2.Name = "tableTypeName"
				attribute2.FixedValue = "CustomersDataTable"
				type.Attributes.Add(attribute2)
				type.Particle = sequence
				Return type
			End Function
		End Class

		<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
		Public partial Class CustomersRow : Inherits System.Data.DataRow

			Private tableCustomers As CustomersDataTable

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
				MyBase.New(rb)
				Me.tableCustomers = (CType(Me.Table, CustomersDataTable))
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Property CustomerName() As String
				Get
					Try
						Return (CStr(Me(Me.tableCustomers.CustomerNameColumn)))
					Catch e As System.InvalidCastException
						Throw New System.Data.StrongTypingException("The value for column 'CustomerName' in table 'Customers' is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableCustomers.CustomerNameColumn) = Value
				End Set
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Property ID() As Integer
				Get
					Return (CInt(Me(Me.tableCustomers.IDColumn)))
				End Get
				Set
					Me(Me.tableCustomers.IDColumn) = Value
				End Set
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Property Sex() As String
				Get
					Try
						Return (CStr(Me(Me.tableCustomers.SexColumn)))
					Catch e As System.InvalidCastException
						Throw New System.Data.StrongTypingException("The value for column 'Sex' in table 'Customers' is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableCustomers.SexColumn) = Value
				End Set
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function IsCustomerNameNull() As Boolean
				Return Me.IsNull(Me.tableCustomers.CustomerNameColumn)
			End Function

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub SetCustomerNameNull()
				Me(Me.tableCustomers.CustomerNameColumn) = System.Convert.DBNull
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function IsSexNull() As Boolean
				Return Me.IsNull(Me.tableCustomers.SexColumn)
			End Function

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub SetSexNull()
				Me(Me.tableCustomers.SexColumn) = System.Convert.DBNull
			End Sub
		End Class

		<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
		Public Class CustomersRowChangeEvent : Inherits System.EventArgs

			Private eventRow As CustomersRow

			Private eventAction As System.Data.DataRowAction

'INSTANT VB NOTE: The parameter row was renamed since Visual Basic will not uniquely identify class members when parameters have the same name:
'INSTANT VB NOTE: The parameter action was renamed since Visual Basic will not uniquely identify class members when parameters have the same name:
			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub New(ByVal row_Renamed As CustomersRow, ByVal action_Renamed As System.Data.DataRowAction)
				Me.eventRow = row_Renamed
				Me.eventAction = action_Renamed
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property Row() As CustomersRow
				Get
					Return Me.eventRow
				End Get
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property Action() As System.Data.DataRowAction
				Get
					Return Me.eventAction
				End Get
			End Property
		End Class
	End Class
End Namespace

