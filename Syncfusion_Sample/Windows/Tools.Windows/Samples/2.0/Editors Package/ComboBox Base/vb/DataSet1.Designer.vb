'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.42
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

'TODO: INSTANT VB TODO TASK: There is no equivalent to #pragma directives in VB.NET:
'#pragma warning disable 1591


Imports Microsoft.VisualBasic
	Imports System
Namespace ComboBoxBase


	<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), Serializable(), System.ComponentModel.DesignerCategoryAttribute("code"), System.ComponentModel.ToolboxItem(True), System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"), System.Xml.Serialization.XmlRootAttribute("DataSet1"), System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")> _
	Public Partial Class DataSet1
		Inherits System.Data.DataSet

		Private tableProducts As ProductsDataTable

		Private tableCategories As CategoriesDataTable

		Private _schemaSerializationMode As System.Data.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema

		<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Public Sub New()
			Me.BeginInit()
			Me.InitClass()
			Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = New System.ComponentModel.CollectionChangeEventHandler(AddressOf Me.SchemaChanged)
			AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
			AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
			Me.EndInit()
		End Sub

		<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
			MyBase.New(info, context, False)
			If (Me.IsBinarySerialized(info, context) = True) Then
				Me.InitVars(False)
				Dim schemaChangedHandler1 As System.ComponentModel.CollectionChangeEventHandler = New System.ComponentModel.CollectionChangeEventHandler(AddressOf Me.SchemaChanged)
				AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
				AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
				Return
			End If
			Dim strSchema As String = (CStr(info.GetValue("XmlSchema", GetType(String))))
			If (Me.DetermineSchemaSerializationMode(info, context) = System.Data.SchemaSerializationMode.IncludeSchema) Then
				Dim ds As System.Data.DataSet = New System.Data.DataSet()
				ds.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
				If (Not ds.Tables("Products") Is Nothing) Then
					MyBase.Tables.Add(New ProductsDataTable(ds.Tables("Products")))
				End If
				If (Not ds.Tables("Categories") Is Nothing) Then
					MyBase.Tables.Add(New CategoriesDataTable(ds.Tables("Categories")))
				End If
				Me.DataSetName = ds.DataSetName
				Me.Prefix = ds.Prefix
				Me.Namespace = ds.Namespace
				Me.Locale = ds.Locale
				Me.CaseSensitive = ds.CaseSensitive
				Me.EnforceConstraints = ds.EnforceConstraints
				Me.Merge(ds, False, System.Data.MissingSchemaAction.Add)
				Me.InitVars()
			Else
				Me.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
			End If
			Me.GetSerializationData(info, context)
			Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = New System.ComponentModel.CollectionChangeEventHandler(AddressOf Me.SchemaChanged)
			AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
			AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
		End Sub

		<System.Diagnostics.DebuggerNonUserCodeAttribute(), System.ComponentModel.Browsable(False), System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)> _
		Public ReadOnly Property Products() As ProductsDataTable
			Get
				Return Me.tableProducts
			End Get
		End Property

		<System.Diagnostics.DebuggerNonUserCodeAttribute(), System.ComponentModel.Browsable(False), System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)> _
		Public ReadOnly Property Categories() As CategoriesDataTable
			Get
				Return Me.tableCategories
			End Get
		End Property

		<System.Diagnostics.DebuggerNonUserCodeAttribute(), System.ComponentModel.BrowsableAttribute(True), System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)> _
		Public Overrides Property SchemaSerializationMode() As System.Data.SchemaSerializationMode
			Get
				Return Me._schemaSerializationMode
			End Get
			Set(ByVal value As System.Data.SchemaSerializationMode)
				Me._schemaSerializationMode = value
			End Set
		End Property

		<System.Diagnostics.DebuggerNonUserCodeAttribute(), System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)> _
		Public Shadows ReadOnly Property Tables() As System.Data.DataTableCollection
			Get
				Return MyBase.Tables
			End Get
		End Property

		<System.Diagnostics.DebuggerNonUserCodeAttribute(), System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)> _
		Public Shadows ReadOnly Property Relations() As System.Data.DataRelationCollection
			Get
				Return MyBase.Relations
			End Get
		End Property

		<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Protected Overrides Sub InitializeDerivedDataSet()
			Me.BeginInit()
			Me.InitClass()
			Me.EndInit()
		End Sub

		<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Public Overrides Function Clone() As System.Data.DataSet
			Dim cln As DataSet1 = (CType(MyBase.Clone(), DataSet1))
			cln.InitVars()
			cln.SchemaSerializationMode = Me.SchemaSerializationMode
			Return cln
		End Function

		<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Protected Overrides Function ShouldSerializeTables() As Boolean
			Return False
		End Function

		<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Protected Overrides Function ShouldSerializeRelations() As Boolean
			Return False
		End Function

		<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Protected Overrides Sub ReadXmlSerializable(ByVal reader As System.Xml.XmlReader)
			If (Me.DetermineSchemaSerializationMode(reader) = System.Data.SchemaSerializationMode.IncludeSchema) Then
				Me.Reset()
				Dim ds As System.Data.DataSet = New System.Data.DataSet()
				ds.ReadXml(reader)
				If (Not ds.Tables("Products") Is Nothing) Then
					MyBase.Tables.Add(New ProductsDataTable(ds.Tables("Products")))
				End If
				If (Not ds.Tables("Categories") Is Nothing) Then
					MyBase.Tables.Add(New CategoriesDataTable(ds.Tables("Categories")))
				End If
				Me.DataSetName = ds.DataSetName
				Me.Prefix = ds.Prefix
				Me.Namespace = ds.Namespace
				Me.Locale = ds.Locale
				Me.CaseSensitive = ds.CaseSensitive
				Me.EnforceConstraints = ds.EnforceConstraints
				Me.Merge(ds, False, System.Data.MissingSchemaAction.Add)
				Me.InitVars()
			Else
				Me.ReadXml(reader)
				Me.InitVars()
			End If
		End Sub

		<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
			Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream()
			Me.WriteXmlSchema(New System.Xml.XmlTextWriter(stream, Nothing))
			stream.Position = 0
			Return System.Xml.Schema.XmlSchema.Read(New System.Xml.XmlTextReader(stream), Nothing)
		End Function

		<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Friend Sub InitVars()
			Me.InitVars(True)
		End Sub

		<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Friend Sub InitVars(ByVal initTable As Boolean)
			Me.tableProducts = (CType(MyBase.Tables("Products"), ProductsDataTable))
			If (initTable = True) Then
				If (Not Me.tableProducts Is Nothing) Then
					Me.tableProducts.InitVars()
				End If
			End If
			Me.tableCategories = (CType(MyBase.Tables("Categories"), CategoriesDataTable))
			If (initTable = True) Then
				If (Not Me.tableCategories Is Nothing) Then
					Me.tableCategories.InitVars()
				End If
			End If
		End Sub

		<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Private Sub InitClass()
			Me.DataSetName = "DataSet1"
			Me.Prefix = ""
			Me.Namespace = "http://www.tempuri.org/DataSet1.xsd"
			Me.EnforceConstraints = True
			Me.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
			Me.tableProducts = New ProductsDataTable()
			MyBase.Tables.Add(Me.tableProducts)
			Me.tableCategories = New CategoriesDataTable()
			MyBase.Tables.Add(Me.tableCategories)
		End Sub

		<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Private Function ShouldSerializeProducts() As Boolean
			Return False
		End Function

		<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Private Function ShouldSerializeCategories() As Boolean
			Return False
		End Function

		<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
			If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
				Me.InitVars()
			End If
		End Sub

		<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Public Shared Function GetTypedDataSetSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
			Dim ds As DataSet1 = New DataSet1()
			Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType()
			Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence()
			xs.Add(ds.GetSchemaSerializable())
			Dim any As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny()
			any.Namespace = ds.Namespace
			sequence.Items.Add(any)
			type.Particle = sequence
			Return type
		End Function

		Public Delegate Sub ProductsRowChangeEventHandler(ByVal sender As Object, ByVal e As ProductsRowChangeEvent)

		Public Delegate Sub CategoriesRowChangeEventHandler(ByVal sender As Object, ByVal e As CategoriesRowChangeEvent)

		<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), System.Serializable(), System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
		Public Partial Class ProductsDataTable
			Inherits System.Data.DataTable
			Implements System.Collections.IEnumerable

			Private columnProductID As System.Data.DataColumn

			Private columnProductName As System.Data.DataColumn

			Private columnUnitPrice As System.Data.DataColumn

			Private columnDiscontinued As System.Data.DataColumn

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub New()
				Me.TableName = "Products"
				Me.BeginInit()
				Me.InitClass()
				Me.EndInit()
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Friend Sub New(ByVal table As System.Data.DataTable)
				Me.TableName = table.TableName
				If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
					Me.CaseSensitive = table.CaseSensitive
				End If
				If (table.Locale.ToString() <> table.DataSet.Locale.ToString()) Then
					Me.Locale = table.Locale
				End If
				If (Not table.Namespace Is table.DataSet.Namespace) Then
					Me.Namespace = table.Namespace
				End If
				Me.Prefix = table.Prefix
				Me.MinimumCapacity = table.MinimumCapacity
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
				MyBase.New(info, context)
				Me.InitVars()
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property ProductIDColumn() As System.Data.DataColumn
				Get
					Return Me.columnProductID
				End Get
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property ProductNameColumn() As System.Data.DataColumn
				Get
					Return Me.columnProductName
				End Get
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property UnitPriceColumn() As System.Data.DataColumn
				Get
					Return Me.columnUnitPrice
				End Get
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property DiscontinuedColumn() As System.Data.DataColumn
				Get
					Return Me.columnDiscontinued
				End Get
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute(), System.ComponentModel.Browsable(False)> _
			Public ReadOnly Property Count() As Integer
				Get
					Return Me.Rows.Count
				End Get
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Default Public ReadOnly Property Item(ByVal index As Integer) As ProductsRow
				Get
					Return (CType(Me.Rows(index), ProductsRow))
				End Get
			End Property

			Public Event ProductsRowChanging As ProductsRowChangeEventHandler

			Public Event ProductsRowChanged As ProductsRowChangeEventHandler

			Public Event ProductsRowDeleting As ProductsRowChangeEventHandler

			Public Event ProductsRowDeleted As ProductsRowChangeEventHandler

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub AddProductsRow(ByVal row As ProductsRow)
				Me.Rows.Add(row)
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function AddProductsRow(ByVal ProductName As String, ByVal UnitPrice As Decimal, ByVal Discontinued As Boolean) As ProductsRow
				Dim rowProductsRow As ProductsRow = (CType(Me.NewRow(), ProductsRow))
				rowProductsRow.ItemArray = New Object() { Nothing, ProductName, UnitPrice, Discontinued}
				Me.Rows.Add(rowProductsRow)
				Return rowProductsRow
			End Function

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
				Return Me.Rows.GetEnumerator()
			End Function

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Overrides Function Clone() As System.Data.DataTable
				Dim cln As ProductsDataTable = (CType(MyBase.Clone(), ProductsDataTable))
				cln.InitVars()
				Return cln
			End Function

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Protected Overrides Function CreateInstance() As System.Data.DataTable
				Return New ProductsDataTable()
			End Function

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Friend Sub InitVars()
				Me.columnProductID = MyBase.Columns("ProductID")
				Me.columnProductName = MyBase.Columns("ProductName")
				Me.columnUnitPrice = MyBase.Columns("UnitPrice")
				Me.columnDiscontinued = MyBase.Columns("Discontinued")
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Private Sub InitClass()
				Me.columnProductID = New System.Data.DataColumn("ProductID", GetType(Integer), Nothing, System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnProductID)
				Me.columnProductName = New System.Data.DataColumn("ProductName", GetType(String), Nothing, System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnProductName)
				Me.columnUnitPrice = New System.Data.DataColumn("UnitPrice", GetType(Decimal), Nothing, System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnUnitPrice)
				Me.columnDiscontinued = New System.Data.DataColumn("Discontinued", GetType(Boolean), Nothing, System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnDiscontinued)
				Me.columnProductID.AutoIncrement = True
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function NewProductsRow() As ProductsRow
				Return (CType(Me.NewRow(), ProductsRow))
			End Function

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
				Return New ProductsRow(builder)
			End Function

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Protected Overrides Function GetRowType() As System.Type
				Return GetType(ProductsRow)
			End Function

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
				MyBase.OnRowChanged(e)
				If (Not Me.ProductsRowChangedEvent Is Nothing) Then
					RaiseEvent ProductsRowChanged(Me, New ProductsRowChangeEvent((CType(e.Row, ProductsRow)), e.Action))
				End If
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
				MyBase.OnRowChanging(e)
				If (Not Me.ProductsRowChangingEvent Is Nothing) Then
					RaiseEvent ProductsRowChanging(Me, New ProductsRowChangeEvent((CType(e.Row, ProductsRow)), e.Action))
				End If
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
				MyBase.OnRowDeleted(e)
				If (Not Me.ProductsRowDeletedEvent Is Nothing) Then
					RaiseEvent ProductsRowDeleted(Me, New ProductsRowChangeEvent((CType(e.Row, ProductsRow)), e.Action))
				End If
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
				MyBase.OnRowDeleting(e)
				If (Not Me.ProductsRowDeletingEvent Is Nothing) Then
					RaiseEvent ProductsRowDeleting(Me, New ProductsRowChangeEvent((CType(e.Row, ProductsRow)), e.Action))
				End If
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub RemoveProductsRow(ByVal row As ProductsRow)
				Me.Rows.Remove(row)
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
				Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType()
				Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence()
				Dim ds As DataSet1 = New DataSet1()
				xs.Add(ds.GetSchemaSerializable())
				Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny()
				any1.Namespace = "http://www.w3.org/2001/XMLSchema"
				any1.MinOccurs = New Decimal(0)
				any1.MaxOccurs = Decimal.MaxValue
				any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
				sequence.Items.Add(any1)
				Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny()
				any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
				any2.MinOccurs = New Decimal(1)
				any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
				sequence.Items.Add(any2)
				Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute()
				attribute1.Name = "namespace"
				attribute1.FixedValue = ds.Namespace
				type.Attributes.Add(attribute1)
				Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute()
				attribute2.Name = "tableTypeName"
				attribute2.FixedValue = "ProductsDataTable"
				type.Attributes.Add(attribute2)
				type.Particle = sequence
				Return type
			End Function
		End Class

		<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), System.Serializable(), System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
		Public Partial Class CategoriesDataTable
			Inherits System.Data.DataTable
			Implements System.Collections.IEnumerable

			Private columnCategoryName As System.Data.DataColumn

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub New()
				Me.TableName = "Categories"
				Me.BeginInit()
				Me.InitClass()
				Me.EndInit()
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Friend Sub New(ByVal table As System.Data.DataTable)
				Me.TableName = table.TableName
				If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
					Me.CaseSensitive = table.CaseSensitive
				End If
				If (table.Locale.ToString() <> table.DataSet.Locale.ToString()) Then
					Me.Locale = table.Locale
				End If
				If (Not table.Namespace Is table.DataSet.Namespace) Then
					Me.Namespace = table.Namespace
				End If
				Me.Prefix = table.Prefix
				Me.MinimumCapacity = table.MinimumCapacity
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
				MyBase.New(info, context)
				Me.InitVars()
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property CategoryNameColumn() As System.Data.DataColumn
				Get
					Return Me.columnCategoryName
				End Get
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute(), System.ComponentModel.Browsable(False)> _
			Public ReadOnly Property Count() As Integer
				Get
					Return Me.Rows.Count
				End Get
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Default Public ReadOnly Property Item(ByVal index As Integer) As CategoriesRow
				Get
					Return (CType(Me.Rows(index), CategoriesRow))
				End Get
			End Property

			Public Event CategoriesRowChanging As CategoriesRowChangeEventHandler

			Public Event CategoriesRowChanged As CategoriesRowChangeEventHandler

			Public Event CategoriesRowDeleting As CategoriesRowChangeEventHandler

			Public Event CategoriesRowDeleted As CategoriesRowChangeEventHandler

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub AddCategoriesRow(ByVal row As CategoriesRow)
				Me.Rows.Add(row)
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function AddCategoriesRow(ByVal CategoryName As String) As CategoriesRow
				Dim rowCategoriesRow As CategoriesRow = (CType(Me.NewRow(), CategoriesRow))
				rowCategoriesRow.ItemArray = New Object() { CategoryName}
				Me.Rows.Add(rowCategoriesRow)
				Return rowCategoriesRow
			End Function

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
				Return Me.Rows.GetEnumerator()
			End Function

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Overrides Function Clone() As System.Data.DataTable
				Dim cln As CategoriesDataTable = (CType(MyBase.Clone(), CategoriesDataTable))
				cln.InitVars()
				Return cln
			End Function

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Protected Overrides Function CreateInstance() As System.Data.DataTable
				Return New CategoriesDataTable()
			End Function

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Friend Sub InitVars()
				Me.columnCategoryName = MyBase.Columns("CategoryName")
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Private Sub InitClass()
				Me.columnCategoryName = New System.Data.DataColumn("CategoryName", GetType(String), Nothing, System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnCategoryName)
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function NewCategoriesRow() As CategoriesRow
				Return (CType(Me.NewRow(), CategoriesRow))
			End Function

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
				Return New CategoriesRow(builder)
			End Function

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Protected Overrides Function GetRowType() As System.Type
				Return GetType(CategoriesRow)
			End Function

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
				MyBase.OnRowChanged(e)
				If (Not Me.CategoriesRowChangedEvent Is Nothing) Then
					RaiseEvent CategoriesRowChanged(Me, New CategoriesRowChangeEvent((CType(e.Row, CategoriesRow)), e.Action))
				End If
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
				MyBase.OnRowChanging(e)
				If (Not Me.CategoriesRowChangingEvent Is Nothing) Then
					RaiseEvent CategoriesRowChanging(Me, New CategoriesRowChangeEvent((CType(e.Row, CategoriesRow)), e.Action))
				End If
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
				MyBase.OnRowDeleted(e)
				If (Not Me.CategoriesRowDeletedEvent Is Nothing) Then
					RaiseEvent CategoriesRowDeleted(Me, New CategoriesRowChangeEvent((CType(e.Row, CategoriesRow)), e.Action))
				End If
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
				MyBase.OnRowDeleting(e)
				If (Not Me.CategoriesRowDeletingEvent Is Nothing) Then
					RaiseEvent CategoriesRowDeleting(Me, New CategoriesRowChangeEvent((CType(e.Row, CategoriesRow)), e.Action))
				End If
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub RemoveCategoriesRow(ByVal row As CategoriesRow)
				Me.Rows.Remove(row)
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
				Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType()
				Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence()
				Dim ds As DataSet1 = New DataSet1()
				xs.Add(ds.GetSchemaSerializable())
				Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny()
				any1.Namespace = "http://www.w3.org/2001/XMLSchema"
				any1.MinOccurs = New Decimal(0)
				any1.MaxOccurs = Decimal.MaxValue
				any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
				sequence.Items.Add(any1)
				Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny()
				any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
				any2.MinOccurs = New Decimal(1)
				any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
				sequence.Items.Add(any2)
				Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute()
				attribute1.Name = "namespace"
				attribute1.FixedValue = ds.Namespace
				type.Attributes.Add(attribute1)
				Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute()
				attribute2.Name = "tableTypeName"
				attribute2.FixedValue = "CategoriesDataTable"
				type.Attributes.Add(attribute2)
				type.Particle = sequence
				Return type
			End Function
		End Class

		<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
		Public Partial Class ProductsRow
			Inherits System.Data.DataRow

			Private tableProducts As ProductsDataTable

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
				MyBase.New(rb)
				Me.tableProducts = (CType(Me.Table, ProductsDataTable))
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Property ProductID() As Integer
				Get
					Try
						Return (CInt(Fix(Me(Me.tableProducts.ProductIDColumn))))
					Catch e As System.InvalidCastException
						Throw New System.Data.StrongTypingException("The value for column 'ProductID' in table 'Products' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As Integer)
					Me(Me.tableProducts.ProductIDColumn) = value
				End Set
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Property ProductName() As String
				Get
					Try
						Return (CStr(Me(Me.tableProducts.ProductNameColumn)))
					Catch e As System.InvalidCastException
						Throw New System.Data.StrongTypingException("The value for column 'ProductName' in table 'Products' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As String)
					Me(Me.tableProducts.ProductNameColumn) = value
				End Set
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Property UnitPrice() As Decimal
				Get
					Try
						Return (CDec(Me(Me.tableProducts.UnitPriceColumn)))
					Catch e As System.InvalidCastException
						Throw New System.Data.StrongTypingException("The value for column 'UnitPrice' in table 'Products' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As Decimal)
					Me(Me.tableProducts.UnitPriceColumn) = value
				End Set
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Property Discontinued() As Boolean
				Get
					Try
						Return (CBool(Me(Me.tableProducts.DiscontinuedColumn)))
					Catch e As System.InvalidCastException
						Throw New System.Data.StrongTypingException("The value for column 'Discontinued' in table 'Products' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As Boolean)
					Me(Me.tableProducts.DiscontinuedColumn) = value
				End Set
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function IsProductIDNull() As Boolean
				Return Me.IsNull(Me.tableProducts.ProductIDColumn)
			End Function

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub SetProductIDNull()
				Me(Me.tableProducts.ProductIDColumn) = System.Convert.DBNull
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function IsProductNameNull() As Boolean
				Return Me.IsNull(Me.tableProducts.ProductNameColumn)
			End Function

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub SetProductNameNull()
				Me(Me.tableProducts.ProductNameColumn) = System.Convert.DBNull
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function IsUnitPriceNull() As Boolean
				Return Me.IsNull(Me.tableProducts.UnitPriceColumn)
			End Function

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub SetUnitPriceNull()
				Me(Me.tableProducts.UnitPriceColumn) = System.Convert.DBNull
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function IsDiscontinuedNull() As Boolean
				Return Me.IsNull(Me.tableProducts.DiscontinuedColumn)
			End Function

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub SetDiscontinuedNull()
				Me(Me.tableProducts.DiscontinuedColumn) = System.Convert.DBNull
			End Sub
		End Class

		<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
		Public Partial Class CategoriesRow
			Inherits System.Data.DataRow

			Private tableCategories As CategoriesDataTable

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
				MyBase.New(rb)
				Me.tableCategories = (CType(Me.Table, CategoriesDataTable))
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Property CategoryName() As String
				Get
					Try
						Return (CStr(Me(Me.tableCategories.CategoryNameColumn)))
					Catch e As System.InvalidCastException
						Throw New System.Data.StrongTypingException("The value for column 'CategoryName' in table 'Categories' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As String)
					Me(Me.tableCategories.CategoryNameColumn) = value
				End Set
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function IsCategoryNameNull() As Boolean
				Return Me.IsNull(Me.tableCategories.CategoryNameColumn)
			End Function

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub SetCategoryNameNull()
				Me(Me.tableCategories.CategoryNameColumn) = System.Convert.DBNull
			End Sub
		End Class

		<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
		Public Class ProductsRowChangeEvent
			Inherits System.EventArgs

			Private eventRow As ProductsRow

			Private eventAction As System.Data.DataRowAction

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub New(ByVal row As ProductsRow, ByVal action As System.Data.DataRowAction)
				Me.eventRow = row
				Me.eventAction = action
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property Row() As ProductsRow
				Get
					Return Me.eventRow
				End Get
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property Action() As System.Data.DataRowAction
				Get
					Return Me.eventAction
				End Get
			End Property
		End Class

		<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
		Public Class CategoriesRowChangeEvent
			Inherits System.EventArgs

			Private eventRow As CategoriesRow

			Private eventAction As System.Data.DataRowAction

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub New(ByVal row As CategoriesRow, ByVal action As System.Data.DataRowAction)
				Me.eventRow = row
				Me.eventAction = action
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property Row() As CategoriesRow
				Get
					Return Me.eventRow
				End Get
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property Action() As System.Data.DataRowAction
				Get
					Return Me.eventAction
				End Get
			End Property
		End Class
	End Class
End Namespace

'TODO: INSTANT VB TODO TASK: There is no equivalent to #pragma directives in VB.NET:
'#pragma warning restore 1591