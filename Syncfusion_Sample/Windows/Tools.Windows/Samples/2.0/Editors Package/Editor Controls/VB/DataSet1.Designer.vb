'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.832
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

'TODO: INSTANT VB TODO TASK: There is no equivalent to #pragma directives in VB.NET:
'#pragma warning disable 1591


Imports Microsoft.VisualBasic
	Imports System
Namespace EditorControls


	<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), Serializable(), System.ComponentModel.DesignerCategoryAttribute("code"), System.ComponentModel.ToolboxItem(True), System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"), System.Xml.Serialization.XmlRootAttribute("DataSet1"), System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")> _
	Partial Public Class DataSet1
		Inherits System.Data.DataSet

		Private tableSales As SalesDataTable

		Private _schemaSerializationMode As System.Data.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema

		<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Public Sub New()
			Me.BeginInit()
			Me.InitClass()
			Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = New System.ComponentModel.CollectionChangeEventHandler(AddressOf Me.SchemaChanged)
			AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
			AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
			Me.EndInit()
		End Sub

		<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
			MyBase.New(info, context, False)
			If (Me.IsBinarySerialized(info, context) = True) Then
				Me.InitVars(False)
				Dim schemaChangedHandler1 As System.ComponentModel.CollectionChangeEventHandler = New System.ComponentModel.CollectionChangeEventHandler(AddressOf Me.SchemaChanged)
				AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
				AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
				Return
			End If
			Dim strSchema As String = (CStr(info.GetValue("XmlSchema", GetType(String))))
			If (Me.DetermineSchemaSerializationMode(info, context) = System.Data.SchemaSerializationMode.IncludeSchema) Then
				Dim ds As System.Data.DataSet = New System.Data.DataSet()
				ds.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
				If (ds.Tables("Sales") IsNot Nothing) Then
					MyBase.Tables.Add(New SalesDataTable(ds.Tables("Sales")))
				End If
				Me.DataSetName = ds.DataSetName
				Me.Prefix = ds.Prefix
				Me.Namespace = ds.Namespace
				Me.Locale = ds.Locale
				Me.CaseSensitive = ds.CaseSensitive
				Me.EnforceConstraints = ds.EnforceConstraints
				Me.Merge(ds, False, System.Data.MissingSchemaAction.Add)
				Me.InitVars()
			Else
				Me.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
			End If
			Me.GetSerializationData(info, context)
			Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = New System.ComponentModel.CollectionChangeEventHandler(AddressOf Me.SchemaChanged)
			AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
			AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
		End Sub

		<System.Diagnostics.DebuggerNonUserCodeAttribute(), System.ComponentModel.Browsable(False), System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)> _
		Public ReadOnly Property Sales() As SalesDataTable
			Get
				Return Me.tableSales
			End Get
		End Property

		<System.Diagnostics.DebuggerNonUserCodeAttribute(), System.ComponentModel.BrowsableAttribute(True), System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)> _
		Public Overrides Property SchemaSerializationMode() As System.Data.SchemaSerializationMode
			Get
				Return Me._schemaSerializationMode
			End Get
			Set(ByVal value As System.Data.SchemaSerializationMode)
				Me._schemaSerializationMode = value
			End Set
		End Property

		<System.Diagnostics.DebuggerNonUserCodeAttribute(), System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)> _
		Public Shadows ReadOnly Property Tables() As System.Data.DataTableCollection
			Get
				Return MyBase.Tables
			End Get
		End Property

		<System.Diagnostics.DebuggerNonUserCodeAttribute(), System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)> _
		Public Shadows ReadOnly Property Relations() As System.Data.DataRelationCollection
			Get
				Return MyBase.Relations
			End Get
		End Property

		<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Protected Overrides Sub InitializeDerivedDataSet()
			Me.BeginInit()
			Me.InitClass()
			Me.EndInit()
		End Sub

		<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Public Overrides Function Clone() As System.Data.DataSet
			Dim cln As DataSet1 = (CType(MyBase.Clone(), DataSet1))
			cln.InitVars()
			cln.SchemaSerializationMode = Me.SchemaSerializationMode
			Return cln
		End Function

		<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Protected Overrides Function ShouldSerializeTables() As Boolean
			Return False
		End Function

		<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Protected Overrides Function ShouldSerializeRelations() As Boolean
			Return False
		End Function

		<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Protected Overrides Sub ReadXmlSerializable(ByVal reader As System.Xml.XmlReader)
			If (Me.DetermineSchemaSerializationMode(reader) = System.Data.SchemaSerializationMode.IncludeSchema) Then
				Me.Reset()
				Dim ds As System.Data.DataSet = New System.Data.DataSet()
				ds.ReadXml(reader)
				If (ds.Tables("Sales") IsNot Nothing) Then
					MyBase.Tables.Add(New SalesDataTable(ds.Tables("Sales")))
				End If
				Me.DataSetName = ds.DataSetName
				Me.Prefix = ds.Prefix
				Me.Namespace = ds.Namespace
				Me.Locale = ds.Locale
				Me.CaseSensitive = ds.CaseSensitive
				Me.EnforceConstraints = ds.EnforceConstraints
				Me.Merge(ds, False, System.Data.MissingSchemaAction.Add)
				Me.InitVars()
			Else
				Me.ReadXml(reader)
				Me.InitVars()
			End If
		End Sub

		<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
			Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream()
			Me.WriteXmlSchema(New System.Xml.XmlTextWriter(stream, Nothing))
			stream.Position = 0
			Return System.Xml.Schema.XmlSchema.Read(New System.Xml.XmlTextReader(stream), Nothing)
		End Function

		<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Friend Sub InitVars()
			Me.InitVars(True)
		End Sub

		<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Friend Sub InitVars(ByVal initTable As Boolean)
			Me.tableSales = (CType(MyBase.Tables("Sales"), SalesDataTable))
			If (initTable = True) Then
				If (Me.tableSales IsNot Nothing) Then
					Me.tableSales.InitVars()
				End If
			End If
		End Sub

		<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Private Sub InitClass()
			Me.DataSetName = "DataSet1"
			Me.Prefix = ""
			Me.Namespace = "http://www.tempuri.org/DataSet1.xsd"
			Me.EnforceConstraints = True
			Me.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
			Me.tableSales = New SalesDataTable()
			MyBase.Tables.Add(Me.tableSales)
		End Sub

		<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Private Function ShouldSerializeSales() As Boolean
			Return False
		End Function

		<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
			If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
				Me.InitVars()
			End If
		End Sub

		<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Public Shared Function GetTypedDataSetSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
			Dim ds As DataSet1 = New DataSet1()
			Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType()
			Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence()
			xs.Add(ds.GetSchemaSerializable())
			Dim any As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny()
			any.Namespace = ds.Namespace
			sequence.Items.Add(any)
			type.Particle = sequence
			Return type
		End Function

		Public Delegate Sub SalesRowChangeEventHandler(ByVal sender As Object, ByVal e As SalesRowChangeEvent)

		<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), System.Serializable(), System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
		Partial Public Class SalesDataTable
			Inherits System.Data.DataTable
			Implements System.Collections.IEnumerable

			Private columnAmount As System.Data.DataColumn

			Private columnID As System.Data.DataColumn

			Private columnPurchaseDate As System.Data.DataColumn

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub New()
				Me.TableName = "Sales"
				Me.BeginInit()
				Me.InitClass()
				Me.EndInit()
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Friend Sub New(ByVal table As System.Data.DataTable)
				Me.TableName = table.TableName
				If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
					Me.CaseSensitive = table.CaseSensitive
				End If
				If (table.Locale.ToString() <> table.DataSet.Locale.ToString()) Then
					Me.Locale = table.Locale
				End If
				If (table.Namespace IsNot table.DataSet.Namespace) Then
					Me.Namespace = table.Namespace
				End If
				Me.Prefix = table.Prefix
				Me.MinimumCapacity = table.MinimumCapacity
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
				MyBase.New(info, context)
				Me.InitVars()
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property AmountColumn() As System.Data.DataColumn
				Get
					Return Me.columnAmount
				End Get
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property IDColumn() As System.Data.DataColumn
				Get
					Return Me.columnID
				End Get
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property PurchaseDateColumn() As System.Data.DataColumn
				Get
					Return Me.columnPurchaseDate
				End Get
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute(), System.ComponentModel.Browsable(False)> _
			Public ReadOnly Property Count() As Integer
				Get
					Return Me.Rows.Count
				End Get
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Default Public ReadOnly Property Item(ByVal index As Integer) As SalesRow
				Get
					Return (CType(Me.Rows(index), SalesRow))
				End Get
			End Property

			Public Event SalesRowChanging As SalesRowChangeEventHandler

			Public Event SalesRowChanged As SalesRowChangeEventHandler

			Public Event SalesRowDeleting As SalesRowChangeEventHandler

			Public Event SalesRowDeleted As SalesRowChangeEventHandler

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub AddSalesRow(ByVal row As SalesRow)
				Me.Rows.Add(row)
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function AddSalesRow(ByVal Amount As Decimal, ByVal PurchaseDate As System.DateTime) As SalesRow
				Dim rowSalesRow As SalesRow = (CType(Me.NewRow(), SalesRow))
				rowSalesRow.ItemArray = New Object() { Amount, Nothing, PurchaseDate}
				Me.Rows.Add(rowSalesRow)
				Return rowSalesRow
			End Function

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function FindByID(ByVal ID As Integer) As SalesRow
				Return (CType(Me.Rows.Find(New Object() { ID}), SalesRow))
			End Function

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
				Return Me.Rows.GetEnumerator()
			End Function

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Overrides Function Clone() As System.Data.DataTable
				Dim cln As SalesDataTable = (CType(MyBase.Clone(), SalesDataTable))
				cln.InitVars()
				Return cln
			End Function

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Protected Overrides Function CreateInstance() As System.Data.DataTable
				Return New SalesDataTable()
			End Function

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Friend Sub InitVars()
				Me.columnAmount = MyBase.Columns("Amount")
				Me.columnID = MyBase.Columns("ID")
				Me.columnPurchaseDate = MyBase.Columns("PurchaseDate")
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Private Sub InitClass()
				Me.columnAmount = New System.Data.DataColumn("Amount", GetType(Decimal), Nothing, System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnAmount)
				Me.columnID = New System.Data.DataColumn("ID", GetType(Integer), Nothing, System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnID)
				Me.columnPurchaseDate = New System.Data.DataColumn("PurchaseDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnPurchaseDate)
				Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() { Me.columnID}, True))
				Me.columnID.AutoIncrement = True
				Me.columnID.AllowDBNull = False
				Me.columnID.Unique = True
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function NewSalesRow() As SalesRow
				Return (CType(Me.NewRow(), SalesRow))
			End Function

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
				Return New SalesRow(builder)
			End Function

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Protected Overrides Function GetRowType() As System.Type
				Return GetType(SalesRow)
			End Function

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
				MyBase.OnRowChanged(e)
				If (Me.SalesRowChangedEvent IsNot Nothing) Then
					RaiseEvent SalesRowChanged(Me, New SalesRowChangeEvent((CType(e.Row, SalesRow)), e.Action))
				End If
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
				MyBase.OnRowChanging(e)
				If (Me.SalesRowChangingEvent IsNot Nothing) Then
					RaiseEvent SalesRowChanging(Me, New SalesRowChangeEvent((CType(e.Row, SalesRow)), e.Action))
				End If
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
				MyBase.OnRowDeleted(e)
				If (Me.SalesRowDeletedEvent IsNot Nothing) Then
					RaiseEvent SalesRowDeleted(Me, New SalesRowChangeEvent((CType(e.Row, SalesRow)), e.Action))
				End If
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
				MyBase.OnRowDeleting(e)
				If (Me.SalesRowDeletingEvent IsNot Nothing) Then
					RaiseEvent SalesRowDeleting(Me, New SalesRowChangeEvent((CType(e.Row, SalesRow)), e.Action))
				End If
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub RemoveSalesRow(ByVal row As SalesRow)
				Me.Rows.Remove(row)
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
				Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType()
				Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence()
				Dim ds As DataSet1 = New DataSet1()
				xs.Add(ds.GetSchemaSerializable())
				Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny()
				any1.Namespace = "http://www.w3.org/2001/XMLSchema"
				any1.MinOccurs = New Decimal(0)
				any1.MaxOccurs = Decimal.MaxValue
				any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
				sequence.Items.Add(any1)
				Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny()
				any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
				any2.MinOccurs = New Decimal(1)
				any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
				sequence.Items.Add(any2)
				Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute()
				attribute1.Name = "namespace"
				attribute1.FixedValue = ds.Namespace
				type.Attributes.Add(attribute1)
				Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute()
				attribute2.Name = "tableTypeName"
				attribute2.FixedValue = "SalesDataTable"
				type.Attributes.Add(attribute2)
				type.Particle = sequence
				Return type
			End Function
		End Class

		<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
		Partial Public Class SalesRow
			Inherits System.Data.DataRow

			Private tableSales As SalesDataTable

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
				MyBase.New(rb)
				Me.tableSales = (CType(Me.Table, SalesDataTable))
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Property Amount() As Decimal
				Get
					Try
						Return (CDec(Me(Me.tableSales.AmountColumn)))
					Catch e As System.InvalidCastException
						Throw New System.Data.StrongTypingException("The value for column 'Amount' in table 'Sales' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As Decimal)
					Me(Me.tableSales.AmountColumn) = value
				End Set
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Property ID() As Integer
				Get
					Return (CInt(Fix(Me(Me.tableSales.IDColumn))))
				End Get
				Set(ByVal value As Integer)
					Me(Me.tableSales.IDColumn) = value
				End Set
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Property PurchaseDate() As System.DateTime
				Get
					Try
						Return (CDate(Me(Me.tableSales.PurchaseDateColumn)))
					Catch e As System.InvalidCastException
						Throw New System.Data.StrongTypingException("The value for column 'PurchaseDate' in table 'Sales' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As System.DateTime)
					Me(Me.tableSales.PurchaseDateColumn) = value
				End Set
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function IsAmountNull() As Boolean
				Return Me.IsNull(Me.tableSales.AmountColumn)
			End Function

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub SetAmountNull()
				Me(Me.tableSales.AmountColumn) = System.Convert.DBNull
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function IsPurchaseDateNull() As Boolean
				Return Me.IsNull(Me.tableSales.PurchaseDateColumn)
			End Function

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub SetPurchaseDateNull()
				Me(Me.tableSales.PurchaseDateColumn) = System.Convert.DBNull
			End Sub
		End Class

		<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
		Public Class SalesRowChangeEvent
			Inherits System.EventArgs

			Private eventRow As SalesRow

			Private eventAction As System.Data.DataRowAction

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub New(ByVal row As SalesRow, ByVal action As System.Data.DataRowAction)
				Me.eventRow = row
				Me.eventAction = action
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property Row() As SalesRow
				Get
					Return Me.eventRow
				End Get
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property Action() As System.Data.DataRowAction
				Get
					Return Me.eventAction
				End Get
			End Property
		End Class
	End Class
End Namespace

'TODO: INSTANT VB TODO TASK: There is no equivalent to #pragma directives in VB.NET:
'#pragma warning restore 1591