#Region "Copyright Syncfusion Inc. 2001 - 2007"
'
'  Copyright Syncfusion Inc. 2001 - 2007. All rights reserved.
'
'  Use of this code is subject to the terms of our license.
'  A copy of the current license can be obtained at any time by e-mailing
'  licensing@syncfusion.com. Re-distribution in any form is strictly
'  prohibited. Any infringement will be prosecuted under applicable laws. 
'
#End Region


Imports Microsoft.VisualBasic
Imports System
Imports System.Drawing
Imports System.Drawing.Imaging
Imports System.Collections
Imports System.ComponentModel
Imports System.Windows.Forms
Imports System.Data
Imports Syncfusion.Pdf
Imports Syncfusion.Pdf.Graphics
Imports Syncfusion.Pdf.Tables
Imports Syncfusion.Pdf.Grid
Imports Syncfusion.Pdf.Interactive

Namespace EssentialPDFSamples
    ''' <summary>
    ''' Summary description for Form1.
    ''' </summary>
    Public Class Form1 : Inherits System.Windows.Forms.Form
#Region "Private Members"
        Private WithEvents button1 As System.Windows.Forms.Button
        Private label1 As System.Windows.Forms.Label
        Private WithEvents PictureBox2 As System.Windows.Forms.PictureBox

        ''' <summary>
        ''' Required designer variable.
        ''' </summary>
        Private components As System.ComponentModel.Container = Nothing
#End Region

#Region "Constructor"
        Public Sub New()
            '
            ' Required for Windows Form Designer support
            '
            InitializeComponent()
            '
            ' TODO: Add any constructor code after InitializeComponent call
            ''
        End Sub

        ''' <summary>
        ''' Clean up any resources being used.
        ''' </summary>
        Protected Overloads Overrides Sub Dispose(ByVal disposing As Boolean)
            If disposing Then
                If Not components Is Nothing Then
                    components.Dispose()
                End If
            End If
            MyBase.Dispose(disposing)
        End Sub

#Region "Windows Form Designer generated code"
        ''' <summary>
        ''' Required method for Designer support - do not modify
        ''' the contents of this method with the code editor.
        ''' </summary>
        Private Sub InitializeComponent()
            Dim resources As System.ComponentModel.ComponentResourceManager = New System.ComponentModel.ComponentResourceManager(GetType(Form1))
            Me.button1 = New System.Windows.Forms.Button
            Me.label1 = New System.Windows.Forms.Label
            Me.PictureBox2 = New System.Windows.Forms.PictureBox
            CType(Me.PictureBox2, System.ComponentModel.ISupportInitialize).BeginInit()
            Me.SuspendLayout()
            '
            'button1
            '
            Me.button1.Anchor = CType((System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Right), System.Windows.Forms.AnchorStyles)
            Me.button1.BackColor = System.Drawing.Color.Transparent
            Me.button1.FlatAppearance.BorderColor = System.Drawing.Color.FromArgb(CType(CType(255, Byte), Integer), CType(CType(192, Byte), Integer), CType(CType(128, Byte), Integer))
            Me.button1.FlatAppearance.MouseDownBackColor = System.Drawing.Color.FromArgb(CType(CType(255, Byte), Integer), CType(CType(224, Byte), Integer), CType(CType(192, Byte), Integer))
            Me.button1.FlatAppearance.MouseOverBackColor = System.Drawing.Color.FromArgb(CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer), CType(CType(192, Byte), Integer))
            Me.button1.Image = CType(resources.GetObject("button1.Image"), System.Drawing.Image)
            Me.button1.ImageAlign = System.Drawing.ContentAlignment.MiddleRight
            Me.button1.Location = New System.Drawing.Point(288, 162)
            Me.button1.Name = "button1"
            Me.button1.Size = New System.Drawing.Size(75, 23)
            Me.button1.TabIndex = 0
            Me.button1.Text = "PDF"
            Me.button1.UseVisualStyleBackColor = False
            '
            'label1
            '
            Me.label1.Anchor = CType(((System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Left) _
                        Or System.Windows.Forms.AnchorStyles.Right), System.Windows.Forms.AnchorStyles)
            Me.label1.Font = New System.Drawing.Font("Verdana", 8.25!, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, CType(0, Byte))
            Me.label1.ForeColor = System.Drawing.Color.FromArgb(CType(CType(0, Byte), Integer), CType(CType(0, Byte), Integer), CType(CType(64, Byte), Integer))
            Me.label1.Location = New System.Drawing.Point(0, 96)
            Me.label1.Name = "label1"
            Me.label1.Size = New System.Drawing.Size(377, 67)
            Me.label1.TabIndex = 1
            Me.label1.Text = "Click the button to view an PDF document generated by Essential PDF. Please note " & _
                "that Adobe Reader or its equivalent is required to view the resultant document."
            '
            'PictureBox2
            '
            Me.PictureBox2.Dock = System.Windows.Forms.DockStyle.Top
            Me.PictureBox2.Image = CType(resources.GetObject("PictureBox2.Image"), System.Drawing.Image)
            Me.PictureBox2.Location = New System.Drawing.Point(0, 0)
            Me.PictureBox2.Name = "PictureBox2"
            Me.PictureBox2.Size = New System.Drawing.Size(375, 89)
            Me.PictureBox2.TabIndex = 25
            Me.PictureBox2.TabStop = False
            '
            'Form1
            '
            Me.AutoScaleBaseSize = New System.Drawing.Size(5, 13)
            Me.BackColor = System.Drawing.Color.White
            Me.ClientSize = New System.Drawing.Size(375, 204)
            Me.Controls.Add(Me.PictureBox2)
            Me.Controls.Add(Me.button1)
            Me.Controls.Add(Me.label1)
            Me.FormBorderStyle = System.Windows.Forms.FormBorderStyle.FixedSingle
            Me.Icon = CType(resources.GetObject("$this.Icon"), System.Drawing.Icon)
            Me.MaximizeBox = False
            Me.MinimizeBox = False
            Me.Name = "Form1"
            Me.StartPosition = System.Windows.Forms.FormStartPosition.CenterScreen
            Me.Text = "Table Features"
            CType(Me.PictureBox2, System.ComponentModel.ISupportInitialize).EndInit()
            Me.ResumeLayout(False)

        End Sub
#End Region

        ''' <summary>
        ''' The main entry point for the application.
        ''' </summary>
        <STAThread()> _
        Shared Sub Main()
            Application.EnableVisualStyles()
            Application.Run(New Form1())
        End Sub
#End Region
#Region "Fields"
        Private borderPen As PdfPen
        Private transparentPen As PdfPen
        Private cellSpacing As Single = 7.0F
        'INSTANT VB NOTE: The variable margin was renamed since Visual Basic does not allow class members with the same name:
        Private margin_Renamed As Single = 40.0F
        Private smallFont As PdfFont
#End Region
#Region "Events"
        Private Sub button1_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles button1.Click
            '			#Region "Field Definitions"
            Dim font As New PdfStandardFont(PdfFontFamily.TimesRoman, 8.0F)
            smallFont = New PdfStandardFont(font, 5.0F)
            Dim bigFont As PdfFont = New PdfStandardFont(font, 16.0F)
            Dim orangeBrush As PdfBrush = New PdfSolidBrush(New PdfColor(247, 148, 29))
            Dim grayBrush As PdfBrush = New PdfSolidBrush(New PdfColor(170, 171, 171))

            borderPen = New PdfPen(New PdfColor(Color.FromArgb(Color.DarkGray.A, Color.DarkGray.R, Color.DarkGray.G, Color.DarkGray.B)), 0.3F)
            borderPen.LineCap = PdfLineCap.Square
            transparentPen = New PdfPen(New PdfColor(Color.FromArgb(Color.Transparent.A, Color.Transparent.R, Color.Transparent.G, Color.Transparent.B)), 0.3F)
            transparentPen.LineCap = PdfLineCap.Square
            '			#End Region

            Dim document As New PdfDocument()
            document.PageSettings.Margins.All = 0

            '			#Region "Footer"
            Dim footer As New PdfPageTemplateElement(New RectangleF(New PointF(0, document.PageSettings.Height - 40), New SizeF(document.PageSettings.Width, 40)))
            footer.Graphics.DrawRectangle(New PdfSolidBrush(New PdfColor(77, 77, 77)), footer.Bounds)
            footer.Graphics.DrawString("http://www.syncfusion.com", font, grayBrush, New PointF(footer.Width - (footer.Width \ 4), 15))
            footer.Graphics.DrawString("Copyright © 2001 - 2012 Syncfusion Inc.", font, grayBrush, New PointF(0, 15))
            document.Template.Bottom = footer
            '			#End Region

            Dim page As PdfPage = document.Pages.Add()

            page.Graphics.DrawRectangle(orangeBrush, New RectangleF(PointF.Empty, New SizeF(page.Graphics.ClientSize.Width, margin_Renamed)))
            page.Graphics.DrawString("Essential Studio Reporting Edition", bigFont, PdfBrushes.White, New PointF(10, 10))

            '			#Region "PdfLightTable"
            Dim pdfLightTable As New PdfLightTable()
            pdfLightTable.DataSource = GetProductsDataSet()
            pdfLightTable.Style.DefaultStyle.BorderPen = transparentPen

            For i As Integer = 0 To pdfLightTable.Columns.Count - 1
                If i Mod 2 = 0 Then
                    pdfLightTable.Columns(i).Width = 1.2F
                End If
            Next i

            pdfLightTable.Style.CellSpacing = cellSpacing
            AddHandler pdfLightTable.BeginRowLayout, AddressOf pdfLightTable_BeginRowLayout
            AddHandler pdfLightTable.BeginCellLayout, AddressOf pdfLightTable_BeginCellLayout
            pdfLightTable.Style.DefaultStyle.Font = font
            Dim result As PdfLayoutResult = pdfLightTable.Draw(page, New RectangleF(New PointF(margin_Renamed, 70), New SizeF(page.Graphics.ClientSize.Width - (2 * margin_Renamed), page.Graphics.ClientSize.Height - margin_Renamed)))

            '			#End Region

            page.Graphics.DrawString("What You Get with Syncfusion", bigFont, orangeBrush, New PointF(margin_Renamed, result.Bounds.Bottom + 50))

            '			#Region "PdfGrid"
            Dim pdfGrid As New PdfGrid()
            pdfGrid.DataSource = GetReportsDataSet()
            pdfGrid.Headers.Clear()
            pdfGrid.Columns(0).Width = 80
            pdfGrid.Style.Font = font
            pdfGrid.Style.CellSpacing = 15.0F

            For i As Integer = 0 To pdfGrid.Rows.Count - 1
                If i Mod 2 = 0 Then
                    Dim cell As PdfGridCell = pdfGrid.Rows(i).Cells(0)
                    cell.RowSpan = 2

                    cell.Style.BackgroundImage = New PdfBitmap(GetFullTemplatePath(String.Format("{0}.jpg", cell.Value.ToString().ToLower()), True))
                    cell.Value = ""

                    cell = pdfGrid.Rows(i).Cells(1)
                    cell.Style.Font = bigFont
                End If
                For j As Integer = 0 To pdfGrid.Columns.Count - 1
                    pdfGrid.Rows(i).Cells(j).Style.Borders.All = transparentPen
                Next j
            Next i

            Dim gridLayoutFormat As New PdfGridLayoutFormat()
            gridLayoutFormat.Layout = PdfLayoutType.Paginate

            pdfGrid.Draw(page, New RectangleF(New PointF(margin_Renamed, result.Bounds.Bottom + 75), New SizeF(page.Graphics.ClientSize.Width - (2 * margin_Renamed), page.Graphics.ClientSize.Height - margin_Renamed)), gridLayoutFormat)

            '			#End Region
            ' Save and close the document.
            document.Save("Sample.pdf")
            document.Close(True)

            'Message box confirmation to view the created PDF document.
            If MessageBox.Show("Do you want to view the PDF file?", "PDF File Created", MessageBoxButtons.YesNo, MessageBoxIcon.Information) = DialogResult.Yes Then
                'Launching the PDF file using the default Application.[Acrobat Reader]
                System.Diagnostics.Process.Start("Sample.pdf")
                Me.Close()
            Else
                ' Exit
                Me.Close()
            End If
        End Sub
        ''' <summary>
        ''' Returns dataset.
        ''' </summary>
        Private Function GetProductsDataSet() As DataSet
            Dim dataSet As New DataSet()
            dataSet.ReadXml(GetFullTemplatePath("Products.xml", False))
            Return dataSet
        End Function
        ''' <summary>
        ''' Returns dataset.
        ''' </summary>
        Private Function GetReportsDataSet() As DataSet
            Dim dataSet As New DataSet()
            dataSet.ReadXml(GetFullTemplatePath("Report.xml", False))
            Return dataSet
        End Function
        ''' <summary>
        ''' Draws ellipse inside the cell using cell bounds.
        ''' </summary>
        Private Sub table_StartCellLayout(ByVal sender As Object, ByVal args As BeginCellLayoutEventArgs)
            Dim rowIndex As Integer = args.RowIndex
            Dim cellIndex As Integer = args.CellIndex

            If rowIndex < 30 AndAlso rowIndex >= 0 AndAlso (rowIndex And 1) = 0 Then
                Dim g As PdfGraphics = args.Graphics
                g.DrawEllipse(PdfBrushes.LightBlue, args.Bounds)
            End If
        End Sub
#Region "PdfLightTable Events"

        Private Sub pdfLightTable_BeginRowLayout(ByVal sender As Object, ByVal args As BeginRowLayoutEventArgs)
            If args.RowIndex Mod 2 = 0 Then
                args.MinimalHeight = 20
            Else
                args.MinimalHeight = 30
            End If
        End Sub

        Private Sub pdfLightTable_BeginCellLayout(ByVal sender As Object, ByVal args As BeginCellLayoutEventArgs)
            If args.RowIndex > -1 AndAlso args.CellIndex > -1 Then
                Dim x As Single = args.Bounds.X
                Dim y As Single = args.Bounds.Y
                Dim width As Single = args.Bounds.Right
                Dim height As Single = args.Bounds.Bottom

                If args.Value = "dummy" Then
                    args.Skip = True
                    Return
                End If

                If args.CellIndex Mod 2 = 0 AndAlso (Not String.IsNullOrEmpty(args.Value)) Then
                    args.Skip = True
                    Dim img As New PdfBitmap(GetFullTemplatePath(String.Format("{0}.jpg", args.Value.ToString().ToLower()), True))
                    Dim rect As RectangleF = args.Bounds
                    args.Graphics.DrawImage(img, New RectangleF(rect.X + 2, rect.Y + 2, rect.Width - 2, rect.Height - 2))
                End If

                If args.Value.Contains("http") Then
                    args.Skip = True

                    ' Create the Text Web Link
                    Dim textLink As New PdfTextWebLink()
                    textLink.Url = args.Value
                    textLink.Text = "Know more..."
                    textLink.Brush = PdfBrushes.Black
                    textLink.Font = smallFont
                    textLink.DrawTextWebLink(args.Graphics, New PointF(args.Bounds.X + 2 * args.Bounds.Width \ 3, args.Bounds.Y))
                End If

                '				#Region "Draw manual borders"
                If args.RowIndex Mod 3 = 0 Then 'top
                    If args.CellIndex Mod 2 = 0 Then
                        width += cellSpacing
                    End If
                    args.Graphics.DrawLine(borderPen, New PointF(x, y), New PointF(width, y))
                ElseIf args.RowIndex Mod 3 = 2 Then 'bottom
                    If args.CellIndex Mod 2 = 0 Then
                        width += cellSpacing
                    End If
                    args.Graphics.DrawLine(borderPen, New PointF(x, height), New PointF(width, height))
                End If

                If args.CellIndex Mod 2 = 0 Then 'left
                    If args.RowIndex Mod 3 <> 2 Then
                        height += cellSpacing
                    End If
                    args.Graphics.DrawLine(borderPen, New PointF(x, y), New PointF(x, height))
                ElseIf args.CellIndex Mod 2 <> 0 Then 'right
                    If args.RowIndex Mod 3 <> 2 Then
                        height += cellSpacing
                    End If
                    args.Graphics.DrawLine(borderPen, New PointF(width, y), New PointF(width, height))
                End If
                '				#End Region
            End If
        End Sub

#End Region


#End Region

#Region "Helpher Methods"
        ''' <summary>
        ''' Gets the full path of the PDF template or image.
        ''' </summary>
        ''' <param name="fileName">Name of the file</param>
        ''' <param name="image">True if image</param>
        ''' <returns>Path of the file</returns>
        Private Function GetFullTemplatePath(ByVal fileName As String, ByVal image As Boolean) As String
            Dim fullPath As String = "..\..\..\..\..\..\..\..\..\Common\"
            Dim folder As String
            If image Then
                folder = "Images"
            Else
                folder = "Data"
            End If

            Return String.Format("{0}{1}\PDF\{2}", fullPath, folder, fileName)
        End Function

#End Region
    End Class
End Namespace
