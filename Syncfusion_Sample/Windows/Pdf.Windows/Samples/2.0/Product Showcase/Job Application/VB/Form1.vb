#Region "Copyright Syncfusion Inc. 2001 - 2005"
'
'  Copyright Syncfusion Inc. 2001 - 2005. All rights reserved.
'
'  Use of this code is subject to the terms of our license.
'  A copy of the current license can be obtained at any time by e-mailing
'  licensing@syncfusion.com. Re-distribution in any form is strictly
'  prohibited. Any infringement will be prosecuted under applicable laws. 
'
#End Region


Imports Microsoft.VisualBasic
Imports System
Imports System.Drawing
Imports System.Drawing.Imaging
Imports System.Collections
Imports System.ComponentModel
Imports System.Windows.Forms
Imports System.Data
Imports Syncfusion.Pdf
Imports Syncfusion.Pdf.Interactive
Imports Syncfusion.Pdf.Graphics
Imports System.Drawing.Text

Namespace EssentialPDFSamples
    ''' <summary>
    ''' Summary description for Form1.
    ''' </summary>
    Public Class Form1 : Inherits System.Windows.Forms.Form
#Region "Private Members"
        Private label1 As Label
        Private WithEvents button1 As Button
        Private document As PdfDocument
        Private f As Font
        Private pdfFont As PdfFont
        Private solidBrush As PdfBrush
        Private img As PdfImage
        Private rectbounds As RectangleF
        Private pageSize As SizeF
        Private page As PdfPage
        Private chb As PdfCheckBoxField
        Private comboBox As PdfComboBoxField
        Private x As Single
        Private WithEvents PictureBox2 As System.Windows.Forms.PictureBox
#End Region

#Region "Constructor and Load"
        ''' <summary>
        ''' Required designer variable.
        ''' </summary>
        Private components As System.ComponentModel.Container = Nothing

        Public Sub New()
            '
            ' Required for Windows Form Designer support
            '
            InitializeComponent()
            Me.FormBorderStyle = FormBorderStyle.FixedSingle
            Me.MaximizeBox = False
            Me.MinimizeBox = False
            Me.StartPosition = FormStartPosition.CenterScreen
            x = 25
            '
            ' TODO: Add any constructor code after InitializeComponent call
            '
        End Sub

        ''' <summary>
        ''' Clean up any resources being used.
        ''' </summary>
        Protected Overloads Overrides Sub Dispose(ByVal disposing As Boolean)
            If disposing Then
                If Not components Is Nothing Then
                    components.Dispose()
                End If
            End If
            MyBase.Dispose(disposing)
        End Sub

#Region "Windows Form Designer generated code"
        ''' <summary>
        ''' Required method for Designer support - do not modify
        ''' the contents of this method with the code editor.
        ''' </summary>
        Private Sub InitializeComponent()
            Dim resources As System.ComponentModel.ComponentResourceManager = New System.ComponentModel.ComponentResourceManager(GetType(Form1))
            Me.label1 = New System.Windows.Forms.Label
            Me.button1 = New System.Windows.Forms.Button
            Me.PictureBox2 = New System.Windows.Forms.PictureBox
            CType(Me.PictureBox2, System.ComponentModel.ISupportInitialize).BeginInit()
            Me.SuspendLayout()
            '
            'label1
            '
            Me.label1.Font = New System.Drawing.Font("Verdana", 8.25!, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, CType(0, Byte))
            Me.label1.ForeColor = System.Drawing.Color.FromArgb(CType(CType(0, Byte), Integer), CType(CType(0, Byte), Integer), CType(CType(64, Byte), Integer))
            Me.label1.Location = New System.Drawing.Point(0, 89)
            Me.label1.Name = "label1"
            Me.label1.Size = New System.Drawing.Size(374, 65)
            Me.label1.TabIndex = 71
            Me.label1.Text = "Click the button to view an PDF document generated by Essential PDF. Please note " & _
                "that Adobe Reader or its equivalent is required to view the resultant document."
            '
            'button1
            '
            Me.button1.Anchor = CType((System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Right), System.Windows.Forms.AnchorStyles)
            Me.button1.BackColor = System.Drawing.Color.Transparent
            Me.button1.FlatAppearance.BorderColor = System.Drawing.Color.FromArgb(CType(CType(255, Byte), Integer), CType(CType(192, Byte), Integer), CType(CType(128, Byte), Integer))
            Me.button1.FlatAppearance.MouseDownBackColor = System.Drawing.Color.FromArgb(CType(CType(255, Byte), Integer), CType(CType(224, Byte), Integer), CType(CType(192, Byte), Integer))
            Me.button1.FlatAppearance.MouseOverBackColor = System.Drawing.Color.FromArgb(CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer), CType(CType(192, Byte), Integer))
            Me.button1.Image = CType(resources.GetObject("button1.Image"), System.Drawing.Image)
            Me.button1.ImageAlign = System.Drawing.ContentAlignment.MiddleRight
            Me.button1.Location = New System.Drawing.Point(289, 159)
            Me.button1.Name = "button1"
            Me.button1.Size = New System.Drawing.Size(75, 24)
            Me.button1.TabIndex = 74
            Me.button1.Text = "PDF"
            Me.button1.UseVisualStyleBackColor = False
            '
            'PictureBox2
            '
            Me.PictureBox2.Dock = System.Windows.Forms.DockStyle.Top
            Me.PictureBox2.Image = CType(resources.GetObject("PictureBox2.Image"), System.Drawing.Image)
            Me.PictureBox2.Location = New System.Drawing.Point(0, 0)
            Me.PictureBox2.Name = "PictureBox2"
            Me.PictureBox2.Size = New System.Drawing.Size(374, 92)
            Me.PictureBox2.TabIndex = 75
            Me.PictureBox2.TabStop = False
            '
            'Form1
            '
            Me.AutoScaleBaseSize = New System.Drawing.Size(5, 13)
            Me.BackColor = System.Drawing.Color.White
            Me.ClientSize = New System.Drawing.Size(374, 200)
            Me.Controls.Add(Me.label1)
            Me.Controls.Add(Me.PictureBox2)
            Me.Controls.Add(Me.button1)
            Me.FormBorderStyle = System.Windows.Forms.FormBorderStyle.FixedSingle
            Me.Icon = CType(resources.GetObject("$this.Icon"), System.Drawing.Icon)
            Me.MaximizeBox = False
            Me.MinimizeBox = False
            Me.Name = "Form1"
            Me.Text = "Job Application"
            CType(Me.PictureBox2, System.ComponentModel.ISupportInitialize).EndInit()
            Me.ResumeLayout(False)

        End Sub
#End Region

        ''' <summary>
        ''' The main entry point for the application.
        ''' </summary>
        <STAThread()> _
        Shared Sub Main()
            Application.EnableVisualStyles()
            Application.Run(New Form1())
        End Sub
#End Region

#Region "Events"
        Private Sub button1_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles button1.Click
            Dim imagePath As String = GetFullTemplatePath("Careers.png", True)

            ' Create a new instance of PdfDocument class.
            document = New PdfDocument()

            ' Set viewer preferences for the reader 
            document.ViewerPreferences.HideMenubar = True
            document.ViewerPreferences.HideWindowUI = True
            document.ViewerPreferences.HideToolbar = True
            document.ViewerPreferences.FitWindow = True

            document.ViewerPreferences.PageLayout = PdfPageLayout.SinglePage
            document.PageSettings.Orientation = PdfPageOrientation.Portrait
            document.PageSettings.Margins.All = 0

            ' Set coordinates to draw form fields
            rectbounds = New RectangleF(180, 65, 156, 15)
            img = New PdfBitmap(imagePath)

            ' Set page size
            pageSize = New SizeF(500, 310)
            document.PageSettings.Width = pageSize.Width
            document.PageSettings.Height = pageSize.Height

            ' Initialize font and brush
            f = New Font("Calibri", 12.0F, FontStyle.Bold)
            pdfFont = New PdfTrueTypeFont(f)
            solidBrush = New PdfSolidBrush(New PdfColor(124, 143, 166))

            CreateFirstPage()
            CreateSecondPage()
            CreateThirdPage()

            ' Save the document to disk and close it.
            document.Save("Sample.pdf")
            document.Close(True)

            'Message box confirmation to view the created PDF document.
            If MessageBox.Show("Do you want to view the PDF file?", "PDF File Created", MessageBoxButtons.YesNo, MessageBoxIcon.Information) = DialogResult.Yes Then
                'Launching the PDF file using the default Application.[Acrobat Reader]
                System.Diagnostics.Process.Start("Sample.pdf")
                Me.Close()
            Else
                ' Exit
                Me.Close()
            End If
        End Sub
#End Region

#Region "Helpher Methods"
        ''' Gets the full path of the PDF template or image.
        ''' </summary>
        ''' <param name="fileName">Name of the file</param>
        ''' <param name="image">True if image</param>
        ''' <returns>Path of the file</returns>
        Private Function GetFullTemplatePath(ByVal fileName As String, ByVal image As Boolean) As String
            Dim fullPath As String = "..\..\..\..\..\..\..\..\..\Common\"
            Dim folder As String
            If image Then
                folder = "Images"
            Else
                folder = "Data"
            End If

            Return String.Format("{0}{1}\PDF\{2}", fullPath, folder, fileName)
        End Function

        ''' <summary>
        ''' Creates textbox and adds it in the form
        ''' </summary>
        ''' <param name="page"></param>
        ''' <param name="text"></param>
        ''' <param name="tooltip"></param>
        ''' <param name="f"></param>
        ''' <param name="rectbounds"></param>
        Protected Sub CreateTextBox(ByVal page As PdfPage, ByVal text As String, ByVal tooltip As String, ByVal f As Font, ByVal rectbounds As RectangleF)
            ' Create a Text box field.
            Dim textBoxField As New PdfTextBoxField(page, text)

            Dim font As New PdfTrueTypeFont(f)

            'Set properties to the textbox.
            textBoxField.Font = font
            textBoxField.BorderColor = New PdfColor(Color.Gray)
            textBoxField.BorderStyle = PdfBorderStyle.Beveled
            textBoxField.Bounds = rectbounds
            textBoxField.ToolTip = tooltip

            document.Form.Fields.Add(textBoxField)

        End Sub

        ''' <summary>
        ''' Creates third page in the document
        ''' </summary>
        Private Sub CreateThirdPage()
            ' Access third page.
            page = document.Pages(2)
            page.Graphics.DrawImage(img, 0, 0, pageSize.Width, pageSize.Height)

            f = New Font("Calibri", 12.0F, FontStyle.Bold)
            pdfFont = New PdfTrueTypeFont(f)

            page.Graphics.DrawString("Thank You", pdfFont, New PdfSolidBrush(New PdfColor(213, 123, 19)), x, 80)

            f = New Font("Calibri", 10.0F, FontStyle.Regular)
            pdfFont = New PdfTrueTypeFont(f)

            page.Graphics.DrawString("Thanks for taking the time to complete this form." & Constants.vbLf & "We will be in contact with you shortly.", pdfFont, solidBrush, x, 110)

            ' Send email during button click.
            Dim submitButton1 As New PdfButtonField(page, "submitButton1")
            submitButton1.Bounds = New RectangleF(x, 160, 100, 20)
            submitButton1.Font = pdfFont
            submitButton1.Text = "Apply"
            submitButton1.BorderStyle = PdfBorderStyle.Beveled
            submitButton1.BackColor = New PdfColor(181, 191, 203)

            ' Create a javascript action.
            Dim javaAction As New PdfJavaScriptAction("address = app.response(""Enter an e-mail address."",""SEND E-MAIL"","""");" & "if (address){ cmdLine = ""mailto:"" + address;" & "this.submitForm(cmdLine,true,false,""Remarks"");}")

            submitButton1.Actions.MouseUp = javaAction

            ' Add button to the form.
            document.Form.Fields.Add(submitButton1)
            document.Form.SetDefaultAppearance(False)
        End Sub

        ''' <summary>
        ''' Creates second page in the document.
        ''' </summary>
        Private Sub CreateSecondPage()
            'Access second page.
            page = document.Pages(1)

            page.Graphics.DrawImage(img, New PointF(0, 0), New SizeF(pageSize.Width, pageSize.Height))

            page.Graphics.DrawString("Current position", New PdfStandardFont(PdfFontFamily.TimesRoman, 10, PdfFontStyle.Bold), New PdfSolidBrush(New PdfColor(213, 123, 19)), x, 40)

            rectbounds.X = x
            rectbounds.Y = 65

            ' Add fields in second page.
            ' Add check box for employment status.
            CreateCheckBox(page, "Cemp", "Employment Status")
            page.Graphics.DrawString("I am not currently employed", pdfFont, solidBrush, rectbounds.X, rectbounds.Y)
            rectbounds.X += 90

            page.Graphics.DrawString("Job Title", pdfFont, solidBrush, x, 85)

            rectbounds.X = 175
            rectbounds.Y = 85
            rectbounds.Width = 150
            rectbounds.Height = 16

            'Create text box for Job title.
            CreateTextBox(page, "Jtitle", "Job title", f, rectbounds)

            page.Graphics.DrawString("Employer:", pdfFont, solidBrush, x, 103)
            rectbounds.Y = rectbounds.Y + 18
            'Create text box for Employer.
            CreateTextBox(page, "Employer", "Employer", f, rectbounds)

            page.Graphics.DrawString("Reason for leaving:", pdfFont, solidBrush, x, 123)
            rectbounds.Y = rectbounds.Y + 18
            ' Create text box for Reason.
            CreateTextBox(page, "Reason", "Reason for leaving", f, rectbounds)

            page.Graphics.DrawString("Total Annual salary:", pdfFont, solidBrush, x, 143)
            rectbounds.Y = rectbounds.Y + 18
            'Create text box for annual salary.
            CreateTextBox(page, "Asalary", "Annual salary", f, rectbounds)

            page.Graphics.DrawString("Duties:", pdfFont, solidBrush, x, 168)

            rectbounds.Y = rectbounds.Y + 50
            rectbounds.X = x
            rectbounds.Height = rectbounds.Height * 4

            'Creates textbox for Duties
            CreateTextBox(page, "Duties", "Duties", f, rectbounds)
            page.Graphics.DrawString("Employment type:", pdfFont, solidBrush, x, 268)

            '			#Region "Create ComboBox"

            'Set position to draw Combo box.
            rectbounds.Y = rectbounds.Y + 74
            rectbounds.Height = 20
            rectbounds.X = 175

            'Create a combo box.
            comboBox = New PdfComboBoxField(page, "EmpType")
            comboBox.Bounds = rectbounds

            comboBox.BorderColor = New PdfColor(Color.Gray)
            comboBox.Font = pdfFont
            comboBox.ToolTip = "Employment type"

            ' Add list items.
            comboBox.Items.Add(New PdfListFieldItem("Full time", "ft"))
            comboBox.Items.Add(New PdfListFieldItem("Part time", "pt"))

            ' Add combo box to the form.
            document.Form.Fields.Add(comboBox)
            '			#End Region

            ' Add navigation button for the third page.
            NavigateToNextPage(page, "Apply")
        End Sub

        ''' <summary>
        ''' Adds navigation button.
        ''' </summary>
        ''' <param name="currentPage"></param>
        ''' <param name="buttonText"></param>
        Private Sub NavigateToNextPage(ByVal currentPage As PdfPage, ByVal buttonText As String)
            ' Create a Button field.
            Dim submitButton As New PdfButtonField(page, buttonText)
            submitButton.Bounds = New RectangleF(page.GetClientSize().Width - 30, page.GetClientSize().Height - x, 25, 15)
            submitButton.Font = pdfFont
            submitButton.ToolTip = buttonText

            ' Add a new page.
            page = document.Pages.Add()

            ' Create an instance of PdfDestination.
            Dim dest As New PdfDestination(page, New Point(0, 100))

            ' Create an instance of GoTo action.
            Dim goToAction As New PdfGoToAction(page)

            ' Update the destination for the action.
            goToAction.Destination = dest

            ' Set action for the field.
            submitButton.Actions.GotFocus = goToAction
        End Sub

        ''' <summary>
        ''' Creates first page in the document.
        ''' </summary>
        Private Sub CreateFirstPage()
            ' Add a new page.
            page = document.Pages.Add()

            page.Graphics.DrawImage(img, 0, 0, pageSize.Width, pageSize.Height)
            page.Graphics.DrawString("General Information", pdfFont, New PdfSolidBrush(New PdfColor(213, 123, 19)), x, 40)
            page.Graphics.DrawString("Education Grade", pdfFont, New PdfSolidBrush(New PdfColor(213, 123, 19)), x, 190)

            ' Update font
            f = New Font("Calibri", 10.0F)
            pdfFont = New PdfTrueTypeFont(f)

            ' Create fields for first page.
            page.Graphics.DrawString("First Name:", pdfFont, solidBrush, x, 65)

            'Create text box for FirstName.
            CreateTextBox(page, "FirstName", "First Name", f, rectbounds)

            page.Graphics.DrawString("Last Name:", pdfFont, solidBrush, x, 83)
            rectbounds.Y += 18

            'Create text box for LastName.
            CreateTextBox(page, "LastName", "Last Name", f, rectbounds)

            page.Graphics.DrawString("Email:", pdfFont, solidBrush, x, 103)
            rectbounds.Y += 18

            'Create text box for Email.
            CreateTextBox(page, "Email", "Email id", f, rectbounds)

            page.Graphics.DrawString("Business Phone:", pdfFont, solidBrush, x, 123)
            rectbounds.Y += 18

            'Create text box for Business phone.
            CreateTextBox(page, "Business", "Business phone", f, rectbounds)

            page.Graphics.DrawString("Which position are" & Constants.vbLf & "you applying for?", pdfFont, solidBrush, x, 143)

            rectbounds.Y += 24

            '			#Region "Create ComboBox"

            ' Create a combo box for the first page.
            Dim comboBox As New PdfComboBoxField(page, "JobTitle")
            comboBox.Bounds = rectbounds
            comboBox.BorderWidth = 1
            comboBox.BorderColor = New PdfColor(Color.Gray)

            comboBox.Font = pdfFont

            ' Set tooltip
            comboBox.ToolTip = "Job Title"

            ' Add list items.
            comboBox.Items.Add(New PdfListFieldItem("Development", "accounts"))
            comboBox.Items.Add(New PdfListFieldItem("Support", "advertise"))
            comboBox.Items.Add(New PdfListFieldItem("Documentation", "agri"))

            ' Add combo box to the form.
            document.Form.Fields.Add(comboBox)
            '			#End Region

            page.Graphics.DrawString("Highest qualification", pdfFont, solidBrush, x, 217)

            '			#Region "Create CheckBox"
            'Set position to draw Checkbox
            rectbounds.Y = 239
            rectbounds.X = x
            rectbounds.Width = 10

            rectbounds.Height = 10

            ' Create check box for Associate Degree.
            CreateCheckBox(page, "Adegree", "Degree")
            page.Graphics.DrawString("Associate degree", pdfFont, solidBrush, rectbounds.X, rectbounds.Y)
            rectbounds.X += 90

            ' Create check box for Bachelor Degree.
            CreateCheckBox(page, "Bdegree", "Degree")
            page.Graphics.DrawString("Bachelor degree", pdfFont, solidBrush, rectbounds.X, rectbounds.Y)
            rectbounds.X += 90

            ' Create check box for College.
            CreateCheckBox(page, "college", "College")
            page.Graphics.DrawString("College", pdfFont, solidBrush, rectbounds.X, rectbounds.Y)

            rectbounds.Y += 20
            rectbounds.X = x

            ' Create check box for PG.
            CreateCheckBox(page, "pg", "PG")
            page.Graphics.DrawString("Post Graduate", pdfFont, solidBrush, rectbounds.X, rectbounds.Y)
            rectbounds.X += 90

            ' Create check box for MBA.
            CreateCheckBox(page, "mba", "MBA")
            page.Graphics.DrawString("MBA", pdfFont, solidBrush, rectbounds.X, rectbounds.Y)

            '			#End Region

            ' Add navigation button for the second page.
            NavigateToNextPage(page, "Next")
        End Sub
        ''' <summary>
        ''' Creates check box and adds it to the form.
        ''' </summary>
        ''' <param name="page"></param>
        ''' <param name="name"></param>
        ''' <param name="tooltip"></param>
        Private Sub CreateCheckBox(ByVal page As PdfPage, ByVal name As String, ByVal tooltip As String)
            ' Create a Check box field.
            Dim chb As New PdfCheckBoxField(page, name)

            ' Set check box properties.
            chb.Font = pdfFont
            chb.ToolTip = tooltip
            chb.Bounds = rectbounds
            chb.BorderColor = New PdfColor(Color.Gray)
            rectbounds.X += chb.Bounds.Height + 10

            document.Form.Fields.Add(chb)
        End Sub
#End Region
    End Class
End Namespace