#Region "Copyright Syncfusion Inc. 2001 - 2008"
'
'  Copyright Syncfusion Inc. 2001 - 2008. All rights reserved.
'
'  Use of this code is subject to the terms of our license.
'  A copy of the current license can be obtained at any time by e-mailing
'  licensing@syncfusion.com. Re-distribution in any form is strictly
'  prohibited. Any infringement will be prosecuted under applicable laws. 
'
#End Region


Imports Microsoft.VisualBasic
Imports System
Imports System.Drawing
Imports System.Drawing.Imaging
Imports System.Collections
Imports System.ComponentModel
Imports System.Windows.Forms
Imports System.Data
Imports Syncfusion.Pdf
Imports Syncfusion.Pdf.Graphics
Imports Syncfusion.Pdf.Interactive
Imports System.Text
Imports System.IO
Imports Syncfusion.Pdf.Tables

Namespace EssentialPDFSamples
	''' <summary>
	''' Summary description for Form1.
	''' </summary>
	Public Class Form1 : Inherits System.Windows.Forms.Form
		Private WithEvents button1 As System.Windows.Forms.Button
        Private label1 As System.Windows.Forms.Label
        Private WithEvents PictureBox2 As System.Windows.Forms.PictureBox

        ''' <summary>
        ''' Required designer variable.
        ''' </summary>
        Private components As System.ComponentModel.Container = Nothing

        Public Sub New()
            '
            ' Required for Windows Form Designer support
            '
            InitializeComponent()
            '
            ' TODO: Add any constructor code after InitializeComponent call
            ''
        End Sub

        ''' <summary>
        ''' Clean up any resources being used.
        ''' </summary>
        Protected Overloads Overrides Sub Dispose(ByVal disposing As Boolean)
            If disposing Then
                If Not components Is Nothing Then
                    components.Dispose()
                End If
            End If
            MyBase.Dispose(disposing)
        End Sub

#Region "Windows Form Designer generated code"
        ''' <summary>
        ''' Required method for Designer support - do not modify
        ''' the contents of this method with the code editor.
        ''' </summary>
        Private Sub InitializeComponent()
            Dim resources As System.ComponentModel.ComponentResourceManager = New System.ComponentModel.ComponentResourceManager(GetType(Form1))
            Me.button1 = New System.Windows.Forms.Button
            Me.label1 = New System.Windows.Forms.Label
            Me.PictureBox2 = New System.Windows.Forms.PictureBox
            CType(Me.PictureBox2, System.ComponentModel.ISupportInitialize).BeginInit()
            Me.SuspendLayout()
            '
            'button1
            '
            Me.button1.Anchor = CType((System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Right), System.Windows.Forms.AnchorStyles)
            Me.button1.BackColor = System.Drawing.Color.Transparent
            Me.button1.FlatAppearance.BorderColor = System.Drawing.Color.FromArgb(CType(CType(255, Byte), Integer), CType(CType(192, Byte), Integer), CType(CType(128, Byte), Integer))
            Me.button1.FlatAppearance.MouseDownBackColor = System.Drawing.Color.FromArgb(CType(CType(255, Byte), Integer), CType(CType(224, Byte), Integer), CType(CType(192, Byte), Integer))
            Me.button1.FlatAppearance.MouseOverBackColor = System.Drawing.Color.FromArgb(CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer), CType(CType(192, Byte), Integer))
            Me.button1.Image = CType(resources.GetObject("button1.Image"), System.Drawing.Image)
            Me.button1.ImageAlign = System.Drawing.ContentAlignment.MiddleRight
            Me.button1.Location = New System.Drawing.Point(284, 159)
            Me.button1.Name = "button1"
            Me.button1.Size = New System.Drawing.Size(75, 23)
            Me.button1.TabIndex = 0
            Me.button1.Text = "PDF"
            Me.button1.UseVisualStyleBackColor = False
            '
            'label1
            '
            Me.label1.Anchor = CType(((System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Left) _
                        Or System.Windows.Forms.AnchorStyles.Right), System.Windows.Forms.AnchorStyles)
            Me.label1.Font = New System.Drawing.Font("Verdana", 8.25!, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, CType(0, Byte))
            Me.label1.ForeColor = System.Drawing.Color.FromArgb(CType(CType(0, Byte), Integer), CType(CType(0, Byte), Integer), CType(CType(64, Byte), Integer))
            Me.label1.Location = New System.Drawing.Point(0, 93)
            Me.label1.Name = "label1"
            Me.label1.Size = New System.Drawing.Size(373, 67)
            Me.label1.TabIndex = 1
            Me.label1.Text = "Click the button to view an PDF document generated by Essential PDF. Please note " & _
                "that Adobe Reader or its equivalent is required to view the resultant document."
            '
            'PictureBox2
            '
            Me.PictureBox2.Dock = System.Windows.Forms.DockStyle.Top
            Me.PictureBox2.Image = CType(resources.GetObject("PictureBox2.Image"), System.Drawing.Image)
            Me.PictureBox2.Location = New System.Drawing.Point(0, 0)
            Me.PictureBox2.Name = "PictureBox2"
            Me.PictureBox2.Size = New System.Drawing.Size(371, 89)
            Me.PictureBox2.TabIndex = 25
            Me.PictureBox2.TabStop = False
            '
            'Form1
            '
            Me.AutoScaleBaseSize = New System.Drawing.Size(5, 13)
            Me.BackColor = System.Drawing.Color.White
            Me.ClientSize = New System.Drawing.Size(371, 205)
            Me.Controls.Add(Me.PictureBox2)
            Me.Controls.Add(Me.button1)
            Me.Controls.Add(Me.label1)
            Me.FormBorderStyle = System.Windows.Forms.FormBorderStyle.FixedSingle
            Me.Icon = CType(resources.GetObject("$this.Icon"), System.Drawing.Icon)
            Me.MaximizeBox = False
            Me.MinimizeBox = False
            Me.Name = "Form1"
            Me.StartPosition = System.Windows.Forms.FormStartPosition.CenterScreen
            Me.Text = "Interactive Features"
            CType(Me.PictureBox2, System.ComponentModel.ISupportInitialize).EndInit()
            Me.ResumeLayout(False)

        End Sub
#End Region

        ''' <summary>
        ''' The main entry point for the application.
        ''' </summary>
        <STAThread()> _
        Shared Sub Main()
            Application.EnableVisualStyles()
            Application.Run(New Form1())
        End Sub
#Region "Fields"
        Private doc As PdfDocument
        Private page As PdfPage
        Private white As Color = Color.FromArgb(255, 255, 255, 255)
#End Region
        Private Sub button1_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles button1.Click
            '#Region "Field Definitions"
            doc = New PdfDocument()
            doc.PageSettings.Margins.All = 0
            doc.PageSettings.Size = New SizeF(PdfPageSize.A4.Width, 600)
            page = doc.Pages.Add()
            Dim g As PdfGraphics = page.Graphics
            Dim rect As New RectangleF(0, 0, page.Graphics.ClientSize.Width, 100)

            Dim whiteBrush As PdfBrush = New PdfSolidBrush(white)
            Dim whitePen As New PdfPen(white, 5)
            Dim purpleBrush As PdfBrush = New PdfSolidBrush(Color.FromArgb(255, 158, 0, 160))
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 25)
            Dim maroonColor As Color = Color.FromArgb(255, 188, 32, 60)
            Dim orangeColor As Color = Color.FromArgb(255, 255, 167, 73)
            '#End Region

            '			#Region "Header"
            g.DrawRectangle(purpleBrush, rect)
            g.DrawPie(whitePen, whiteBrush, New RectangleF(-20, 35, 700, 200), 20, -180)
            g.DrawRectangle(whiteBrush, New RectangleF(0, 99.5F, 700, 200))
            g.DrawString("Invoice", New PdfStandardFont(PdfFontFamily.TimesRoman, 24), PdfBrushes.White, New PointF(500, 10))
            Dim imagePath As String = GetFullTemplatePath("AdventureCycle.jpg", True)
            g.DrawImage(PdfImage.FromFile(imagePath), New RectangleF(100, 70, 390, 130))
            '			#End Region

            '			#Region "Body"

            'Invoice Number
            Dim invoiceNumber As New Random()
            g.DrawString("Invoice No: " & invoiceNumber.Next().ToString(), New PdfStandardFont(PdfFontFamily.Helvetica, 14), New PdfSolidBrush(maroonColor), New PointF(50, 210))
            g.DrawString("Date: ", New PdfStandardFont(PdfFontFamily.Helvetica, 14), New PdfSolidBrush(maroonColor), New PointF(350, 210))

            'Current Date
            Dim textBoxField As New PdfTextBoxField(page, "date")
            textBoxField.Font = New PdfStandardFont(PdfFontFamily.Helvetica, 12)
            textBoxField.Bounds = New RectangleF(384, 204, 150, 30)
            textBoxField.ForeColor = New PdfColor(maroonColor)
            textBoxField.ReadOnly = True
            doc.Actions.AfterOpen = New PdfJavaScriptAction("var newdate = new Date(); " & ControlChars.CrLf & "            var thisfieldis = this.getField('date');  " & ControlChars.CrLf & "            " & ControlChars.CrLf & "            var theday = util.printd('dddd',newdate); " & ControlChars.CrLf & "            var thedate = util.printd('d',newdate); " & ControlChars.CrLf & "            var themonth = util.printd('mmmm',newdate);" & ControlChars.CrLf & "            var theyear = util.printd('yyyy',newdate);  " & ControlChars.CrLf & "            " & ControlChars.CrLf & "            thisfieldis.strokeColor=color.transparent;" & ControlChars.CrLf & "            thisfieldis.value = theday + ' ' + thedate + ', ' + themonth + ' ' + theyear ;")
            doc.Form.Fields.Add(textBoxField)

            'invoice table
            Dim table As New PdfLightTable()
            table.Style.ShowHeader = True
            g.DrawRectangle(New PdfSolidBrush(Color.FromArgb(238, 238, 238, 248)), New RectangleF(50, 240, 500, 140))

            'Header Style
            Dim headerStyle As New PdfCellStyle()
            headerStyle.Font = New PdfStandardFont(PdfFontFamily.Helvetica, 12, PdfFontStyle.Bold)
            headerStyle.TextBrush = whiteBrush
            headerStyle.StringFormat = New PdfStringFormat(PdfTextAlignment.Center)
            headerStyle.BackgroundBrush = New PdfSolidBrush(orangeColor)
            headerStyle.BorderPen = New PdfPen(whiteBrush, 0)
            table.Style.HeaderStyle = headerStyle

            'Cell Style
            Dim bodyStyle As New PdfCellStyle()
            bodyStyle.Font = New PdfStandardFont(PdfFontFamily.Helvetica, 10)
            bodyStyle.StringFormat = New PdfStringFormat(PdfTextAlignment.Left)
            bodyStyle.BorderPen = New PdfPen(whiteBrush, 0)
            table.Style.DefaultStyle = bodyStyle
            table.DataSource = GetNorthwindDataSet()
            table.Columns(0).Width = 17
            table.Columns(1).Width = 26
            table.Columns(3).Width = 15
            table.Style.CellPadding = 3
            AddHandler table.BeginCellLayout, AddressOf table_BeginCellLayout

            Dim result As PdfLightTableLayoutResult = table.Draw(page, New RectangleF(50, 240, 500, 140))

            g.DrawString("Grand Total:", New PdfStandardFont(PdfFontFamily.Helvetica, 12), New PdfSolidBrush(Color.FromArgb(255, 255, 167, 73)), New PointF(result.Bounds.Right - 150, result.Bounds.Bottom))
            CreateTextBox(page, "GrandTotal", "Grand Total", New RectangleF(result.Bounds.Width - 15, result.Bounds.Bottom - 2, 66, 18), True, "")


            'Send to Server
            Dim sendButton As New PdfButtonField(page, "OrderOnline")
            sendButton.Bounds = New RectangleF(200, result.Bounds.Bottom + 70, 80, 25)
            sendButton.BorderColor = white
            sendButton.BackColor = maroonColor
            sendButton.ForeColor = white
            sendButton.Text = "Order Online"
            Dim submitAction As New PdfSubmitAction("http://stevex.net/dump.php")
            submitAction.DataFormat = SubmitDataFormat.Html
            sendButton.Actions.MouseUp = submitAction
            doc.Form.Fields.Add(sendButton)

            'Order by Mail
            Dim sendMail As New PdfButtonField(page, "sendMail")
            sendMail.Bounds = New RectangleF(300, result.Bounds.Bottom + 70, 80, 25)
            sendMail.Text = "Order By Mail"
            sendMail.BorderColor = white
            sendMail.BackColor = maroonColor
            sendMail.ForeColor = white

            ' Create a javascript action.
            Dim javaAction As New PdfJavaScriptAction("address = app.response(""Enter an e-mail address."",""SEND E-MAIL"","""");" & "var aSubmitFields = [];" & "for( var i = 0 ; i < this.numFields; i++){" & "aSubmitFields[i] = this.getNthFieldName(i);" & "}" & "if (address){ cmdLine = ""mailto:"" + address;this.submitForm(cmdLine,true,false,aSubmitFields);}")

            sendMail.Actions.MouseUp = javaAction
            doc.Form.Fields.Add(sendMail)

            'Print
            Dim printButton As New PdfButtonField(page, "print")
            printButton.Bounds = New RectangleF(400, result.Bounds.Bottom + 70, 80, 25)
            printButton.BorderColor = white
            printButton.BackColor = maroonColor
            printButton.ForeColor = white
            printButton.Text = "Print"
            printButton.Actions.MouseUp = New PdfJavaScriptAction("this.print (true); ")
            doc.Form.Fields.Add(printButton)

            Dim attachmentPath As String = GetFullTemplatePath("Product Catalog.pdf", False)
            Dim attachment As New PdfAttachment(attachmentPath)
            attachment.ModificationDate = Date.Now
            attachment.Description = "Specification"
            doc.Attachments.Add(attachment)

            'Open Specification
            Dim openSpecificationButton As New PdfButtonField(page, "openSpecification")
            openSpecificationButton.Bounds = New RectangleF(50, result.Bounds.Bottom + 20, 87, 15)
            openSpecificationButton.TextAlignment = PdfTextAlignment.Left
            openSpecificationButton.Font = New PdfStandardFont(PdfFontFamily.Helvetica, 10)
            openSpecificationButton.BorderStyle = PdfBorderStyle.Underline
            openSpecificationButton.BorderColor = orangeColor
            openSpecificationButton.BackColor = New PdfColor(255, 255, 255)
            openSpecificationButton.ForeColor = orangeColor
            openSpecificationButton.Text = "Open Specification"
            openSpecificationButton.Actions.MouseUp = New PdfJavaScriptAction("this.exportDataObject({ cName: 'Product Catalog.pdf', nLaunch: 2 });")
            doc.Form.Fields.Add(openSpecificationButton)

            Dim uriAnnotationRectangle As New RectangleF(page.Graphics.ClientSize.Width - 160, page.Graphics.ClientSize.Height - 30, 80, 20)
            Dim linkAnnot As New PdfTextWebLink()
            linkAnnot.Url = "http://www.adventure-works.com"
            linkAnnot.Text = "http://www.adventure-works.com"
            linkAnnot.Font = New PdfStandardFont(PdfFontFamily.Helvetica, 8)
            linkAnnot.Brush = PdfBrushes.White
            linkAnnot.DrawTextWebLink(page, uriAnnotationRectangle.Location)
            '			#End Region

            '			#Region "Footer"
            g.DrawRectangle(purpleBrush, New RectangleF(0, page.Graphics.ClientSize.Height - 100, page.Graphics.ClientSize.Width, 100))
            g.DrawPie(whitePen, whiteBrush, New RectangleF(-20, page.Graphics.ClientSize.Height - 250, 700, 200), 0, 180)
            '			#End Region
            'Save to disk
            doc.Save("Sample.pdf")

            'Message box confirmation to view the created PDF document.
            If MessageBox.Show("Do you want to view the PDF file?", "PDF File Created", MessageBoxButtons.YesNo, MessageBoxIcon.Information) = DialogResult.Yes Then
                'Launching the PDF file using the default Application.[Acrobat Reader]
                System.Diagnostics.Process.Start("Sample.pdf")
                Me.Close()
            Else
                ' Exit
                Me.Close()
            End If
        End Sub
        ''' <summary>
        ''' Returns dataset.
        ''' </summary>
        Private Function GetNorthwindDataSet() As DataSet
            Dim dataSet As New DataSet()
            dataSet.ReadXml(GetFullTemplatePath("AdventureWorkCycle.xml", False))
            'try
            '{
            '    AppDomain.CurrentDomain.SetData("SQLServerCompactEditionUnderWebHosting", true);
            '    string SqlMobileConnString1 = @"Data Source = " + GetFullTemplatePath("AdventureWorksExt.sdf", false);
            '    SqlCeConnection conn = new SqlCeConnection(SqlMobileConnString1);
            '    conn.Open();
            '    SqlCeDataAdapter adapter = new SqlCeDataAdapter("Select * from ", conn);
            '    adapter.Fill(dataSet);
            '}
            'catch (Exception)
            '{
            '    MessageBox.Show("Cannot load DataSet", "Failure", MessageBoxButtons.OK, MessageBoxIcon.Error);
            '    this.Close();
            '}

            Return dataSet
        End Function

        ''' <summary>
        ''' Gets the full path of the PDF template or image.
        ''' </summary>
        ''' <param name="fileName">Name of the file</param>
        ''' <param name="image">True if image</param>
        ''' <returns>Path of the file</returns>
        Private Function GetFullTemplatePath(ByVal fileName As String, ByVal image As Boolean) As String
            Dim fullPath As String = "..\..\..\..\..\..\..\..\..\Common\"
            Dim folder As String
            If image Then
                folder = "Images\PDF"
            Else
                folder = "Data"
            End If

            Return String.Format("{0}{1}\{2}", fullPath, folder, fileName)
        End Function

        '#Region "Helper Methods"

        Private Sub table_BeginCellLayout(ByVal sender As Object, ByVal args As BeginCellLayoutEventArgs)
            If args.CellIndex = 2 AndAlso args.RowIndex > -1 Then
                CreateTextBox(page, "price" & args.RowIndex.ToString(), "Price", args.Bounds, True, args.Value)
                args.Skip = True

            ElseIf args.CellIndex = 3 AndAlso args.RowIndex = -1 Then
                Dim popupAnnotation As New PdfPopupAnnotation(New RectangleF(args.Bounds.Right - 18, args.Bounds.Top + 2, 1, 1), "Please enter a validate interger between 1 to 50")
                popupAnnotation.Border.Width = 4
                popupAnnotation.Open = False
                popupAnnotation.Border.HorizontalRadius = 10
                popupAnnotation.Border.VerticalRadius = 10
                popupAnnotation.Icon = PdfPopupIcon.Comment
                page.Annotations.Add(popupAnnotation)
            ElseIf args.CellIndex = 3 AndAlso args.RowIndex > -1 Then
                Dim textBoxField As New PdfTextBoxField(page, "quantity" & args.RowIndex.ToString())


                'Set properties to the textbox.
                textBoxField.Font = New PdfStandardFont(PdfFontFamily.Helvetica, 12)

                textBoxField.BorderColor = New PdfColor(white)
                textBoxField.BackColor = Color.FromArgb(255, 238, 238, 248)
                textBoxField.Bounds = args.Bounds
                textBoxField.Text = "0"
                Dim action As New PdfJavaScriptAction("event.rc = event.value > -1 && event.value < 51; " & ControlChars.CrLf & "                var f = this.getField('price" & args.RowIndex.ToString() & "')" & ControlChars.CrLf & "                var f1 = this.getField('quantity" & args.RowIndex.ToString() & "')" & ControlChars.CrLf & "                var f2 = this.getField('TotalPrice" & args.RowIndex.ToString() & "')" & ControlChars.CrLf & "                var f3 = this.getField('GrandTotal');" & ControlChars.CrLf & "                if(!event.rc)" & ControlChars.CrLf & "                {" & ControlChars.CrLf & ControlChars.CrLf & "                f1.fillColor=color.red;" & ControlChars.CrLf & "                app.beep();" & ControlChars.CrLf & "                }" & ControlChars.CrLf & "                else" & ControlChars.CrLf & "                {" & ControlChars.CrLf & "                    f1.fillColor = color.transparent;" & ControlChars.CrLf & "                    f2.value = f1.value * f.value;" & ControlChars.CrLf & "                    f3.value = this.getField('TotalPrice0').value + this.getField('TotalPrice1').value + this.getField('TotalPrice2').value + this.getField('TotalPrice3').value + this.getField('TotalPrice4').value +this.getField('TotalPrice5').value;" & ControlChars.CrLf & "                }")
                textBoxField.Actions.LostFocus = action
                doc.Form.Fields.Add(textBoxField)
            ElseIf args.CellIndex = 4 AndAlso args.RowIndex > -1 Then
                CreateTextBox(page, "TotalPrice" & args.RowIndex.ToString(), "Total Price", args.Bounds, True, "0")
            End If
        End Sub
        ''' <summary>
        ''' Creates textbox and adds it in the form.
        ''' </summary>
        ''' <param name="page"></param>
        ''' <param name="text"></param>
        ''' <param name="tooltip"></param>
        ''' <param name="f"></param>
        ''' <param name="bounds"></param>
        Private Sub CreateTextBox(ByVal page As PdfPage, ByVal text As String, ByVal tooltip As String, ByVal bounds As RectangleF, ByVal [readOnly] As Boolean, ByVal value As String)
            ' Create a Text box field.
            Dim textBoxField As New PdfTextBoxField(page, text)
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12)
            'Set properties to the textbox.
            textBoxField.Font = font
            textBoxField.BackColor = Color.FromArgb(255, 238, 238, 248)
            textBoxField.BorderColor = white
            textBoxField.Bounds = bounds
            textBoxField.ToolTip = tooltip
            textBoxField.ReadOnly = [readOnly]
            textBoxField.Text = value
            doc.Form.Fields.Add(textBoxField)
        End Sub



    End Class
End Namespace
