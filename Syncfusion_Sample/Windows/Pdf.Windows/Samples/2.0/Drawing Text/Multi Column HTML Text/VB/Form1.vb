#Region "Copyright Syncfusion Inc. 2001 - 2008"
'
'  Copyright Syncfusion Inc. 2001 - 2008. All rights reserved.
'
'  Use of this code is subject to the terms of our license.
'  A copy of the current license can be obtained at any time by e-mailing
'  licensing@syncfusion.com. Re-distribution in any form is strictly
'  prohibited. Any infringement will be prosecuted under applicable laws. 
'
#End Region


Imports Microsoft.VisualBasic
Imports System
Imports System.Drawing
Imports System.Drawing.Imaging
Imports System.Collections
Imports System.ComponentModel
Imports System.Windows.Forms
Imports System.Data
Imports Syncfusion.Pdf
Imports Syncfusion.Pdf.Graphics

Namespace EssentialPDFSamples
    ''' <summary>
    ''' Summary description for Form1.
    ''' </summary>
    Public Class Form1
        Inherits System.Windows.Forms.Form
#Region "Private Members"
        Private page As PdfPage
        Private brush As PdfSolidBrush
        Private pdfFont As PdfStandardFont
        Private format As PdfMetafileLayoutFormat
        Private WithEvents button1 As System.Windows.Forms.Button
        Private label1 As System.Windows.Forms.Label
        Private pictureBox1 As System.Windows.Forms.PictureBox

        ''' <summary>
        ''' Required designer variable.
        ''' </summary>
        Private components As System.ComponentModel.Container = Nothing
#End Region

#Region "Constructor"
        Public Sub New()
            '
            ' Required for Windows Form Designer support
            '
            InitializeComponent()
            Application.EnableVisualStyles()
            '
            ' TODO: Add any constructor code after InitializeComponent call
            ''
        End Sub

        ''' <summary>
        ''' Clean up any resources being used.
        ''' </summary>
        Protected Overloads Overrides Sub Dispose(ByVal disposing As Boolean)
            If disposing Then
                If Not components Is Nothing Then
                    components.Dispose()
                End If
            End If
            MyBase.Dispose(disposing)
        End Sub

#Region "Windows Form Designer generated code"
        ''' <summary>
        ''' Required method for Designer support - do not modify
        ''' the contents of this method with the code editor.
        ''' </summary>
        Private Sub InitializeComponent()
            Dim resources As System.ComponentModel.ComponentResourceManager = New System.ComponentModel.ComponentResourceManager(GetType(Form1))
            Me.button1 = New System.Windows.Forms.Button
            Me.label1 = New System.Windows.Forms.Label
            Me.pictureBox1 = New System.Windows.Forms.PictureBox
            CType(Me.pictureBox1, System.ComponentModel.ISupportInitialize).BeginInit()
            Me.SuspendLayout()
            '
            'button1
            '
            Me.button1.Anchor = CType((System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Right), System.Windows.Forms.AnchorStyles)
            Me.button1.BackColor = System.Drawing.Color.Transparent
            Me.button1.FlatAppearance.BorderColor = System.Drawing.Color.FromArgb(CType(CType(255, Byte), Integer), CType(CType(192, Byte), Integer), CType(CType(128, Byte), Integer))
            Me.button1.FlatAppearance.MouseDownBackColor = System.Drawing.Color.FromArgb(CType(CType(255, Byte), Integer), CType(CType(224, Byte), Integer), CType(CType(192, Byte), Integer))
            Me.button1.FlatAppearance.MouseOverBackColor = System.Drawing.Color.FromArgb(CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer), CType(CType(192, Byte), Integer))
            Me.button1.Image = CType(resources.GetObject("button1.Image"), System.Drawing.Image)
            Me.button1.ImageAlign = System.Drawing.ContentAlignment.MiddleRight
            Me.button1.Location = New System.Drawing.Point(286, 157)
            Me.button1.Name = "button1"
            Me.button1.Size = New System.Drawing.Size(75, 24)
            Me.button1.TabIndex = 0
            Me.button1.Text = "PDF"
            Me.button1.UseVisualStyleBackColor = False
            '
            'label1
            '
            Me.label1.Font = New System.Drawing.Font("Verdana", 8.25!, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, CType(0, Byte))
            Me.label1.ForeColor = System.Drawing.Color.FromArgb(CType(CType(0, Byte), Integer), CType(CType(0, Byte), Integer), CType(CType(64, Byte), Integer))
            Me.label1.Location = New System.Drawing.Point(0, 110)
            Me.label1.Name = "label1"
            Me.label1.Size = New System.Drawing.Size(373, 69)
            Me.label1.TabIndex = 1
            Me.label1.Text = "Click the button to view an PDF document generated by Essential PDF. Please note " & _
                "that Adobe Reader or its equivalent is required to view the resultant document."
            '
            'pictureBox1
            '
            Me.pictureBox1.Dock = System.Windows.Forms.DockStyle.Top
            Me.pictureBox1.Image = CType(resources.GetObject("pictureBox1.Image"), System.Drawing.Image)
            Me.pictureBox1.Location = New System.Drawing.Point(0, 0)
            Me.pictureBox1.Name = "pictureBox1"
            Me.pictureBox1.Size = New System.Drawing.Size(373, 89)
            Me.pictureBox1.TabIndex = 24
            Me.pictureBox1.TabStop = False
            '
            'Form1
            '
            Me.AutoScaleBaseSize = New System.Drawing.Size(5, 13)
            Me.BackColor = System.Drawing.Color.White
            Me.ClientSize = New System.Drawing.Size(373, 196)
            Me.Controls.Add(Me.button1)
            Me.Controls.Add(Me.label1)
            Me.Controls.Add(Me.pictureBox1)
            Me.FormBorderStyle = System.Windows.Forms.FormBorderStyle.FixedSingle
            Me.Icon = CType(resources.GetObject("$this.Icon"), System.Drawing.Icon)
            Me.MaximizeBox = False
            Me.MinimizeBox = False
            Me.Name = "Form1"
            Me.StartPosition = System.Windows.Forms.FormStartPosition.CenterScreen
            Me.Text = "Multi Column HTML Text"
            CType(Me.pictureBox1, System.ComponentModel.ISupportInitialize).EndInit()
            Me.ResumeLayout(False)

        End Sub
#End Region

        ''' <summary>
        ''' The main entry point for the application.
        ''' </summary>
        <STAThread()> _
        Shared Sub Main()
            Application.Run(New Form1())
        End Sub
#End Region

#Region "Events"
        Private Sub button1_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles button1.Click
            ' Create a new instance of PdfDocument class.
            Dim document As New PdfDocument()

            ' Set size for the page.
            document.PageSettings.Size = New SizeF(870, 732)

            ' Add a new page to the document.
            page = document.Pages.Add()

            ' Create brush.
            brush = New PdfSolidBrush(Color.Black)

            'Create font.
            pdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 2.0F)

            ' Adding Header to the document
            Me.AddHeader(document, "Syncfusion Essential PDF", "MultiColumnText Demo")

            ' Adding Footer to the document
            Me.AddFooter(document, "@Copyright 2008")

            ' Formatting Layout
            format = New PdfMetafileLayoutFormat()
            format.Layout = PdfLayoutType.OnePage

            Dim width As Single = 190
            Dim height As Single = page.GetClientSize().Height

            '			#Region "htmlText"
            Dim longtext As String = "<font color='#FF0000F'><b>PDF</b></font> stands for <i>""Portable Document Format""</i>." & " The key word is <i>portable</i>, intended to combine the qualities of <u>authenticity," & " reliability and ease of use together into a single packaged concept</u>.<br/><br/>" & "Adobe Systems invented PDF technology in the early 1990s to smooth the " & "process of moving text and graphics from publishers to printing-presses." & " <font color='#FF0000F'><b>PDF</b></font> turned out to be the very essence of paper, brought to life in a computer." & " In creating PDF, Adobe had almost unwittingly invented nothing less than a " & "bridge between the paper and computer worlds. <br/><br/>To be truly portable, an authentic electronic " & "document would have to appear exactly the same way on any computer at any time," & " at no cost to the user. It will deliver the exact same results in print or on-screen " & "with near-total reliability. "
            '			#End Region

            ' Drawing htmlString
            DrawHTML(longtext, New RectangleF(0, 15, width, height))

            ' Drawing Image
            Dim pdfBitmap As PdfBitmap = New PdfBitmap(Image.FromFile(GetFullTemplatePath("PDFImage.png", True)))
            page.Graphics.DrawImage(pdfBitmap, New PointF(50, 295))

            '			#Region "HtmlText"
            longtext = "<font color='#FF0000F'><b>PDF</b></font> is used for representing two-dimensional documents in " & "a manner independent of the application software, hardware, and operating system.<sup>[1]</sup>" & "<br/><br/>Each PDF file encapsulates a complete description of a fixed-layout 2-D document " & "(and, with Acrobat 3-D, embedded 3-D documents) that includes the text, fonts, images, " & "and 2-D vector graphics which comprise the documents." & " <br/><br/><b>PDF</b> is an open standard that was officially published on July 1, 2008 by the ISO as" & "ISO 32000-1:2008.<sub>[2]</sub><br/><br/>" & "The PDF combines the technologies such as A sub-set of the PostScript page description programming " & "language, a font-embedding/replacement system to allow fonts to travel with the documents and a " & "structured storage system to bundle these elements and any associated content into a single file," & "with data compression where appropriate."
            '			#End Region

            DrawHTML(longtext, New RectangleF(0, 375, width, height))

            '			#Region "HtmlText"
            longtext = "<font color='#0000F8'>Essential PDF</font> is a <u><i>.NET</i></u> " & "library with the capability to produce Adobe PDF files " & "It features a full-fledged object model for the easy creation of PDF files from any .NET language. " & " It does not use any external libraries and is built from scratch in C#. "
            '			#End Region

            width = 225

            DrawHTML(longtext, New RectangleF(195, 15, width, height))

            ' Drawing Image
            pdfBitmap = New PdfBitmap(Image.FromFile(GetFullTemplatePath("Essen PDF.gif", True)))
            page.Graphics.DrawImage(pdfBitmap, New PointF(225, 100))

            '			#Region "HtmlText"
            longtext = "Essential PDF supports many features for creating a PDF document including <b>" & "drawing text, images, tables and other shapes</b>. " & "<br/><br/><font face='TimesRoman'>The generated PDF document can also be protected using <I>" & "40 Bit and 128 Bit encryption.</I></font><br/>" & "<p>Essential PDF is compatible with Microsoft Visual Studio .NET 2005 and 2008. " & "It is also compatible with the Express editions of Visual Studio.NET. <br/><br/>" & "The Essential PDF library can be used in any .NET environment including C#, VB.NET and managed C++.</p>" & "The PDF file that is created using Essential PDF can be viewed using Adobe Acrobat or the free " & "version of <u> Acrobat Viewer from Adobe only.</u>" & "<font color='#0000F8'><b><br/><br/>Essential PDF</b></font> It can be used on the server " & "side (ASP.NET or any other environment) or with Windows Forms applications. " & "The library is 100% managed, being written in C#.<br/><br/> " & "<font color='#FF0000F'>PdfDocument</font> is a top-level object in Essential PDF which implies a " & "representation of a PDF document. <br/><br/> " & "The document contains a collection of sections that are represented by the <font color='#FF0000F'>PdfSection</font> class, " & "which is a logical entity containing a collection of pages and their settings. <br/><br/> Pages (which are represented by <font color='#FF0000F'>PdfPage</font> class) " & "are the main destinations of the graphics output.<br/><br/>" & "A document can be saved through its <font color='#0000F8'>Save()</font> method. It can be saved either to a file or stream.<br/><br/>" & "In order to use the Essential PDF library in your project, add the PdfConfig component found in the toolbox to a project to enable support for PDF. "

            '			#End Region

            DrawHTML(longtext, New RectangleF(195, 200, width, height))

            '			#Region "HtmlText"
            longtext = "<p>Every Syncfusion license includes a <i>one-year subscription</i> for unlimited technical support and new releases." & "Syncfusion licenses each product on a simple per-developer basis and charges no royalties," & "runtimes, or server deployment fees. A licensee can install his/her " & "license on multiple personal machines at <u>no extra charge.</u></p>" & "<p>At Syncfusion we are very excited about the Microsoft .NET platform.<br/><br/> " & "We believe that one of the key benefits of <font color='#0000F8'>.NET</font> is improved programmer productivity. " & "Solutions that used to take a very long time with traditional tools can now be " & "implemented in a much shorter time period with the <font color='#0000F8'>.NET</font> platform.</p>" & "Essential Studio includes seven component libraries in one great package." & "Essential Studio is available with full source code. It incorporates a " & "unique debugging support system that allows switching between 'Debug' and " & "'Release' versions of our library with a single click from inside the Visual" & "Studio.NET IDE. <br/><br/> <p> To ensure the highest quality of support possible," & "we use a state of the art <font color='#0000F8'>Customer Relationship Management software (CRM)</font> " & "based Developer Support System called Direct-Trac. Syncfusion Direc-Trac is a " & "support system that is uniquely tailored for developer needs. Support incidents " & "can be created and tracked to completion 24 hours a day, 7 days a week.</p><br/><br/> " & "We have a simple, royalty-free licensing model. Components are licensed to a single user." & " We recognize that you often work at home or on your laptop in addition to your work machine." & "Therefore, our license permits our products to be installed in more than one location." & " At Syncfusion, we stand behind our products 100%. <br/><br/>We have top notch management" & ", architects, product managers, sales people, support personnel, and developers " & "all working with you, the customer, as their focal point."
            '			#End Region

            DrawHTML(longtext, New RectangleF(425, 15, width, height))

            '			#Region "HtmlText"
            longtext = "Each licensed control would need to have an entry in the licx file. This would mean that if you were using 20 licensed controls, you would have 20 different entries complete with a full version number in your licx file." & "<br/><br/> This posed major problems when upgrading to a newer version since these entries would need to have their version numbers changed. This also made trouble shooting licensing issues very difficult. "
            '			#End Region

            DrawHTML(longtext, New RectangleF(425, 550, width, height))

            document.Save("Sample.pdf")
            document.Close(True)

            'Message box confirmation to view the created PDF document.
            If MessageBox.Show("Do you want to view the PDF file?", "PDF File Created", MessageBoxButtons.YesNo, MessageBoxIcon.Information) = System.Windows.Forms.DialogResult.Yes Then
                'Launching the PDF file using the default Application.[Acrobat Reader]
                System.Diagnostics.Process.Start("Sample.pdf")
                Me.Close()
            Else
                ' Exit
                Me.Close()
            End If
        End Sub
#End Region

#Region "Helpher methods"
        ''' <summary>
        ''' Create an instance of PdfHTMLTextElement class and draw HTML string.
        ''' </summary>
        ''' <param name="longtext"></param>
        ''' <param name="rectangleF"></param>
        Private Sub DrawHTML(ByVal longtext As String, ByVal rectangleF As RectangleF)
            Dim richTextElement As New PdfHTMLTextElement(longtext, pdfFont, brush)
            richTextElement.TextAlign = TextAlign.Justify

            'Drawing htmlString
            richTextElement.Draw(page, rectangleF, format)
        End Sub

        ''' <summary>
        ''' Draws header to the PDF.
        ''' </summary>
        ''' <param name="doc"></param>
        ''' <param name="title"></param>
        ''' <param name="description"></param>
        Private Sub AddHeader(ByVal doc As PdfDocument, ByVal title As String, ByVal description As String)
            Dim rect As New RectangleF(0, 0, doc.Pages(0).GetClientSize().Width, 50)

            'Create page template
            Dim header As New PdfPageTemplateElement(rect)
            Dim g As PdfGraphics = header.Graphics
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 24)

            Dim imageSize As New SizeF(110.0F, 35.0F)

            'Locating the logo on the right corner of the Drawing Surface
            Dim imageLocation As New PointF(doc.Pages(0).GetClientSize().Width - imageSize.Width - 20, 5)

            Dim img As PdfImage = New PdfBitmap(GetFullTemplatePath("logo.png", True))

            'Draw the image in the Header.
            g.DrawImage(img, imageLocation, imageSize)

            Dim brush As New PdfSolidBrush(Color.FromArgb(44, 71, 120))

            Dim pen As New PdfPen(Color.DarkBlue, 3.0F)
            font = New PdfStandardFont(PdfFontFamily.Helvetica, 16, PdfFontStyle.Bold)

            'Set formattings for the text
            Dim format As New PdfStringFormat()
            format.Alignment = PdfTextAlignment.Center
            format.LineAlignment = PdfVerticalAlignment.Middle

            'Draw title
            g.DrawString(title, font, brush, New RectangleF(0, 0, header.Width, header.Height), format)
            brush = New PdfSolidBrush(Color.Gray)
            font = New PdfStandardFont(PdfFontFamily.Helvetica, 6, PdfFontStyle.Bold)

            format = New PdfStringFormat()
            format.Alignment = PdfTextAlignment.Left
            format.LineAlignment = PdfVerticalAlignment.Bottom

            'Draw description
            g.DrawString(description, font, brush, New RectangleF(0, 0, header.Width, header.Height - 8), format)

            'Draw some lines in the header
            pen = New PdfPen(Color.DarkBlue, 0.7F)
            g.DrawLine(pen, 0, 0, header.Width, 0)
            pen = New PdfPen(Color.DarkBlue, 2.0F)
            g.DrawLine(pen, 0, 3, header.Width + 3, 3)
            pen = New PdfPen(Color.DarkBlue, 2.0F)
            g.DrawLine(pen, 0, header.Height - 3, header.Width, header.Height - 3)
            g.DrawLine(pen, 0, header.Height, header.Width, header.Height)

            'Add header template at the top.
            doc.Template.Top = header
        End Sub

        ''' <summary>
        ''' Draws footer to the PDF.
        ''' </summary>
        ''' <param name="doc"></param>
        ''' <param name="footerText"></param>
        Private Sub AddFooter(ByVal doc As PdfDocument, ByVal footerText As String)
            Dim rect As New RectangleF(0, 0, doc.Pages(0).GetClientSize().Width, 50)

            'Create a page template
            Dim footer As New PdfPageTemplateElement(rect)
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 6, PdfFontStyle.Bold)

            Dim brush As New PdfSolidBrush(Color.Gray)

            Dim format As New PdfStringFormat()
            format.Alignment = PdfTextAlignment.Center
            format.LineAlignment = PdfVerticalAlignment.Middle
            footer.Graphics.DrawString(footerText, font, brush, New RectangleF(0, 18, footer.Width, footer.Height), format)

            format = New PdfStringFormat()
            format.Alignment = PdfTextAlignment.Right
            format.LineAlignment = PdfVerticalAlignment.Bottom

            'Create page number field
            Dim pageNumber As New PdfPageNumberField(font, brush)

            'Create page count field
            Dim count As New PdfPageCountField(font, brush)

            Dim compositeField As New PdfCompositeField(font, brush, "Page {0} of {1}", pageNumber, count)
            compositeField.Bounds = footer.Bounds
            compositeField.Draw(footer.Graphics, New PointF(470, 40))

            'Add the footer template at the bottom
            doc.Template.Bottom = footer
        End Sub
        ''' <summary>
        ''' Gets the full path of the PDF template or image.
        ''' </summary>
        ''' <param name="fileName">Name of the file</param>
        ''' <param name="image">True if image</param>
        ''' <returns>Path of the file</returns>
        Private Function GetFullTemplatePath(ByVal fileName As String, ByVal image As Boolean) As String
            Dim fullPath As String = "..\..\..\..\..\..\..\..\..\Common\"
            Dim folder As String
            If image Then
                folder = "Images"
            Else
                folder = "Data"
            End If
            Return String.Format("{0}{1}\PDF\{2}", fullPath, folder, fileName)
        End Function
#End Region
    End Class
End Namespace
