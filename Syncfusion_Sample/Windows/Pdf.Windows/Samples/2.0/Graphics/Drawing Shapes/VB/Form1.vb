#Region "Copyright Syncfusion Inc. 2001 - 2007"
'
'  Copyright Syncfusion Inc. 2001 - 2007. All rights reserved.
'
'  Use of this code is subject to the terms of our license.
'  A copy of the current license can be obtained at any time by e-mailing
'  licensing@syncfusion.com. Re-distribution in any form is strictly
'  prohibited. Any infringement will be prosecuted under applicable laws. 
'
#End Region


Imports Microsoft.VisualBasic
Imports System
Imports System.Drawing
Imports System.Drawing.Imaging
Imports System.Collections
Imports System.ComponentModel
Imports System.Windows.Forms
Imports System.Data
Imports Syncfusion.Pdf
Imports Syncfusion.Pdf.Graphics

Namespace EssentialPDFSamples
	''' <summary>
	''' Summary description for Form1.
	''' </summary>
    Public Class Form1 : Inherits System.Windows.Forms.Form
#Region "Private Members"
        Private WithEvents button1 As System.Windows.Forms.Button
        Private label1 As System.Windows.Forms.Label
        Private i As Integer
        Private WithEvents PictureBox3 As System.Windows.Forms.PictureBox
        ''' <summary>
        ''' Required designer variable.
        ''' </summary>
        Private components As System.ComponentModel.Container = Nothing
#End Region

#Region "Constructor"
        Public Sub New()
            '
            ' Required for Windows Form Designer support
            '
            InitializeComponent()
            '
            ' TODO: Add any constructor code after InitializeComponent call
            ''
        End Sub

        ''' <summary>
        ''' Clean up any resources being used.
        ''' </summary>
        Protected Overloads Overrides Sub Dispose(ByVal disposing As Boolean)
            If disposing Then
                If Not components Is Nothing Then
                    components.Dispose()
                End If
            End If
            MyBase.Dispose(disposing)
        End Sub

#Region "Windows Form Designer generated code"
        ''' <summary>
        ''' Required method for Designer support - do not modify
        ''' the contents of this method with the code editor.
        ''' </summary>
        Private Sub InitializeComponent()
            Dim resources As System.ComponentModel.ComponentResourceManager = New System.ComponentModel.ComponentResourceManager(GetType(Form1))
            Me.button1 = New System.Windows.Forms.Button
            Me.label1 = New System.Windows.Forms.Label
            Me.PictureBox3 = New System.Windows.Forms.PictureBox
            CType(Me.PictureBox3, System.ComponentModel.ISupportInitialize).BeginInit()
            Me.SuspendLayout()
            '
            'button1
            '
            Me.button1.Anchor = CType((System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Right), System.Windows.Forms.AnchorStyles)
            Me.button1.BackColor = System.Drawing.Color.Transparent
            Me.button1.FlatAppearance.BorderColor = System.Drawing.Color.FromArgb(CType(CType(255, Byte), Integer), CType(CType(192, Byte), Integer), CType(CType(128, Byte), Integer))
            Me.button1.FlatAppearance.MouseDownBackColor = System.Drawing.Color.FromArgb(CType(CType(255, Byte), Integer), CType(CType(224, Byte), Integer), CType(CType(192, Byte), Integer))
            Me.button1.FlatAppearance.MouseOverBackColor = System.Drawing.Color.FromArgb(CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer), CType(CType(192, Byte), Integer))
            Me.button1.Image = CType(resources.GetObject("button1.Image"), System.Drawing.Image)
            Me.button1.ImageAlign = System.Drawing.ContentAlignment.MiddleRight
            Me.button1.Location = New System.Drawing.Point(282, 163)
            Me.button1.Name = "button1"
            Me.button1.Size = New System.Drawing.Size(75, 23)
            Me.button1.TabIndex = 0
            Me.button1.Text = "PDF"
            Me.button1.UseVisualStyleBackColor = False
            '
            'label1
            '
            Me.label1.Anchor = CType(((System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Left) _
                        Or System.Windows.Forms.AnchorStyles.Right), System.Windows.Forms.AnchorStyles)
            Me.label1.Font = New System.Drawing.Font("Verdana", 8.25!, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, CType(0, Byte))
            Me.label1.ForeColor = System.Drawing.Color.FromArgb(CType(CType(0, Byte), Integer), CType(CType(0, Byte), Integer), CType(CType(64, Byte), Integer))
            Me.label1.Location = New System.Drawing.Point(-1, 92)
            Me.label1.Name = "label1"
            Me.label1.Size = New System.Drawing.Size(372, 67)
            Me.label1.TabIndex = 1
            Me.label1.Text = "Click the button to view an PDF document generated by Essential PDF. Please note " & _
                "that Adobe Reader or its equivalent is required to view the resultant document."
            '
            'PictureBox3
            '
            Me.PictureBox3.Dock = System.Windows.Forms.DockStyle.Top
            Me.PictureBox3.Image = CType(resources.GetObject("PictureBox3.Image"), System.Drawing.Image)
            Me.PictureBox3.Location = New System.Drawing.Point(0, 0)
            Me.PictureBox3.Name = "PictureBox3"
            Me.PictureBox3.Size = New System.Drawing.Size(370, 89)
            Me.PictureBox3.TabIndex = 71
            Me.PictureBox3.TabStop = False
            '
            'Form1
            '
            Me.AutoScaleBaseSize = New System.Drawing.Size(5, 13)
            Me.BackColor = System.Drawing.Color.White
            Me.ClientSize = New System.Drawing.Size(370, 208)
            Me.Controls.Add(Me.PictureBox3)
            Me.Controls.Add(Me.button1)
            Me.Controls.Add(Me.label1)
            Me.FormBorderStyle = System.Windows.Forms.FormBorderStyle.FixedSingle
            Me.Icon = CType(resources.GetObject("$this.Icon"), System.Drawing.Icon)
            Me.MaximizeBox = False
            Me.MinimizeBox = False
            Me.Name = "Form1"
            Me.StartPosition = System.Windows.Forms.FormStartPosition.CenterScreen
            Me.Text = "Drawing Shapes"
            CType(Me.PictureBox3, System.ComponentModel.ISupportInitialize).EndInit()
            Me.ResumeLayout(False)

        End Sub
#End Region

        ''' <summary>
        ''' The main entry point for the application.
        ''' </summary>
        <STAThread()> _
        Shared Sub Main()
            Application.EnableVisualStyles()
            Application.Run(New Form1())
        End Sub
#End Region

#Region "Events"
        Private Sub button1_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles button1.Click
            ' Create a new instance of PdfDocument class.
            Dim document As New PdfDocument()

            ' Add a new page to the document.
            Dim page As PdfPage = document.Pages.Add()

            ' Obtain PdfGraphics object.
            Dim g As PdfGraphics = page.Graphics

            ' Set font
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 14, PdfFontStyle.Bold)

            Dim textBrush As PdfBrush = PdfBrushes.DarkBlue

            '			#Region "Polygon"
            Dim pen As New PdfPen(PdfBrushes.Brown, 10.0F)
            Dim p1 As New PointF(5, 10)
            Dim p2 As New PointF(5, 10)
            Dim p3 As New PointF(60, 70)
            Dim p4 As New PointF(40, 70)

            Dim points() As PointF = {p1, p2, p3, p4}

            Dim pointNum As Integer = 16
            points = New PointF(pointNum - 1) {}
            Dim f As Double = 360.0 / pointNum * Math.PI / 180.0
            Const r As Double = 100
            Dim center As New PointF(140, 140)

            For i = 0 To pointNum - 1
                Dim p As New PointF()
                Dim theta As Double = i * f

                p.Y = CSng(Math.Sin(theta) * r + center.Y)
                p.X = CSng(Math.Cos(theta) * r + center.X)

                points(i) = p
            Next i

            Dim sGreenBrush As PdfBrush = PdfBrushes.Green
            g.DrawString("Polygon", font, textBrush, New PointF(50, 0))

            ' Draw Polygon.
            g.DrawPolygon(pen, sGreenBrush, points)

            '			#End Region

            '			#Region " Pie"
            Dim rect As New RectangleF(20, 280, 200, 200)

            g.DrawString("Pie shape", font, textBrush, New PointF(50, 250))

            ' Draw Pie
            g.DrawPie(pen, sGreenBrush, rect, 180, 60)
            g.DrawPie(pen, sGreenBrush, rect, 300, 60)
            g.DrawPie(pen, sGreenBrush, rect, 60, 60)
            '			#End Region

            '			#Region "Arc"

            g.DrawString("Arcs", font, textBrush, New PointF(330, 0))
            pen.LineCap = PdfLineCap.Round
            rect = New RectangleF(310, 40, 200, 200)
            g.DrawArc(pen, rect, 0, 90)

            pen.Color = Color.DarkGreen
            rect.X -= 10
            g.DrawArc(pen, rect, 90, 90)

            pen.Color = Color.Brown
            rect.Y -= 10
            g.DrawArc(pen, rect, 180, 90)

            pen.Color = Color.DarkGreen
            rect.X += 10
            g.DrawArc(pen, rect, 270, 90)

            '			#End Region

            '			#Region "Rectangle"
            rect = New RectangleF(310, 280, 200, 100)
            pen.Color = Color.Brown
            g.DrawString("Simple Rectangle", font, textBrush, New PointF(310, 255))

            ' Draw rectangle using PdfPen and PdfBrush.
            g.DrawRectangle(pen, sGreenBrush, rect)
            '			#End Region

            '			#Region "Ellipse"

            ' Draw a simple ellipse.
            rect = New RectangleF(80, 520, 100, 200)
            Dim lgBrush As New PdfLinearGradientBrush(rect, Color.DarkGreen, Color.White, 90)
            g.DrawString("Ellipse with Gradient", font, textBrush, New PointF(50, 490))
            g.DrawEllipse(pen, lgBrush, rect)

            ' Ellipse with pagination.
            rect = New RectangleF(270, 400, 160, 1000)
            g.DrawString("Shape with pagination", font, textBrush, New PointF(300, 390))

            ' Create layout format for pagination.
            Dim format As New PdfLayoutFormat()
            format.Break = PdfLayoutBreakType.FitPage
            format.Layout = PdfLayoutType.Paginate

            Dim ellipse As New PdfEllipse(rect)
            ellipse.Brush = PdfBrushes.Brown
            ellipse.Draw(page, 20, 20, format)

            ellipse.Brush = PdfBrushes.DarkGreen
            ellipse.Draw(page, 40, 40, format)

            '			#End Region

            '			#Region "Transparency"
            ' Draw transparent rectangles.
            page = document.Pages(1)
            g = page.Graphics
            g.DrawString("Transparent Rectangles", font, textBrush, New PointF(50, 80))

            Dim gBrush As PdfBrush = PdfBrushes.DarkGreen
            pen = New PdfPen(Color.Black)
            rect = New RectangleF(10, 150, 100, 100)
            g.DrawRectangle(pen, gBrush, rect)

            gBrush = New PdfSolidBrush(Color.Brown)
            rect.X += 20
            rect.Y += 20
            pen = New PdfPen(Color.Brown)
            g.SetTransparency(0.7F)
            g.DrawRectangle(pen, gBrush, rect)

            rect.X += 20
            rect.Y += 20
            gBrush = New PdfLinearGradientBrush(rect, Color.DarkGreen, Color.Brown, PdfLinearGradientMode.BackwardDiagonal)
            g.SetTransparency(0.5F)
            g.DrawRectangle(pen, gBrush, rect)

            rect.X += 20
            rect.Y += 20
            pen = New PdfPen(Color.Blue)
            gBrush = New PdfSolidBrush(Color.Gray)
            g.SetTransparency(0.25F)
            g.DrawRectangle(pen, gBrush, rect)

            rect.X += 20
            rect.Y += 20
            pen = New PdfPen(Color.Black)
            gBrush = New PdfSolidBrush(Color.Green)
            g.SetTransparency(0.1F)
            g.DrawRectangle(pen, sGreenBrush, rect)

            '			#End Region

            '			#Region "Rectangle with Color space"

            ' Add a new page to the document.
            page = document.Pages.Add()
            g = page.Graphics

            document.ColorSpace = CType(i, PdfColorSpace)

            ' Solid Brush
            gBrush = New PdfSolidBrush(Color.Red)
            Dim location As New PointF(10, 50)
            DrawRectangles(location, g, font, gBrush, pen, document)

            ' Linear Gradient
            location = New PointF(180, 50)
            Dim point2 As PointF = location
            point2.X += 100
            gBrush = New PdfLinearGradientBrush(location, point2, Color.Blue, Color.Red)
            DrawRectangles(location, g, font, gBrush, pen, document)

            ' Radial Gradient
            location = New PointF(360, 50)
            point2 = location
            point2.Y += 250
            point2.X = 150
            gBrush = New PdfRadialGradientBrush(point2, 210, point2, 400, Color.Blue, Color.Red)
            TryCast(gBrush, PdfRadialGradientBrush).Extend = PdfExtend.End
            DrawRectangles(location, g, font, gBrush, pen, document)

            g.DrawString("Rectangle with color spaces", font, textBrush, New PointF(150, 0))
            '			#End Region

            ' Save and close the document.
            document.Save("Sample.pdf")
            document.Close(True)

            'Message box confirmation to view the created PDF document.
            If MessageBox.Show("Do you want to view the PDF file?", "PDF File Created", MessageBoxButtons.YesNo, MessageBoxIcon.Information) = DialogResult.Yes Then
                'Launching the PDF file using the default Application.[Acrobat Reader]
                System.Diagnostics.Process.Start("Sample.pdf")
                Me.Close()
            Else
                ' Exit
                Me.Close()
            End If
        End Sub
#End Region

#Region "Helpher Methods"
        ''' <summary>
        ''' Draw rectangle in the document.
        ''' </summary>
        Private Sub DrawRectangles(ByVal startPoint As PointF, ByVal g As PdfGraphics, ByVal font As PdfFont, ByVal brush As PdfBrush, ByVal pen As PdfPen, ByVal doc As PdfDocument)
            Dim textBrush As PdfBrush = New PdfSolidBrush(Color.Black)
            Dim rect As RectangleF = New RectangleF(startPoint.X, startPoint.Y, 100, 100)

            g.Save()

            g.DrawString("Default: " & doc.ColorSpace.ToString(), font, textBrush, rect.Location)
            rect.Y += 20
            g.DrawRectangle(pen, brush, rect)
            rect.Y += 106

            doc.ColorSpace = PdfColorSpace.RGB

            g.DrawString("RGB color space.", font, textBrush, rect.Location)
            rect.Y += 20
            g.DrawRectangle(pen, brush, rect)
            rect.Y += 106

            doc.ColorSpace = PdfColorSpace.CMYK

            g.DrawString("CMYK color space.", font, textBrush, rect.Location)
            rect.Y += 20
            g.DrawRectangle(pen, brush, rect)
            rect.Y += 106

            doc.ColorSpace = PdfColorSpace.GrayScale

            g.DrawString("Gray scale color space.", font, textBrush, rect.Location)
            rect.Y += 20
            g.DrawRectangle(pen, brush, rect)
            rect.Y += 106

            g.Restore()
        End Sub
#End Region
    End Class
End Namespace
