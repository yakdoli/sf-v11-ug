<h1>Drawing Shapes</h1>

<p>Essential PDF has a comprehensive set of APIs that can be used for drawing a 
variety of shapes, like rectangles, circles, arcs, curves, etc.</p>
<p>Essential PDF supports drawing shapes with different color spaces, 
according to the needs of the user. Shapes can be filled using different 
types of brushes, like gradient brushes, tiling brushes, etc. You can also make the 
shapes transparent.</p>

<h3>Features</h3>
<ul>
<ul>
<li>Drawing Shapes </li>
<li>Graphic Elements Pagination</li>
<li>Transparent Drawing </li>
<li>Color Spaces </li>
</ul>

<p>The general class, <strong>PDFGraphics</strong>, allows you to draw a wide range of primitives, like lines, curves, paths, and text. For each operation, there is a set of methods called
<strong>Draw</strong><primitive><strong>() (e.g. DrawLine)</strong>. Each set of methods accepts parameters specific to each primitive type (e.g., pen, brush, boundaries, etc.). If 
<em>pen</em> is used, the primitive will be drawn, and if <em>brush</em> is used, the primitive will be filled.</p>
<p>Given below is an image of the output.</p>
<div align=center><img src="images/DrawingShapes1.png" alt="PDF" title="" /></div>

<p>Here is the code snippet used to draw shapes:</p>
<pre>
//Draws polygon with pen and brush.
PdfGraphics g = page.Graphics; 
PdfPen pen = new PdfPen(Color.Brown);
PdfSolidBrush brush = new PdfSolidBrush(Color.Green);
g.DrawPolygon(pen, brush, points);
</pre>

<p>Transparency is used for setting the rendering mode in Essential PDF. The level of transparency can also be set according to the user's needs. It can be set by<strong>
</strong>the<strong> SetTransparency</strong> method of <strong>PDFGraphics</strong>.</p>
<p></br>
These are the following blend modes supported by Essential PDF: Normal, Multiply, Screen, Overlay, Darken, Lighten, Color Dodge, Color Burn, Hard Light, Soft Light, Difference, and Exclusion.</p>

<p>Here is the code snippet to set the transparency:</p>
<pre>
//Sets transparency
g.SetTransparency(0.7f);
</pre>

<p>Pagination is the capability of elements to be shared by more than one page. 
The base class for these kind of elements is <strong>LayoutElement</strong>.</p>

<p>Here is the code snippet used to set the layout property for pagination:</p>
<pre>

PdfEllipse ellipse = new PdfEllipse(rect);
//Set layout property to make the element break across the pages.
PdfLayoutFormat format = new PdfLayoutFormat();
format.Break = PdfLayoutBreakType.FitPage;
format.Layout = PdfLayoutType.Paginate;
ellipse.Brush = PdfBrushes.Brown;
//Draw ellipse.
ellipse.Draw(page, 20, 20, format);
</pre>

<p>For preparing your document, you might need colors in different color spaces. There are two ways of setting color spaces: on 
the document level and on the graphic level. This sample demonstrates graphic-level color spaces.

<p>Here is the code snippet used to set the CMYK color space at the graphic level.</p>

<pre>
// CMYK color space 
g.ColorSpace = ColorSpace.CMYK; 
g.DrawRectangle( pen, brush, rectangle );
</pre>
</ul>
<h3>
    Interactive Features</h3>
	
<Ul>
  <li>Click the PDF button to generate the Pdf document.</li>
  <li>Click Yes on the message box to view the generated Pdf file.</li>
  <li>The displayed PDF file was created using Essential PDF source code.</li>
  <li>All features in the preceding list are illustrated in this file.</li>
</Ul>
