#Region "Copyright Syncfusion Inc. 2001 - 2007"
'
'  Copyright Syncfusion Inc. 2001 - 2007. All rights reserved.
'
'  Use of this code is subject to the terms of our license.
'  A copy of the current license can be obtained at any time by e-mailing
'  licensing@syncfusion.com. Re-distribution in any form is strictly
'  prohibited. Any infringement will be prosecuted under applicable laws. 
'
#End Region


Imports Microsoft.VisualBasic
Imports System
Imports System.Drawing
Imports System.Drawing.Imaging
Imports System.Collections
Imports System.ComponentModel
Imports System.Windows.Forms
Imports System.Data
Imports Syncfusion.Pdf
Imports Syncfusion.Pdf.Graphics
Imports Syncfusion.Pdf.ColorSpace
Imports Syncfusion.Pdf.Functions
Imports System.IO

Namespace EssentialPDFSamples
	''' <summary>
	''' Summary description for Form1.
	''' </summary>
    Public Class Form1 : Inherits System.Windows.Forms.Form
#Region "Private Members"
        Private WithEvents button1 As System.Windows.Forms.Button
        Private label1 As System.Windows.Forms.Label
        Private WithEvents PictureBox3 As System.Windows.Forms.PictureBox

        ''' <summary>
        ''' Required designer variable.
        ''' </summary>
        Private components As System.ComponentModel.Container = Nothing
#End Region

#Region "Constructor"
        Public Sub New()
            '
            ' Required for Windows Form Designer support
            '
            InitializeComponent()
            '
            ' TODO: Add any constructor code after InitializeComponent call
            ''
        End Sub

        ''' <summary>
        ''' Clean up any resources being used.
        ''' </summary>
        Protected Overloads Overrides Sub Dispose(ByVal disposing As Boolean)
            If disposing Then
                If Not components Is Nothing Then
                    components.Dispose()
                End If
            End If
            MyBase.Dispose(disposing)
        End Sub

#Region "Windows Form Designer generated code"
        ''' <summary>
        ''' Required method for Designer support - do not modify
        ''' the contents of this method with the code editor.
        ''' </summary>
        Private Sub InitializeComponent()
            Dim resources As System.ComponentModel.ComponentResourceManager = New System.ComponentModel.ComponentResourceManager(GetType(Form1))
            Me.button1 = New System.Windows.Forms.Button
            Me.label1 = New System.Windows.Forms.Label
            Me.PictureBox3 = New System.Windows.Forms.PictureBox
            CType(Me.PictureBox3, System.ComponentModel.ISupportInitialize).BeginInit()
            Me.SuspendLayout()
            '
            'button1
            '
            Me.button1.Anchor = CType((System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Right), System.Windows.Forms.AnchorStyles)
            Me.button1.BackColor = System.Drawing.Color.Transparent
            Me.button1.FlatAppearance.BorderColor = System.Drawing.Color.FromArgb(CType(CType(255, Byte), Integer), CType(CType(192, Byte), Integer), CType(CType(128, Byte), Integer))
            Me.button1.FlatAppearance.MouseDownBackColor = System.Drawing.Color.FromArgb(CType(CType(255, Byte), Integer), CType(CType(224, Byte), Integer), CType(CType(192, Byte), Integer))
            Me.button1.FlatAppearance.MouseOverBackColor = System.Drawing.Color.FromArgb(CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer), CType(CType(192, Byte), Integer))
            Me.button1.Image = CType(resources.GetObject("button1.Image"), System.Drawing.Image)
            Me.button1.ImageAlign = System.Drawing.ContentAlignment.MiddleRight
            Me.button1.Location = New System.Drawing.Point(285, 161)
            Me.button1.Name = "button1"
            Me.button1.Size = New System.Drawing.Size(75, 23)
            Me.button1.TabIndex = 0
            Me.button1.Text = "PDF"
            Me.button1.UseVisualStyleBackColor = False
            '
            'label1
            '
            Me.label1.Anchor = CType(((System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Left) _
                        Or System.Windows.Forms.AnchorStyles.Right), System.Windows.Forms.AnchorStyles)
            Me.label1.Font = New System.Drawing.Font("Verdana", 8.25!, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, CType(0, Byte))
            Me.label1.ForeColor = System.Drawing.Color.FromArgb(CType(CType(0, Byte), Integer), CType(CType(0, Byte), Integer), CType(CType(64, Byte), Integer))
            Me.label1.Location = New System.Drawing.Point(-1, 92)
            Me.label1.Name = "label1"
            Me.label1.Size = New System.Drawing.Size(375, 67)
            Me.label1.TabIndex = 1
            Me.label1.Text = "Click the button to view an PDF document generated by Essential PDF. Please note " & _
                "that Adobe Reader or its equivalent is required to view the resultant document."
            '
            'PictureBox3
            '
            Me.PictureBox3.Dock = System.Windows.Forms.DockStyle.Top
            Me.PictureBox3.Image = CType(resources.GetObject("PictureBox3.Image"), System.Drawing.Image)
            Me.PictureBox3.Location = New System.Drawing.Point(0, 0)
            Me.PictureBox3.Name = "PictureBox3"
            Me.PictureBox3.Size = New System.Drawing.Size(373, 91)
            Me.PictureBox3.TabIndex = 71
            Me.PictureBox3.TabStop = False
            '
            'Form1
            '
            Me.AutoScaleBaseSize = New System.Drawing.Size(5, 13)
            Me.BackColor = System.Drawing.Color.White
            Me.ClientSize = New System.Drawing.Size(373, 206)
            Me.Controls.Add(Me.PictureBox3)
            Me.Controls.Add(Me.button1)
            Me.Controls.Add(Me.label1)
            Me.FormBorderStyle = System.Windows.Forms.FormBorderStyle.FixedSingle
            Me.Icon = CType(resources.GetObject("$this.Icon"), System.Drawing.Icon)
            Me.MaximizeBox = False
            Me.MinimizeBox = False
            Me.Name = "Form1"
            Me.StartPosition = System.Windows.Forms.FormStartPosition.CenterScreen
            Me.Text = "Graphic Brushes"
            CType(Me.PictureBox3, System.ComponentModel.ISupportInitialize).EndInit()
            Me.ResumeLayout(False)

        End Sub
#End Region

        ''' <summary>
        ''' The main entry point for the application.
        ''' </summary>
        <STAThread()> _
        Shared Sub Main()
            Application.EnableVisualStyles()
            Application.Run(New Form1())
        End Sub
#End Region

#Region "Events"
        Private Sub button1_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles button1.Click
            'Create a new instance of PdfDocument.
            Dim document As New PdfDocument()

            ' Change page size.
            document.PageSettings = New PdfPageSettings(New SizeF(300, 400))

            ' Add a new page to the document.
            Dim page As PdfPage = document.Pages.Add()
            Dim graphics As PdfGraphics = page.Graphics

            '			#Region "Graphic Brushes"
            Dim image As PdfImage = PdfImage.FromFile(GetFullTemplatePath("simple.jpg", True))
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.TimesRoman, 8.0F, PdfFontStyle.Bold)
            Dim textBrush As PdfBrush = PdfBrushes.Black

            graphics.DrawString("PDF Graphic Brushes", font, textBrush, New PointF(80, 10))

            '			#Region "SolidBrush"
            ' Draw ellipse with solid brush.
            Dim rectangle As New RectangleF(20, 20, 50, 50)
            Dim brush As New PdfSolidBrush(Color.Black)

            graphics.DrawEllipse(brush, rectangle)

            graphics.TranslateTransform(60, 0)
            brush = New PdfSolidBrush(Color.Green)
            graphics.DrawEllipse(brush, rectangle)

            graphics.TranslateTransform(60, 0)
            brush.Color = Color.Red
            graphics.DrawEllipse(brush, rectangle)
            '			#End Region

            '			#Region "TilingBrush"

            ' Draw ellipse with tiling brush.
            graphics.TranslateTransform(-120, 60)

            Dim tilingBrush As New PdfTilingBrush(New SizeF(10, 10))
            Dim rect As New RectangleF(0, 0, 10, 10)

            ' Draw image on to the tiling brush.
            tilingBrush.Graphics.DrawImage(image, rect)

            ' Draw ellipse using tiling brush.
            graphics.DrawEllipse(tilingBrush, rectangle)

            graphics.TranslateTransform(60, 0)
            tilingBrush = New PdfTilingBrush(rect)
            ' Draw shapes inside tiling brush.
            tilingBrush.Graphics.DrawEllipse(PdfPens.Yellow, rect)
            tilingBrush.Graphics.DrawLine(PdfPens.Green, 0, 0, 10, 10)
            tilingBrush.Graphics.DrawLine(PdfPens.Red, 0, 10, 10, 0)
            graphics.DrawEllipse(tilingBrush, rectangle)

            graphics.TranslateTransform(60, 0)
            rect = New RectangleF(0, 0, 20, 20)
            Dim tilingBrushNew As New PdfTilingBrush(rect)
            tilingBrushNew.Graphics.DrawEllipse(tilingBrush, rect)
            graphics.DrawEllipse(tilingBrushNew, rectangle)
            '			#End Region

            '			#Region "LinearGradientBrush"
            ' Draw ellipse with linear gradient brush.
            graphics.TranslateTransform(-120, 60)
            Dim color1 As PdfColor = Color.Red
            Dim color2 As PdfColor = Color.Yellow

            ' Create a new linear gradient brush.
            Dim gradientBrush As PdfGradientBrush = New PdfLinearGradientBrush(rectangle.Location, CType(rectangle.Size, PointF), color1, color2)

            ' Format before draw.
            gradientBrush.AntiAlias = False
            gradientBrush.Background = Color.Green
            graphics.DrawEllipse(gradientBrush, rectangle)

            graphics.TranslateTransform(60, 0)
            color2 = Color.Green
            gradientBrush = New PdfLinearGradientBrush(rectangle, color1, color2, 30.0F)
            gradientBrush.AntiAlias = True
            graphics.DrawEllipse(gradientBrush, rectangle)

            graphics.TranslateTransform(60, 0)
            color1 = Color.Yellow
            gradientBrush = New PdfLinearGradientBrush(rectangle, color1, color2, PdfLinearGradientMode.ForwardDiagonal)
            graphics.DrawEllipse(gradientBrush, rectangle)

            '			#End Region

            '			#Region "RadialGradientBrush"
            ' Draw ellipse with radial gradient brush.
            graphics.TranslateTransform(-120, 60)
            color1 = Color.Red
            color2 = Color.Yellow

            Dim point As New PointF(25, 25)

            ' Create a new radial gradient brush.
            gradientBrush = New PdfRadialGradientBrush(point, 50.0F, point, 5.0F, color1, color2)

            ' Format before draw.
            gradientBrush.AntiAlias = False
            gradientBrush.Background = Color.Green
            graphics.DrawEllipse(gradientBrush, rectangle)
            '			#End Region

            graphics.TranslateTransform(0, -180.0F)
            Dim onlyBrush As PdfBrush = New PdfSolidBrush(Color.Black)
            graphics.DrawString("PdfBrushes class", font, onlyBrush, New PointF(200, 10))

            Dim type As Type = GetType(PdfBrushes)
            Dim parameters() As Object = Nothing
            Dim properties() As System.Reflection.PropertyInfo = type.GetProperties()

            For i As Integer = 0 To properties.Length - 1
                onlyBrush = CType(properties(i).GetValue(Nothing, parameters), PdfSolidBrush)
                graphics.DrawRectangle(onlyBrush, New RectangleF(200, 30, 50, 2))
                graphics.TranslateTransform(0, 2)
            Next i
            '			#End Region

            '			#Region "PdfColorSpace"
            ' Add a new page to the document.
            page = document.Pages.Add()
            Dim g As PdfGraphics = page.Graphics

            'Set DeviceRGB Colorspace.
            document.ColorSpace = PdfColorSpace.RGB
            page.Graphics.DrawString("Device RGB", font, textBrush, New PointF(10, 20))
            Dim brush1 As PdfBrush = PdfBrushes.Green
            g.DrawRectangle(brush1, New RectangleF(20, 40, 30, 30))

            'Set DeviceCMYK Colorspace.
            document.ColorSpace = PdfColorSpace.CMYK
            page.Graphics.DrawString("Device CMYK", font, textBrush, New PointF(90, 20))
            g.DrawEllipse(brush1, New RectangleF(100, 40, 30, 30))

            'Set DeviceGray Colorspace.
            document.ColorSpace = PdfColorSpace.GrayScale
            page.Graphics.DrawString("Device Gray", font, textBrush, New PointF(170, 20))
            g.DrawPie(brush1, New RectangleF(180, 40, 30, 30), 0, 45)
            '			#End Region

            '			#Region "CIE Based Color Space"

            '			#Region "CalRGB Color"
            document.ColorSpace = PdfColorSpace.RGB

            ' Add a new page to the document.
            page = document.Pages.Add()
            g = page.Graphics
            g.DrawString("CalRGB Color", font, textBrush, New PointF(10, 20))

            rect = New RectangleF(20, 30, 30, 30)

            ' Create a new instance of PdfCalRGBColorSpace class.
            Dim calRgbCS As New PdfCalRGBColorSpace()
            calRgbCS.Gamma = New Double() {1.6, 1.1, 2.5}
            calRgbCS.Matrix = New Double() {1, 0, 0, 0, 1, 0, 0, 0, 1}
            calRgbCS.WhitePoint = New Double() {0.2, 1, 0.8}

            ' Create a new instance of PdfCalRGBColor class.
            Dim calRGBColor As New PdfCalRGBColor(calRgbCS)
            calRGBColor.Red = 0
            calRGBColor.Green = 1
            calRGBColor.Blue = 0

            ' Create brush from CalRGBColor.
            Dim colorSpaceBrush As PdfBrush = New PdfSolidBrush(calRGBColor)

            ' Draw using CalRGBColor brush.
            g.DrawRectangle(colorSpaceBrush, rect)
            '			#End Region

            '			#Region "CalGray Color"
            g.DrawString("CalGray Color", font, textBrush, New PointF(90, 20))
            rect = New RectangleF(100, 30, 30, 30)

            ' Create a new instance of PdfCalGrayColorSpace class.
            Dim calGrayCS As New PdfCalGrayColorSpace()
            calGrayCS.Gamma = 0.7
            calGrayCS.WhitePoint = New Double() {0.2, 1, 0.8}

            ' Create a new instance of PdfCalGrayColor class.
            Dim calGrayColor As New PdfCalGrayColor(calGrayCS)
            calGrayColor.Gray = 0.1

            ' Create brush from PdfCalGrayColor.
            colorSpaceBrush = New PdfSolidBrush(calGrayColor)

            ' Draw using PdfCalGrayColor brush.
            g.DrawRectangle(colorSpaceBrush, rect)
            '			#End Region

            '			#Region "Lab Color"
            g.DrawString("Lab Color", font, textBrush, New PointF(170, 20))

            rect = New RectangleF(180, 30, 30, 30)

            ' Create a new instance of PdfLabColorSpace class.
            Dim labCS As New PdfLabColorSpace()
            labCS.Range = New Double() {0.2, 1, 0.8, 23.5}
            labCS.WhitePoint = New Double() {0.2, 1, 0.8}

            ' Create a new instance of PdfLabColor class.
            Dim labColor As New PdfLabColor(labCS)
            labColor.L = 90
            labColor.A = 0.5
            labColor.B = 20

            ' Create brush using PdfLabColor.
            colorSpaceBrush = New PdfSolidBrush(labColor)

            ' Draw using PdfLabColor brush.
            g.DrawRectangle(colorSpaceBrush, rect)
            '			#End Region

            '			#Region "ICC Color"
            g.DrawString("ICC Color", font, textBrush, New PointF(10, 100))
            rect = New RectangleF(20, 110, 30, 30)

            Dim calRgbCS3 As New PdfCalRGBColorSpace()
            calRgbCS3.Gamma = New Double() {7.6, 5.1, 8.5}
            calRgbCS3.Matrix = New Double() {1, 0, 0, 0, 1, 0, 0, 0, 1}
            calRgbCS3.WhitePoint = New Double() {0.7, 1, 0.8}

            ' Read the ICC profile.
            Dim fs As New FileStream(GetFullTemplatePath("rgb.icc", False), FileMode.Open, FileAccess.Read)
            Dim profileData(fs.Length - 1) As Byte
            fs.Read(profileData, 0, profileData.Length)
            fs.Close()

            ' Create a new instance of PdfICCColorSpace class.
            Dim iccCS As New PdfICCColorSpace()

            ' Update colorspace.
            iccCS.ProfileData = profileData
            iccCS.AlternateColorSpace = calRgbCS3
            iccCS.ColorComponents = 3
            iccCS.Range = New Double() {0.0, 1.0, 0.0, 1.0, 0.0, 1.0}

            ' Create a new instance of PdfICCColor class.
            Dim iccColor As New PdfICCColor(iccCS)
            iccColor.ColorComponents = New Double() {1, 0, 1}

            ' Create brush using PdfICCColor.
            colorSpaceBrush = New PdfSolidBrush(iccColor)

            ' Draw using PdfICCColor brush.
            g.DrawRectangle(colorSpaceBrush, rect)
            '			#End Region

            '			#Region "Separation Color"
            g.DrawString("Separation Color", font, textBrush, New PointF(90, 100))
            rect = New RectangleF(100, 110, 30, 30)

            Dim [function] As New PdfExponentialInterpolationFunction(True)
            Dim numArray(2) As Single
            numArray(0) = 90.0F
            numArray(1) = 0.5F
            numArray(2) = 20.0F
            [function].C1 = numArray

            Dim calLabCS8 As New PdfLabColorSpace()
            calLabCS8.Range = New Double() {0.2, 1, 0.8, 23.5}
            calLabCS8.WhitePoint = New Double() {0.2, 1, 0.8}

            ' Create a new instance of PdfSeparationColorSpace class.
            Dim separationCS As New PdfSeparationColorSpace()
            ' Update colorspace.
            separationCS.AlternateColorSpaces = calLabCS8
            separationCS.TintTransform = [function]
            separationCS.Colorant = "PANTONE Orange 021 C"

            ' Create a new instance of PdfSeparationColor class.
            Dim separationColor As New PdfSeparationColor(separationCS)
            separationColor.Tint = 0.7

            ' Create brush using PdfSeparationColor.
            colorSpaceBrush = New PdfSolidBrush(separationColor)

            ' Draw using PdfSeparationColor brush.
            g.DrawRectangle(colorSpaceBrush, rect)
            '			#End Region

            '			#Region "Indexed Color"
            g.DrawString("Indexed Color", font, textBrush, New PointF(170, 100))
            rect = New RectangleF(180, 110, 30, 30)

            ' Create a new instance of PdfIndexedColorSpace class.
            Dim indexedCS As New PdfIndexedColorSpace()
            ' Update colorspace.
            indexedCS.BaseColorSpace = New PdfDeviceColorSpace(PdfColorSpace.RGB)
            indexedCS.MaxColorIndex = 3
            indexedCS.IndexedColorTable = New Byte() {150, 0, 222, 255, 0, 0, 0, 255, 0, 0, 0, 255}

            ' Create a new instance of PdfIndexedColor class.
            Dim indexedColor As New PdfIndexedColor(indexedCS)
            indexedColor.SelectColorIndex = 3

            ' Create brush from PdfIndexedColor.
            colorSpaceBrush = New PdfSolidBrush(indexedColor)

            ' Draw using PdfIndexedColor brush.
            g.DrawRectangle(colorSpaceBrush, rect)
            '			#End Region

            '			#End Region

            ' Save and close the document.
            document.Save("Sample.pdf")
            document.Close(True)

            'Message box confirmation to view the created PDF document.
            If MessageBox.Show("Do you want to view the PDF file?", "PDF File Created", MessageBoxButtons.YesNo, MessageBoxIcon.Information) = DialogResult.Yes Then
                'Launching the PDF file using the default Application.[Acrobat Reader]
                System.Diagnostics.Process.Start("Sample.pdf")
                Me.Close()
            Else
                ' Exit
                Me.Close()
            End If
        End Sub
#End Region

#Region "Helpher Methods"
        ''' <summary>
        ''' Gets the full path of the PDF template or image.
        ''' </summary>
        ''' <param name="fileName">Name of the file</param>
        ''' <param name="image">True if image</param>
        ''' <returns>Path of the file</returns>
        Private Function GetFullTemplatePath(ByVal fileName As String, ByVal image As Boolean) As String
            Dim fullPath As String = "..\..\..\..\..\..\..\..\..\Common\"
            Dim folder As String
            If image Then
                folder = "Images"
            Else
                folder = "Data"
            End If

            Return String.Format("{0}{1}\PDF\{2}", fullPath, folder, fileName)
        End Function
#End Region
    End Class
End Namespace
