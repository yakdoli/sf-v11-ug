#Region "Copyright Syncfusion Inc. 2001 - 2008"
'
'  Copyright Syncfusion Inc. 2001 - 2008. All rights reserved.
'
'  Use of this code is subject to the terms of our license.
'  A copy of the current license can be obtained at any time by e-mailing
'  licensing@syncfusion.com. Re-distribution in any form is strictly
'  prohibited. Any infringement will be prosecuted under applicable laws. 
'
#End Region


Imports Microsoft.VisualBasic
Imports System
Imports System.Drawing
Imports System.Drawing.Imaging
Imports System.Collections
Imports System.ComponentModel
Imports System.Windows.Forms
Imports System.Data
Imports Syncfusion.Pdf
Imports Syncfusion.Pdf.Graphics

Namespace EssentialPDFSamples
	''' <summary>
	''' Summary description for Form1.
	''' </summary>
    Public Class Form1 : Inherits System.Windows.Forms.Form
#Region "Private Members"
        Private WithEvents button1 As System.Windows.Forms.Button
        Private label1 As System.Windows.Forms.Label
        Private WithEvents PictureBox3 As System.Windows.Forms.PictureBox

        ''' <summary>
        ''' Required designer variable.
        ''' </summary>
        Private components As System.ComponentModel.Container = Nothing
#End Region

#Region "Constructor"
        Public Sub New()
            '
            ' Required for Windows Form Designer support
            '
            InitializeComponent()
            '
            ' TODO: Add any constructor code after InitializeComponent call
            ''
        End Sub

        ''' <summary>
        ''' Clean up any resources being used.
        ''' </summary>
        Protected Overloads Overrides Sub Dispose(ByVal disposing As Boolean)
            If disposing Then
                If Not components Is Nothing Then
                    components.Dispose()
                End If
            End If
            MyBase.Dispose(disposing)
        End Sub

#Region "Windows Form Designer generated code"
        ''' <summary>
        ''' Required method for Designer support - do not modify
        ''' the contents of this method with the code editor.
        ''' </summary>
        Private Sub InitializeComponent()
            Dim resources As System.ComponentModel.ComponentResourceManager = New System.ComponentModel.ComponentResourceManager(GetType(Form1))
            Me.button1 = New System.Windows.Forms.Button
            Me.label1 = New System.Windows.Forms.Label
            Me.PictureBox3 = New System.Windows.Forms.PictureBox
            CType(Me.PictureBox3, System.ComponentModel.ISupportInitialize).BeginInit()
            Me.SuspendLayout()
            '
            'button1
            '
            Me.button1.Anchor = CType((System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Right), System.Windows.Forms.AnchorStyles)
            Me.button1.BackColor = System.Drawing.Color.Transparent
            Me.button1.FlatAppearance.BorderColor = System.Drawing.Color.FromArgb(CType(CType(255, Byte), Integer), CType(CType(192, Byte), Integer), CType(CType(128, Byte), Integer))
            Me.button1.FlatAppearance.MouseDownBackColor = System.Drawing.Color.FromArgb(CType(CType(255, Byte), Integer), CType(CType(224, Byte), Integer), CType(CType(192, Byte), Integer))
            Me.button1.FlatAppearance.MouseOverBackColor = System.Drawing.Color.FromArgb(CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer), CType(CType(192, Byte), Integer))
            Me.button1.Image = CType(resources.GetObject("button1.Image"), System.Drawing.Image)
            Me.button1.ImageAlign = System.Drawing.ContentAlignment.MiddleRight
            Me.button1.Location = New System.Drawing.Point(284, 160)
            Me.button1.Name = "button1"
            Me.button1.Size = New System.Drawing.Size(75, 23)
            Me.button1.TabIndex = 0
            Me.button1.Text = "PDF"
            Me.button1.UseVisualStyleBackColor = False
            '
            'label1
            '
            Me.label1.Anchor = CType(((System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Left) _
                        Or System.Windows.Forms.AnchorStyles.Right), System.Windows.Forms.AnchorStyles)
            Me.label1.Font = New System.Drawing.Font("Verdana", 8.25!, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, CType(0, Byte))
            Me.label1.ForeColor = System.Drawing.Color.FromArgb(CType(CType(0, Byte), Integer), CType(CType(0, Byte), Integer), CType(CType(64, Byte), Integer))
            Me.label1.Location = New System.Drawing.Point(-1, 91)
            Me.label1.Name = "label1"
            Me.label1.Size = New System.Drawing.Size(374, 67)
            Me.label1.TabIndex = 1
            Me.label1.Text = "Click the button to view an PDF document generated by Essential PDF. Please note " & _
                "that Adobe Reader or its equivalent is required to view the resultant document."
            '
            'PictureBox3
            '
            Me.PictureBox3.Dock = System.Windows.Forms.DockStyle.Top
            Me.PictureBox3.Image = CType(resources.GetObject("PictureBox3.Image"), System.Drawing.Image)
            Me.PictureBox3.Location = New System.Drawing.Point(0, 0)
            Me.PictureBox3.Name = "PictureBox3"
            Me.PictureBox3.Size = New System.Drawing.Size(372, 91)
            Me.PictureBox3.TabIndex = 71
            Me.PictureBox3.TabStop = False
            '
            'Form1
            '
            Me.AutoScaleBaseSize = New System.Drawing.Size(5, 13)
            Me.BackColor = System.Drawing.Color.White
            Me.ClientSize = New System.Drawing.Size(372, 203)
            Me.Controls.Add(Me.PictureBox3)
            Me.Controls.Add(Me.button1)
            Me.Controls.Add(Me.label1)
            Me.FormBorderStyle = System.Windows.Forms.FormBorderStyle.FixedSingle
            Me.Icon = CType(resources.GetObject("$this.Icon"), System.Drawing.Icon)
            Me.MaximizeBox = False
            Me.MinimizeBox = False
            Me.Name = "Form1"
            Me.StartPosition = System.Windows.Forms.FormStartPosition.CenterScreen
            Me.Text = "Image Insertion"
            CType(Me.PictureBox3, System.ComponentModel.ISupportInitialize).EndInit()
            Me.ResumeLayout(False)

        End Sub
#End Region

        ''' <summary>
        ''' The main entry point for the application.
        ''' </summary>
        <STAThread()> _
        Shared Sub Main()
            Application.EnableVisualStyles()
            Application.Run(New Form1())
        End Sub
#End Region

#Region "Events"
        Private Sub button1_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles button1.Click
            ' Create a new instance of PdfDocument class.
            Dim document As New PdfDocument()

            ' Adjust page mode.
            document.ViewerPreferences.PageMode = PdfPageMode.FullScreen

            ' Set font.
            Dim font As New PdfTrueTypeFont(New Font("Tahoma", 22.0F, FontStyle.Bold), False)

            ' Create brush.
            Dim textBrush As New PdfSolidBrush(Color.DarkBlue)

            '			#Region "Image mask"
            ' Add a new section to the document.
            Dim section As PdfSection = document.Sections.Add()

            ' Add a new page to the newly created section.
            Dim page As PdfPage = section.Pages.Add()
            Dim g As PdfGraphics = page.Graphics
            g.DrawString("Image mask", font, textBrush, New PointF(10, 0))

            'Bitmap with Tiff image mask
            Dim image As PdfImage = New PdfBitmap(GetFullTemplatePath("256.tif", True))
            TryCast(image, PdfBitmap).Mask = New PdfImageMask(New PdfBitmap(GetFullTemplatePath("mask2.bmp", True)))
            g.DrawImage(image, 80, 40)
            '			#End Region

            '			#Region "Metafile"
            page = section.Pages.Add()
            g = page.Graphics
            g.DrawString("Metafile", font, textBrush, New PointF(10, 0))

            ' Draw metafile
            Dim metafile As New PdfMetafile(GetFullTemplatePath("metachart.emf", True))
            g.DrawImage(metafile, New PointF(0, 50))
            '			#End Region

            '			#Region "Image Pagination"
            g.DrawString("Image Pagination", font, textBrush, New PointF(10, 360))

            image = New PdfBitmap(GetFullTemplatePath("Autumn Leaves.jpg", True))

            ' Create a new instance of PdfLayoutFormat class.
            Dim format As New PdfLayoutFormat()

            ' Set layout type as paginate.
            format.Layout = PdfLayoutType.Paginate

            ' Draw image.
            image.Draw(page, New RectangleF(0, 400, 400, -1), format)
            '			#End Region

            '			#Region "Multiframe Tiff"
            Dim tiffImage As New PdfBitmap(GetFullTemplatePath("Image.tiff", True))

            Dim frameCount As Integer = tiffImage.FrameCount

            For i As Integer = 0 To frameCount - 1
                ' Every frame in a new page.
                page = section.Pages.Add()
                section.PageSettings.Margins.All = 0
                g = page.Graphics

                ' Set the acive frame.
                tiffImage.ActiveFrame = i

                ' Draw active frame.
                g.DrawImage(tiffImage, New RectangleF(PointF.Empty, g.ClientSize))

                If i = 0 Then
                    g.DrawString("Multiframe Tiff Image", font, textBrush, New PointF(10, 10))
                End If
            Next i
            '			#End Region

            '			#Region "Gif"
            page = section.Pages.Add()
            g = page.Graphics

            ' Draw gif image.
            image = New PdfBitmap(GetFullTemplatePath("Ani.gif", True))
            g.DrawImage(image, 0, 0, g.ClientSize.Width, image.Height)

            g.DrawString("Gif Image", font, textBrush, New PointF(10, 0))

            '			#End Region

            section.PageSettings.Transition.PageDuration = 1
            section.PageSettings.Transition.Duration = 1
            section.PageSettings.Transition.Style = PdfTransitionStyle.Fly

            ' Save and close the document.
            document.Save("Sample.pdf")
            document.Close(True)

            'Message box confirmation to view the created PDF document.
            If MessageBox.Show("Do you want to view the PDF file?", "PDF File Created", MessageBoxButtons.YesNo, MessageBoxIcon.Information) = DialogResult.Yes Then
                'Launching the PDF file using the default Application.[Acrobat Reader]
                System.Diagnostics.Process.Start("Sample.pdf")
                Me.Close()
            Else
                ' Exit
                Me.Close()
            End If
        End Sub
#End Region

#Region "Helpher Methods"
        ''' <summary>
        ''' Gets the full path of the PDF template or image.
        ''' </summary>
        ''' <param name="fileName">Name of the file</param>
        ''' <param name="image">True if image</param>
        ''' <returns>Path of the file</returns>
        Private Function GetFullTemplatePath(ByVal fileName As String, ByVal image As Boolean) As String
            Dim fullPath As String = "..\..\..\..\..\..\..\..\..\Common\"
            Dim folder As String
            If image Then
                folder = "Images"
            Else
                folder = "Data"
            End If

            Return String.Format("{0}{1}\PDF\{2}", fullPath, folder, fileName)
        End Function
#End Region
    End Class
End Namespace
