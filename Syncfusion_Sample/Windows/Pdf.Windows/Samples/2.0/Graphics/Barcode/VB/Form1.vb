#Region "Copyright Syncfusion Inc. 2001 - 2008"
'
'  Copyright Syncfusion Inc. 2001 - 2008. All rights reserved.
'
'  Use of this code is subject to the terms of our license.
'  A copy of the current license can be obtained at any time by e-mailing
'  licensing@syncfusion.com. Re-distribution in any form is strictly
'  prohibited. Any infringement will be prosecuted under applicable laws. 
'
#End Region


Imports Microsoft.VisualBasic
Imports System
Imports System.Drawing
Imports System.Drawing.Imaging
Imports System.Collections
Imports System.ComponentModel
Imports System.Windows.Forms
Imports System.Data
Imports Syncfusion.Pdf
Imports Syncfusion.Pdf.Graphics
Imports Syncfusion.Pdf.Barcode

Namespace EssentialPDFSamples
	''' <summary>
	''' Summary description for Form1.
	''' </summary>
	Public Class Form1
        Inherits System.Windows.Forms.Form
#Region "PrivateMembers"
        Private WithEvents button1 As System.Windows.Forms.Button
        Private label1 As System.Windows.Forms.Label
        Private WithEvents PictureBox3 As System.Windows.Forms.PictureBox

        ''' <summary>
        ''' Required designer variable.
        ''' </summary>
        Private components As System.ComponentModel.Container = Nothing
#End Region

#Region "Constructor"
        Public Sub New()
            '
            ' Required for Windows Form Designer support
            '
            InitializeComponent()
            Application.EnableVisualStyles()
            '
            ' TODO: Add any constructor code after InitializeComponent call
            '
        End Sub

        ''' <summary>
        ''' Clean up any resources being used.
        ''' </summary>
        Protected Overloads Overrides Sub Dispose(ByVal disposing As Boolean)
            If disposing Then
                If Not components Is Nothing Then
                    components.Dispose()
                End If
            End If
            MyBase.Dispose(disposing)
        End Sub

#Region "Windows Form Designer generated code"
        ''' <summary>
        ''' Required method for Designer support - do not modify
        ''' the contents of this method with the code editor.
        ''' </summary>
        Private Sub InitializeComponent()
            Dim resources As System.ComponentModel.ComponentResourceManager = New System.ComponentModel.ComponentResourceManager(GetType(Form1))
            Me.button1 = New System.Windows.Forms.Button
            Me.label1 = New System.Windows.Forms.Label
            Me.PictureBox3 = New System.Windows.Forms.PictureBox
            CType(Me.PictureBox3, System.ComponentModel.ISupportInitialize).BeginInit()
            Me.SuspendLayout()
            '
            'button1
            '
            Me.button1.Anchor = CType((System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Right), System.Windows.Forms.AnchorStyles)
            Me.button1.BackColor = System.Drawing.Color.Transparent
            Me.button1.FlatAppearance.BorderColor = System.Drawing.Color.FromArgb(CType(CType(255, Byte), Integer), CType(CType(192, Byte), Integer), CType(CType(128, Byte), Integer))
            Me.button1.FlatAppearance.MouseDownBackColor = System.Drawing.Color.FromArgb(CType(CType(255, Byte), Integer), CType(CType(224, Byte), Integer), CType(CType(192, Byte), Integer))
            Me.button1.FlatAppearance.MouseOverBackColor = System.Drawing.Color.FromArgb(CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer), CType(CType(192, Byte), Integer))
            Me.button1.Image = CType(resources.GetObject("button1.Image"), System.Drawing.Image)
            Me.button1.ImageAlign = System.Drawing.ContentAlignment.MiddleRight
            Me.button1.Location = New System.Drawing.Point(286, 158)
            Me.button1.Name = "button1"
            Me.button1.Size = New System.Drawing.Size(75, 24)
            Me.button1.TabIndex = 0
            Me.button1.Text = "PDF"
            Me.button1.UseVisualStyleBackColor = False
            '
            'label1
            '
            Me.label1.Font = New System.Drawing.Font("Verdana", 8.25!, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, CType(0, Byte))
            Me.label1.ForeColor = System.Drawing.Color.FromArgb(CType(CType(0, Byte), Integer), CType(CType(0, Byte), Integer), CType(CType(64, Byte), Integer))
            Me.label1.Location = New System.Drawing.Point(0, 89)
            Me.label1.Name = "label1"
            Me.label1.Size = New System.Drawing.Size(373, 69)
            Me.label1.TabIndex = 1
            Me.label1.Text = "Click the button to view an PDF document generated by Essential PDF. Please note " & _
                "that Adobe Reader or its equivalent is required to view the resultant document."
            '
            'PictureBox3
            '
            Me.PictureBox3.Dock = System.Windows.Forms.DockStyle.Top
            Me.PictureBox3.Image = CType(resources.GetObject("PictureBox3.Image"), System.Drawing.Image)
            Me.PictureBox3.Location = New System.Drawing.Point(0, 0)
            Me.PictureBox3.Name = "PictureBox3"
            Me.PictureBox3.Size = New System.Drawing.Size(373, 89)
            Me.PictureBox3.TabIndex = 71
            Me.PictureBox3.TabStop = False
            '
            'Form1
            '
            Me.AutoScaleBaseSize = New System.Drawing.Size(5, 13)
            Me.BackColor = System.Drawing.Color.White
            Me.ClientSize = New System.Drawing.Size(373, 196)
            Me.Controls.Add(Me.PictureBox3)
            Me.Controls.Add(Me.button1)
            Me.Controls.Add(Me.label1)
            Me.FormBorderStyle = System.Windows.Forms.FormBorderStyle.FixedSingle
            Me.Icon = CType(resources.GetObject("$this.Icon"), System.Drawing.Icon)
            Me.MaximizeBox = False
            Me.MinimizeBox = False
            Me.Name = "Form1"
            Me.StartPosition = System.Windows.Forms.FormStartPosition.CenterScreen
            Me.Text = "Barcode"
            CType(Me.PictureBox3, System.ComponentModel.ISupportInitialize).EndInit()
            Me.ResumeLayout(False)

        End Sub
#End Region

        ''' <summary>
        ''' The main entry point for the application.
        ''' </summary>
        <STAThread()> _
        Shared Sub Main()
            Application.Run(New Form1())
        End Sub
#End Region

#Region "Events"
        Private Sub button1_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles button1.Click
            'Create a new instance of PdfDocument.
            Dim document As New PdfDocument()

            'Add a new page to the document.
            Dim page As PdfPage = document.Pages.Add()

            'Create Pdf graphics for the page
            Dim g As PdfGraphics = page.Graphics

            'Create a solid brush
            Dim brush As PdfBrush = PdfBrushes.Black

            'Set the font
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 15.0F, PdfFontStyle.Bold)

            Dim width As Single = page.GetClientSize().Width

            ' Draw String
            g.DrawString("1D/Linear Barcodes", font, brush, New PointF(150, 10))

            ' Set string format.
            Dim format As New PdfStringFormat()
            format.WordWrap = PdfWordWrapType.Word

'			#Region "1D Barcode"

'			#Region "Code39"
			' Drawing Code39 barcode
			Dim barcode As New PdfCode39Barcode()

			' Setting height of the barcode
			barcode.BarHeight = 45
			barcode.Text = "CODE39$"

			'Printing barcode on to the Pdf.
			barcode.Draw(page, New PointF(25, 70))

			font = New PdfStandardFont(PdfFontFamily.TimesRoman, 9, PdfFontStyle.Regular)

			g.DrawString("Type : Code39", font, brush, New PointF(200, 80))
			g.DrawString("Allowed Characters : 0-9, A-Z,a dash(-),a dot(.),$,/,+,%, SPACE", font, brush, New PointF(200, 100))

			Dim pen As New PdfPen(brush, 0.5f)
			g.DrawLine(pen, New PointF(0, 150), New PointF(width, 150))
'			#End Region

'			#Region "Code39Extended"
			' Drawing Code39Extended barcode
			Dim barcodeExt As New PdfCode39ExtendedBarcode()

			' Setting height of the barcode
			barcodeExt.BarHeight = 45
			barcodeExt.Text = "CODE39Ext"

			'Printing barcode on to the Pdf.
			barcodeExt.Draw(page, New PointF(25, 200))

			font = New PdfStandardFont(PdfFontFamily.TimesRoman, 9, PdfFontStyle.Regular)

			g.DrawString("Type : Code39Ext", font, brush, New PointF(200, 210))
			g.DrawString("Allowed Characters : 0-9 A-Z a-z ", font, brush, New PointF(200, 230))

			g.DrawLine(pen, New PointF(0, 270), New PointF(width, 270))
'			#End Region

'			#Region "Code11Barcode"
			' Drawing Code11  barcode
			Dim barcode11 As New PdfCode11Barcode()

			' Setting height of the barcode
			barcode11.BarHeight = 45
			barcode11.Text = "012345678"
			barcode11.EncodeStartStopSymbols = True

			'Printing barcode on to the Pdf.
			barcode11.Draw(page, New PointF(25, 300))

			font = New PdfStandardFont(PdfFontFamily.TimesRoman, 9, PdfFontStyle.Regular)

			g.DrawString("Type : Code 11", font, brush, New PointF(200, 310))
			g.DrawString("Allowed Characters : 0-9, a dash(-) ", font, brush, New PointF(200, 330))

			g.DrawLine(pen, New PointF(0, 370), New PointF(width, 370))
'			#End Region

'			#Region "Codabar"
			' Drawing CodaBarcode
			Dim codabar As New PdfCodabarBarcode()

			' Setting height of the barcode
			codabar.BarHeight = 45
			codabar.Text = "0123"

			'Printing barcode on to the Pdf.
			codabar.Draw(page, New PointF(25, 400))

			font = New PdfStandardFont(PdfFontFamily.TimesRoman, 9, PdfFontStyle.Regular)

			g.DrawString("Type : Codabar", font, brush, New PointF(200, 410))
			g.DrawString("Allowed Characters : A,B,C,D,0-9,-$,:,/,a dot(.),+ ", font, brush, New PointF(200, 430))

			g.DrawLine(pen, New PointF(0, 470), New PointF(width, 470))
'			#End Region

'			#Region "Code32"
			Dim code32 As New PdfCode32Barcode()

			code32.Font = font

			' Setting height of the barcode
			code32.BarHeight = 45
			code32.Text = "01234567"
			code32.TextDisplayLocation = TextLocation.Bottom
			code32.EnableCheckDigit = True
			code32.ShowCheckDigit = True

			'Printing barcode on to the Pdf.
			code32.Draw(page, New PointF(25, 500))

			g.DrawString("Type : Code32", font, brush, New PointF(200, 500))
			g.DrawString("Allowed Characters : 1 2 3 4 5 6 7 8 9 0 ", font, brush, New PointF(200, 520))

			g.DrawLine(pen, New PointF(0, 580), New PointF(width, 580))

'			#End Region

'			#Region "Code93"
			Dim code93 As New PdfCode93Barcode()

			' Setting height of the barcode
			code93.BarHeight = 45
			code93.Text = "ABC 123456789"

			'Printing barcode on to the Pdf.
			code93.Draw(page, New PointF(25, 600))

			g.DrawString("Type : Code93", font, brush, New PointF(200, 600))
			g.DrawString("Allowed Characters : 1 2 3 4 5 6 7 8 9 0 A B C D E F G H I J K L M N O P Q R S T U V W X Y Z - . $ / + % SPACE ", font, brush, New RectangleF(200, 620, 300, 200), format)

			g.DrawLine(pen, New PointF(0, 680), New PointF(width, 680))
'			#End Region

'			#Region "Code93Extended"
			Dim code93ext As New PdfCode93ExtendedBarcode()

			'Setting height of the barcode
			code93ext.BarHeight = 45
			code93ext.EncodeStartStopSymbols = True
			code93ext.Text = "(abc) 123456789"

			'Printing barcode on to the Pdf.
			page = document.Pages.Add()
			code93ext.Draw(page, New PointF(25, 50))

			g = page.Graphics
			g.DrawString("Type : Code93 Extended", font, brush, New PointF(200, 50))
			g.DrawString("Allowed Characters : All 128 ASCII characters ", font, brush, New PointF(200, 70))

			g.DrawLine(pen, New PointF(0, 120), New PointF(width, 120))
'			#End Region

'			#Region "Code128"
			Dim barcode128A As New PdfCode128ABarcode()

			' Setting height of the barcode
			barcode128A.BarHeight = 45
			barcode128A.Text = "ABCD 12345"
			barcode128A.EnableCheckDigit = True
			barcode128A.EncodeStartStopSymbols = True
			barcode128A.ShowCheckDigit = True

			'Printing barcode on to the Pdf.
			barcode128A.Draw(page, New PointF(25, 135))

			g.DrawString("Type : Code128 A", font, brush, New PointF(200, 135))
			g.DrawString("Allowed Characters : NUL (0x00) SOH (0x01) STX (0x02) ETX (0x03) EOT (0x04) ENQ (0x05) ACK (0x06) BEL (0x07) BS (0x08) HT (0x09) LF (0x0A) VT (0x0B) FF (0x0C) CR (0x0D) SO (0x0E) SI (0x0F) DLE (0x10) DC1 (0x11) DC2 (0x12) DC3 (0x13) DC4 (0x14) NAK (0x15) SYN (0x16) ETB (0x17) CAN (0x18) EM (0x19) SUB (0x1A) ESC (0x1B) FS (0x1C) GS (0x1D) RS (0x1E) US (0x1F) SPACE (0x20) "" ! # $ % & ' ( ) * + , - . / 0 1 2 3 4 5 6 7 8 9 : ; < = > ? @ A B C D E F G H I J K L M N O P Q R S T U V W X Y Z [ / ]^ _  ", font, brush, New RectangleF(200, 155, 300, 200), format)

			g.DrawLine(pen, New PointF(0, 250), New PointF(width, 250))

			Dim barcode128B As New PdfCode128BBarcode()

			' Setting height of the barcode
			barcode128B.BarHeight = 45
			barcode128B.Text = "12345 abcd"
			barcode128B.EnableCheckDigit = True
			barcode128B.EncodeStartStopSymbols = True
			barcode128B.ShowCheckDigit = True

			'Printing barcode on to the Pdf.
			barcode128B.Draw(page, New PointF(25, 280))

			g.DrawString("Type : Code128 B", font, brush, New PointF(200, 280))
			g.DrawString("Allowed Characters : SPACE (0x20) !  "" # $ % & ' ( ) * + , - . / 0 1 2 3 4 5 6 7 8 9 : ; < = > ? @ A B C D E F G H I J K L M N O P Q R S T U V W X Y Z [ / ]^ _ ` a b c d e f g h i j k l m n o p q r s t u v w x y z { | } ~ DEL (" & ChrW(&H7F).ToString() & ")  ", font, brush, New RectangleF(200, 300, 300, 200), format)

			g.DrawLine(pen, New PointF(0, 350), New PointF(width, 350))

			Dim barcode128C As New PdfCode128CBarcode()

			' Setting height of the barcode
			barcode128C.BarHeight = 45
			barcode128C.Text = "001122334455"
			barcode128C.EnableCheckDigit = True
			barcode128C.EncodeStartStopSymbols = True
			barcode128C.ShowCheckDigit = True

			'Printing barcode on to the Pdf.
			barcode128C.Draw(page, New PointF(25, 370))

			g.DrawString("Type : Code128 C", font, brush, New PointF(200, 370))
			g.DrawString("Allowed Characters : 0 1 2 3 4 5 6 7 8 9 ", font, brush, New PointF(200, 390))

			g.DrawLine(pen, New PointF(0, 440), New PointF(width, 440))

'			#End Region

'			#End Region

			page = document.Pages.Add()
			g = page.Graphics
			font = New PdfStandardFont(PdfFontFamily.Helvetica, 15f, PdfFontStyle.Bold)

			Dim xPos As Single = page.GetClientSize().Width \ 2

			format = New PdfStringFormat()
			format.Alignment = PdfTextAlignment.Center

			' Draw String
			g.DrawString("2D Barcodes", font, brush, New PointF(xPos, 10), format)

'			#Region "2D Barcode"
			font = New PdfStandardFont(PdfFontFamily.Helvetica, 12f, PdfFontStyle.Bold)
			g.DrawString("DataMatrix Barcode", font, brush, New PointF(10, 60))

			Dim dataMatrixBarcode As New PdfDataMatrixBarcode("5575235 Win7 4GB 64bit 7Jun2010")
			' Auto detect encoding
			'dataMatrixBarcode.Encoding = PdfDataMatrixEncoding.ASCII;

			' Auto detect size
			'dataMatrixBarcode.Size = PdfDataMatrixSize.Auto;

			' Set dimension for each block
			dataMatrixBarcode.XDimension = 4

			' Draw the barcode
			dataMatrixBarcode.Draw(page, New PointF(25, 120))

			font = New PdfStandardFont(PdfFontFamily.TimesRoman, 9, PdfFontStyle.Regular)

			g.DrawString("Symbol Type : Square", font, brush, New PointF(250, 160))
			g.DrawString("Encoded Data : 5575235 Win7 4GB 64bit 7Jun2010", font, brush, New PointF(250, 180))

			pen = New PdfPen(brush, 0.5f)
			g.DrawLine(pen, New PointF(0, 250), New PointF(width, 250))

			Dim text As String = "TYPE 3523 - ETWS/N FE- SDFHW 06/08"

			dataMatrixBarcode = New PdfDataMatrixBarcode(text)

			' rectangular matrix
			dataMatrixBarcode.Size = PdfDataMatrixSize.Size16x48

			dataMatrixBarcode.XDimension = 4

			dataMatrixBarcode.Draw(page, New PointF(25, 300))

			g.DrawString("Symbol Type : Rectangle", font, brush, New PointF(250, 320))
			g.DrawString("Encoded Data : " & text, font, brush, New PointF(250, 340))

			pen = New PdfPen(brush, 0.5f)
			g.DrawLine(pen, New PointF(0, 400), New PointF(width, 400))

'			#End Region

			' Save and close the document.
			document.Save("Sample.pdf")
			document.Close(True)

			'Message box confirmation to view the created PDF document.
			If MessageBox.Show("Do you want to view the PDF file?", "PDF File Created", MessageBoxButtons.YesNo, MessageBoxIcon.Information) = System.Windows.Forms.DialogResult.Yes Then
				'Launching the PDF file using the default Application.[Acrobat Reader]
				System.Diagnostics.Process.Start("Sample.pdf")
				Me.Close()
			Else
				' Exit
				Me.Close()
			End If
		End Sub
		#End Region
	End Class
End Namespace