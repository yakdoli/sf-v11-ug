<h1>Barcode</h1>

<p>A bar code uses a sequence of vertical bars and spaces to represent numbers and other symbols. 
It typically consists of five parts: a quiet zone, a start character, data characters, a stop character,
 and another quiet zone. </p>
<h3>Features</h3>
 <ul>
<p>Essential PDF supports the following types of bar codes. <br></p>
<ul>
<li>Code39</li>
<li>Code39Extended</li>
<li>Code11</li>
<li>Codabar</li>
<li>Code32</li>
<li>Code93</li>
<li>Code93Extended</li>
<li>Code128</li>
<li>DataMatrix</li>
</ul>

<p>Below is an image of the output.</p>
<div align=center><img src="images/image.png" alt="PDF" title="" /></div>

<li><strong>Code 39</strong> - Code 39 is widely used in many industries and is the standard for many government bar code specifications. 
The Code 39 character set includes the digits 0-9, the letters A-Z (upper case only), and the following symbols: space, minus (-), 
plus (+), period (.), dollar sign ($), slash (/), and percent (%). A special start-stop character is placed at the beginning 
and end of each bar code. The bar code may be of any length, although more than 
25 characters really begins to push its bounds. 
<p>Here is the code snippet used to draw Code39.</p>
<pre>
// Drawing Code39 barcode
PdfCode39Barcode barcode = new PdfCode39Barcode();
// Setting height of the barcode
barcode.BarHeight = 45;
barcode.Text = "CODE39$";
//Printing barcode on to the Pdf.
barcode.Draw(page, new PointF(25, 70 ));
</pre>
</li>

<li><strong>Code 39 Extended</strong> - Extended Code 39 was developed to provide a means of encoding additional characters that are not normally part of the Code 39 character set (lower-case characters and symbols).  
<p>Here is a sample code snippet used to draw a Code 39 Extended bar code.</p>
<pre>
// Drawing Code39Extended barcode
PdfCode39ExtendedBarcode barcodeExt = new PdfCode39ExtendedBarcode();
barcodeExt.TextAlignment = PdfBarcodeTextAlignment.Left;
barcodeExt.Text = "CODE39Ext";
//Printing barcode on to the Pdf.
barcodeExt.Draw(page, new PointF(25, 200));
</pre>
</li>

<li><strong>Code 11</strong> - Code 11 is used primarily for labeling telecommunication 
equipment. Its character set includes the digits 0 through 9, a dash ( - ), and a start-stop code. Each character is encoded with three bars and two spaces.  Of these five elements, there may be two wide and three narrow, or one wide and four narrow. 
<p>Here is the code snippet used to draw a Code 11 bar code.</p>
<pre>
 // Drawing Code11 barcode
PdfCode11Barcode barcode11 = new PdfCode11Barcode();
barcode11.Text = "012345678";
barcode11.EncodeStartStopSymbols = true;
 //Printing barcode on to the Pdf.
barcode11.Draw(page, new PointF(25, 300));
</pre>
</li>

<li><strong>Codabar</strong> - Codabar can encode the digits 0 through 9, six symbols ( - : . $ / + ), and the start-stop characters A, B, C, D, E, *, N, or T. The start-stop characters must be used in matching pairs and may not appear elsewhere in the bar code. Codabar is used in libraries, blood banks, the overnight package delivery industry, and a variety of other information-processing applications.
<p>Here is the code snippet used to draw a Codabar bar code.</p>
<pre>
 // Drawing Codabar barcode
PdfCodabarBarcode codabar = new PdfCodabarBarcode();
codabar.Text = "0123";           
//Printing barcode on to the Pdf.
codabar.Draw(page, new PointF(25, 400));
</pre>
</li>

<li><strong>Code 32</strong> - It is mainly used for coding pharmaceuticals, cosmetics and dietetics. Code 32 is mainly used to encode pharmaceutical products in Italy. Code 32 is used to encode Italian Pharmacode, which has the following structure: 
<ul><li>'A' character (ASCII 65) which is not really encoded</li>
<li>8 digits for Pharmacode (It generally is prefixed with 0 - zero)</li>
<li>1 digit for Checksum module 10, which is automatically calculated by Barcode Professional</li></ul>
The value to encode passed to Barcode Professional must be 8-digit Pharmacode only (prefix it with 0 zero if necessary) because the 9th digit (the checksum) is automatically calculated by Barcode Professional products.
<p>Here is the code snippet used to draw a Code 32 bar code.</p>
<pre>
PdfCode32Barcode code32 = new PdfCode32Barcode();
code32.Font = font;
// Setting height of the barcode
code32.BarHeight = 45;
code32.Text = "01234567";
code32.TextDisplayLocation = TextLocation.Bottom;
code32.EnableCheckDigit = true;
code32.ShowCheckDigit = true;
// Printing barcode on to the Pdf.
code32.Draw(page, new PointF(25, 500));
</pre>
</li>

<li><strong>Code 93</strong> - Code 93 was designed to complement and improve upon Code 39. It can represent the full ASCII character set by using combinations of 2 characters. Code 93 is a 
continuous, variable-length symbology and produces denser code.
<ul><li>The Standard Mode (Default implementation) can encode uppercase letters (A through Z), digits (0 through 9) and a handful of special characters like the *, -, $, %, (Space), ., /, and +.</li>
<li>The Full ASCII Mode or Extended Version can encode all 128 ASCII characters.</li></ul>
The * (asterisk) is not a true encodable character, but is the start and stop 'symbol' for Code 93.
<p>Here is the code snippet used to draw a Code 93 bar code.</p>
<pre>
PdfCode93Barcode code93 = new PdfCode93Barcode();
// Setting height of the barcode
code93.BarHeight = 45;
code93.Text = "ABC 123456789";
// Printing barcode on to the Pdf.
code93.Draw(page, new PointF(25, 600));
</pre>
<p>Code93 Extended</p>
<pre>
PdfCode93ExtendedBarcode code93ext = new PdfCode93ExtendedBarcode();            
// Setting height of the barcode
code93ext.BarHeight = 45;
code93ext.EncodeStartStopSymbols = true;
code93ext.Text = "(abc) 123456789";
// Printing barcode on to the Pdf.
page = doc.Pages.Add();
code93ext.Draw(page, new PointF(25, 50));
</pre>
</li>

<li><strong>Code 128</strong> - Code 128 is a variable length, high density, alphanumeric, linear bar code symbology, capable of encoding the full 128-character ASCII character set and extended character sets. This 
symbology includes a checksum digit for verification, and the bar code may also be verified character-by-character, verifying the parity of each data byte.</br></br>
Code 128 Code Sets 
<ul><li>Code Set A (or Chars Set A)</li>
<li>Code Set B (or Chars Set B)</li>
<li>Code Set C (or Chars Set C)</li></ul>
<p>Here is the code snippet used to draw a Code 128 bar code.</p>
<p>Code128A</p>
<pre>
PdfCode128ABarcode barcode128A = new PdfCode128ABarcode();
// Setting height of the barcode
barcode128A.BarHeight = 45;
barcode128A.Text = "ABCD 12345";
barcode128A.EnableCheckDigit = true;
barcode128A.EncodeStartStopSymbols = true;
barcode128A.ShowCheckDigit = true;
// Printing barcode on to the Pdf.
barcode128A.Draw(page, new PointF(25, 135));
</pre>
<p>Code128B</p>
<pre>
PdfCode128BBarcode barcode128B = new PdfCode128BBarcode();
// Setting height of the barcode
barcode128B.BarHeight = 45;
barcode128B.Text = "12345 abcd";
barcode128B.EnableCheckDigit = true;
barcode128B.EncodeStartStopSymbols = true;
barcode128B.ShowCheckDigit = true;
</pre>
<p>Code128C</p>
<pre>
PdfCode128CBarcode barcode128C = new PdfCode128CBarcode();
// Setting height of the barcode
barcode128C.BarHeight = 45;
barcode128C.Text = "001122334455";
barcode128C.EnableCheckDigit = true;
barcode128C.EncodeStartStopSymbols = true;
barcode128C.ShowCheckDigit = true;
</pre>
</li>
</p>

<li><strong>DataMatrix</strong> - DataMatrix is a two dimensional barcode consisting a grid of dark and light dots or blocks forming square or rectangular symbol. The data encoded in the barcode can either be number or alphanumeric.
<p>Here is the code snippet used to draw a DataMatrix barcode.</p>
<pre>
PdfDataMatrixBarcode dataMatrixBarcode = new PdfDataMatrixBarcode("5575235 Win7 4GB 64bit 7Jun2010");
// rectangular matrix
dataMatrixBarcode.Size = PdfDataMatrixSize.Size16x48;

// Set dimension for each block
dataMatrixBarcode.XDimension = 4;

// Set encoding
dataMatrixBarcode.Encoding = PdfDataMatrixEncoding.ASCII;

// Draw the barcode
dataMatrixBarcode.Draw(page, new PointF(25, 150));
</pre>
</li>
</ul>
<h3>
    Interactive Features</h3>
<Ul>
  <li>Click the PDF button to generate the Pdf document.</li>
  <li>Click Yes on the message box to view the generated Pdf file.</li>
  <li>The displayed PDF file was created using Essential PDF source code.</li>
  <li>All features in the preceding list are illustrated in this file.</li>
</Ul>
