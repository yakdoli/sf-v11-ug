#Region "Copyright Syncfusion Inc. 2001 - 2007"
'
'  Copyright Syncfusion Inc. 2001 - 2007. All rights reserved.
'
'  Use of this code is subject to the terms of our license.
'  A copy of the current license can be obtained at any time by e-mailing
'  licensing@syncfusion.com. Re-distribution in any form is strictly
'  prohibited. Any infringement will be prosecuted under applicable laws. 
'
#End Region


Imports Microsoft.VisualBasic
Imports System
Imports System.Drawing
Imports System.Drawing.Imaging
Imports System.Collections
Imports System.ComponentModel
Imports System.Windows.Forms
Imports System.Data
Imports Syncfusion.Pdf
Imports Syncfusion.Pdf.Graphics
Imports Syncfusion.Pdf.Interactive

Namespace EssentialPDFSamples
	''' <summary>
	''' Summary description for Form1.
	''' </summary>
    Public Class Form1 : Inherits System.Windows.Forms.Form
#Region "Private Members"
        Private WithEvents button1 As System.Windows.Forms.Button
        Private label1 As System.Windows.Forms.Label
        Private pictureBox1 As System.Windows.Forms.PictureBox

        ''' <summary>
        ''' Required designer variable.
        ''' </summary>
        Private components As System.ComponentModel.Container = Nothing
#End Region

#Region "Constructor"
        Public Sub New()
            '
            ' Required for Windows Form Designer support
            '
            InitializeComponent()
            Application.EnableVisualStyles()
            '
            ' TODO: Add any constructor code after InitializeComponent call
            ''
        End Sub

        ''' <summary>
        ''' Clean up any resources being used.
        ''' </summary>
        Protected Overloads Overrides Sub Dispose(ByVal disposing As Boolean)
            If disposing Then
                If Not components Is Nothing Then
                    components.Dispose()
                End If
            End If
            MyBase.Dispose(disposing)
        End Sub

#Region "Windows Form Designer generated code"
        ''' <summary>
        ''' Required method for Designer support - do not modify
        ''' the contents of this method with the code editor.
        ''' </summary>
        Private Sub InitializeComponent()
            Dim resources As System.ComponentModel.ComponentResourceManager = New System.ComponentModel.ComponentResourceManager(GetType(Form1))
            Me.button1 = New System.Windows.Forms.Button
            Me.label1 = New System.Windows.Forms.Label
            Me.pictureBox1 = New System.Windows.Forms.PictureBox
            CType(Me.pictureBox1, System.ComponentModel.ISupportInitialize).BeginInit()
            Me.SuspendLayout()
            '
            'button1
            '
            Me.button1.Anchor = CType((System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Right), System.Windows.Forms.AnchorStyles)
            Me.button1.BackColor = System.Drawing.Color.Transparent
            Me.button1.FlatAppearance.BorderColor = System.Drawing.Color.FromArgb(CType(CType(255, Byte), Integer), CType(CType(192, Byte), Integer), CType(CType(128, Byte), Integer))
            Me.button1.FlatAppearance.MouseDownBackColor = System.Drawing.Color.FromArgb(CType(CType(255, Byte), Integer), CType(CType(224, Byte), Integer), CType(CType(192, Byte), Integer))
            Me.button1.FlatAppearance.MouseOverBackColor = System.Drawing.Color.FromArgb(CType(CType(255, Byte), Integer), CType(CType(255, Byte), Integer), CType(CType(192, Byte), Integer))
            Me.button1.Image = CType(resources.GetObject("button1.Image"), System.Drawing.Image)
            Me.button1.ImageAlign = System.Drawing.ContentAlignment.MiddleRight
            Me.button1.Location = New System.Drawing.Point(289, 159)
            Me.button1.Name = "button1"
            Me.button1.Size = New System.Drawing.Size(75, 24)
            Me.button1.TabIndex = 0
            Me.button1.Text = "PDF"
            Me.button1.UseVisualStyleBackColor = False
            '
            'label1
            '
            Me.label1.Font = New System.Drawing.Font("Verdana", 8.25!, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, CType(0, Byte))
            Me.label1.ForeColor = System.Drawing.Color.FromArgb(CType(CType(0, Byte), Integer), CType(CType(0, Byte), Integer), CType(CType(64, Byte), Integer))
            Me.label1.Location = New System.Drawing.Point(0, 113)
            Me.label1.Name = "label1"
            Me.label1.Size = New System.Drawing.Size(375, 52)
            Me.label1.TabIndex = 1
            Me.label1.Text = "Click the button to view an PDF document generated by Essential PDF. Please note " & _
                "that Adobe Reader or its equivalent is required to view the resultant document."
            '
            'pictureBox1
            '
            Me.pictureBox1.Dock = System.Windows.Forms.DockStyle.Top
            Me.pictureBox1.Image = CType(resources.GetObject("pictureBox1.Image"), System.Drawing.Image)
            Me.pictureBox1.Location = New System.Drawing.Point(0, 0)
            Me.pictureBox1.Name = "pictureBox1"
            Me.pictureBox1.Size = New System.Drawing.Size(375, 90)
            Me.pictureBox1.TabIndex = 24
            Me.pictureBox1.TabStop = False
            '
            'Form1
            '
            Me.AutoScaleBaseSize = New System.Drawing.Size(5, 13)
            Me.BackColor = System.Drawing.Color.White
            Me.ClientSize = New System.Drawing.Size(375, 203)
            Me.Controls.Add(Me.button1)
            Me.Controls.Add(Me.label1)
            Me.Controls.Add(Me.pictureBox1)
            Me.FormBorderStyle = System.Windows.Forms.FormBorderStyle.FixedSingle
            Me.Icon = CType(resources.GetObject("$this.Icon"), System.Drawing.Icon)
            Me.MaximizeBox = False
            Me.MinimizeBox = False
            Me.Name = "Form1"
            Me.StartPosition = System.Windows.Forms.FormStartPosition.CenterScreen
            Me.Text = "Hello World"
            CType(Me.pictureBox1, System.ComponentModel.ISupportInitialize).EndInit()
            Me.ResumeLayout(False)

        End Sub
#End Region

        ''' <summary>
        ''' The main entry point for the application.
        ''' </summary>
        <STAThread()> _
        Shared Sub Main()
            Application.Run(New Form1())
        End Sub
#End Region
#Region "Fields"
        Private doc As PdfDocument
        Private page As PdfPage
        Private gray As Color = Color.FromArgb(255, 77, 77, 77)
        Private black As Color = Color.FromArgb(255, 0, 0, 0)
        Private white As Color = Color.FromArgb(255, 255, 255, 255)
        Private violet As Color = Color.FromArgb(255, 151, 108, 174)
#End Region
#Region "Events"
        Private Sub button1_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles button1.Click
            doc = New PdfDocument()
            doc.PageSettings.Margins.All = 0
            page = doc.Pages.Add()
            Dim g As PdfGraphics = page.Graphics

            Dim headerFont As PdfFont = New PdfStandardFont(PdfFontFamily.TimesRoman, 35)
            Dim subHeadingFont As PdfFont = New PdfStandardFont(PdfFontFamily.TimesRoman, 16)
            g.DrawRectangle(New PdfSolidBrush(gray), New RectangleF(0, 0, page.Graphics.ClientSize.Width, page.Graphics.ClientSize.Height))
            g.DrawRectangle(New PdfSolidBrush(black), New RectangleF(0, 0, page.Graphics.ClientSize.Width, 130))
            g.DrawRectangle(New PdfSolidBrush(white), New RectangleF(0, 400, page.Graphics.ClientSize.Width, page.Graphics.ClientSize.Height - 450))
            g.DrawString("Enterprise", headerFont, New PdfSolidBrush(violet), New PointF(10, 20))
            g.DrawRectangle(New PdfSolidBrush(violet), New RectangleF(10, 63, 140, 35))
            g.DrawString("Reporting Solutions", subHeadingFont, New PdfSolidBrush(black), New PointF(15, 70))

            Dim result As PdfLayoutResult = HeaderPoints("Develop cloud-ready reporting applications in as little as 20% of the time.", 15)
            result = HeaderPoints("Proven, reliable platform thousands of users over the past 10 years.", result.Bounds.Bottom + 15)
            result = HeaderPoints("Microsoft Excel, Word, Adobe PDF, RDL display and editing.", result.Bounds.Bottom + 15)
            result = HeaderPoints("Why start from scratch? Rely on our dependable solution frameworks", result.Bounds.Bottom + 15)

            result = BodyContent("Deployment-ready framework tailored to your needs.", result.Bounds.Bottom + 45)
            result = BodyContent("Our architects and developers have years of reporting experience.", result.Bounds.Bottom + 25)
            result = BodyContent("Solutions available for web, desktop, and mobile applications.", result.Bounds.Bottom + 25)
            result = BodyContent("Backed by our end-to-end product maintenance infrastructure.", result.Bounds.Bottom + 25)
            result = BodyContent("The quickest path from concept to delivery.", result.Bounds.Bottom + 25)

            Dim redPen As New PdfPen(PdfBrushes.Red, 2)
            g.DrawLine(redPen, New PointF(40, result.Bounds.Bottom + 92), New PointF(40, result.Bounds.Bottom + 145))
            Dim headerBulletsXposition As Single = 40
            Dim txtElement As New PdfTextElement("The Experts")
            txtElement.Font = New PdfStandardFont(PdfFontFamily.TimesRoman, 20)
            txtElement.Draw(page, New RectangleF(headerBulletsXposition + 5, result.Bounds.Bottom + 90, 450, 200))

            Dim violetPen As New PdfPen(PdfBrushes.Violet, 2)
            g.DrawLine(violetPen, New PointF(headerBulletsXposition + 310, result.Bounds.Bottom + 92), New PointF(headerBulletsXposition + 310, result.Bounds.Bottom + 145))
            txtElement = New PdfTextElement("Accurate Estimates")
            txtElement.Font = New PdfStandardFont(PdfFontFamily.TimesRoman, 20)
            result = txtElement.Draw(page, New RectangleF(headerBulletsXposition + 320, result.Bounds.Bottom + 90, 450, 200))

            txtElement = New PdfTextElement("A substantial number of .NET reporting applications use our frameworks")
            txtElement.Font = New PdfStandardFont(PdfFontFamily.TimesRoman, 11, PdfFontStyle.Regular)
            result = txtElement.Draw(page, New RectangleF(headerBulletsXposition + 5, result.Bounds.Bottom + 5, 250, 200))


            txtElement = New PdfTextElement("Given our expertise, you can expect estimates to be accurate.")
            txtElement.Font = New PdfStandardFont(PdfFontFamily.TimesRoman, 11, PdfFontStyle.Regular)
            result = txtElement.Draw(page, New RectangleF(headerBulletsXposition + 320, result.Bounds.Y, 250, 200))


            Dim greenPen As New PdfPen(PdfBrushes.Green, 2)
            g.DrawLine(greenPen, New PointF(40, result.Bounds.Bottom + 32), New PointF(40, result.Bounds.Bottom + 85))

            txtElement = New PdfTextElement("Product Licensing")
            txtElement.Font = New PdfStandardFont(PdfFontFamily.TimesRoman, 20)
            txtElement.Draw(page, New RectangleF(headerBulletsXposition + 5, result.Bounds.Bottom + 30, 450, 200))

            Dim bluePen As New PdfPen(PdfBrushes.Blue, 2)
            g.DrawLine(bluePen, New PointF(headerBulletsXposition + 310, result.Bounds.Bottom + 32), New PointF(headerBulletsXposition + 310, result.Bounds.Bottom + 85))
            txtElement = New PdfTextElement("About Syncfusion")
            txtElement.Font = New PdfStandardFont(PdfFontFamily.TimesRoman, 20)
            result = txtElement.Draw(page, New RectangleF(headerBulletsXposition + 320, result.Bounds.Bottom + 30, 450, 200))

            txtElement = New PdfTextElement("Solution packages can be combined with product licensing for great cost savings.")
            txtElement.Font = New PdfStandardFont(PdfFontFamily.TimesRoman, 11, PdfFontStyle.Regular)
            result = txtElement.Draw(page, New RectangleF(headerBulletsXposition + 5, result.Bounds.Bottom + 5, 250, 200))


            txtElement = New PdfTextElement("Syncfusion has more than 7,000 customers including large financial institutions and Fortune 100 companies.")
            txtElement.Font = New PdfStandardFont(PdfFontFamily.TimesRoman, 11, PdfFontStyle.Regular)
            result = txtElement.Draw(page, New RectangleF(headerBulletsXposition + 320, result.Bounds.Y, 250, 200))
            Dim imgPath As String = GetFullTemplatePath("Reporting-Edition.jpg")
            g.DrawImage(PdfImage.FromFile(imgPath), 280, 600, 300, 170)

            g.DrawString("All trademarks mentioned belong to their owners.", New PdfStandardFont(PdfFontFamily.TimesRoman, 8, PdfFontStyle.Italic), PdfBrushes.White, New PointF(10, g.ClientSize.Height - 30))
            Dim linkAnnot As New PdfTextWebLink()
            linkAnnot.Url = "http://www.syncfusion.com"
            linkAnnot.Text = "www.syncfusion.com"
            linkAnnot.Font = New PdfStandardFont(PdfFontFamily.TimesRoman, 8, PdfFontStyle.Italic)
            linkAnnot.Brush = PdfBrushes.White
            linkAnnot.DrawTextWebLink(page, New PointF(g.ClientSize.Width - 100, g.ClientSize.Height - 30))
            ' Save and close the document.
            doc.Save("Sample.pdf")
            doc.Close(True)

            'Message box confirmation to view the created PDF document.
            If MessageBox.Show("Do you want to view the PDF file?", "PDF File Created", MessageBoxButtons.YesNo, MessageBoxIcon.Information) = System.Windows.Forms.DialogResult.Yes Then
                'Launching the PDF file using the default Application.[Acrobat Reader]
                System.Diagnostics.Process.Start("Sample.pdf")
                Me.Close()
            Else
                ' Exit
                Me.Close()
            End If
        End Sub
        Private Function BodyContent(ByVal text As String, ByVal yPosition As Single) As PdfLayoutResult
            Dim headerBulletsXposition As Single = 35
            Dim txtElement As New PdfTextElement("3")
            txtElement.Font = New PdfStandardFont(PdfFontFamily.ZapfDingbats, 16)
            txtElement.Brush = New PdfSolidBrush(violet)
            txtElement.StringFormat = New PdfStringFormat()
            txtElement.StringFormat.WordWrap = PdfWordWrapType.Word
            txtElement.StringFormat.LineLimit = True
            txtElement.Draw(page, New RectangleF(headerBulletsXposition, yPosition, 320, 100))

            txtElement = New PdfTextElement(text)
            txtElement.Font = New PdfStandardFont(PdfFontFamily.TimesRoman, 17)
            txtElement.Brush = New PdfSolidBrush(white)
            txtElement.StringFormat = New PdfStringFormat()
            txtElement.StringFormat.WordWrap = PdfWordWrapType.Word
            txtElement.StringFormat.LineLimit = True
            Dim result As PdfLayoutResult = txtElement.Draw(page, New RectangleF(headerBulletsXposition + 25, yPosition, 450, 130))
            Return result
        End Function

        Private Function HeaderPoints(ByVal text As String, ByVal yPosition As Single) As PdfLayoutResult
            Dim headerBulletsXposition As Single = 220
            Dim txtElement As New PdfTextElement("l")
            txtElement.Font = New PdfStandardFont(PdfFontFamily.ZapfDingbats, 10)
            txtElement.Brush = New PdfSolidBrush(violet)
            txtElement.StringFormat = New PdfStringFormat()
            txtElement.StringFormat.WordWrap = PdfWordWrapType.Word
            txtElement.StringFormat.LineLimit = True
            txtElement.Draw(page, New RectangleF(headerBulletsXposition, yPosition, 300, 100))

            txtElement = New PdfTextElement(text)
            txtElement.Font = New PdfStandardFont(PdfFontFamily.TimesRoman, 11)
            txtElement.Brush = New PdfSolidBrush(white)
            txtElement.StringFormat = New PdfStringFormat()
            txtElement.StringFormat.WordWrap = PdfWordWrapType.Word
            txtElement.StringFormat.LineLimit = True
            Dim result As PdfLayoutResult = txtElement.Draw(page, New RectangleF(headerBulletsXposition + 20, yPosition, 320, 100))
            Return result
        End Function
        ''' <summary>
        ''' Gets the full path of the PDF template or image.
        ''' </summary>
        ''' <param name="fileName">Name of the file</param>
        ''' <param name="image">True if image</param>
        ''' <returns>Path of the file</returns>
        Private Function GetFullTemplatePath(ByVal fileName As String) As String
            Dim fullPath As String = "..\..\..\..\..\..\..\..\..\Common\"
            Dim folder As String = "Images"

            Return String.Format("{0}{1}\PDF\{2}", fullPath, folder, fileName)
        End Function
#End Region

    End Class
End Namespace
