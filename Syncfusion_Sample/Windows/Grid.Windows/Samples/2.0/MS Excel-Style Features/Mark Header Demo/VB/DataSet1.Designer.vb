'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.5456
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

'INSTANT VB TODO TASK: There is no equivalent to #pragma directives in VB.NET:
'#pragma warning disable 1591


Imports Microsoft.VisualBasic
Imports System
Namespace MarkHeaderDemo_2008


	''' <summary>
	'''Represents a strongly typed in-memory cache of data.
	'''</summary>

	Partial Public Class DataSet1
		Inherits System.Data.DataSet

		Private tableCustomers As CustomersDataTable

		Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema


        Public Sub New()
            Me.BeginInit()
            Me.InitClass()
            Dim schemaChangedHandler As New Global.System.ComponentModel.CollectionChangeEventHandler(AddressOf Me.SchemaChanged)
            AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
            AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
            Me.EndInit()
        End Sub


        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context, False)
            If (Me.IsBinarySerialized(info, context) = True) Then
                Me.InitVars(False)
                Dim schemaChangedHandler1 As New Global.System.ComponentModel.CollectionChangeEventHandler(AddressOf Me.SchemaChanged)
                AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
                AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
                Return
            End If
            Dim strSchema As String = (CStr(info.GetValue("XmlSchema", GetType(String))))
            If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
                Dim ds As New Global.System.Data.DataSet()
                ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
                If (ds.Tables("Customers") IsNot Nothing) Then
                    MyBase.Tables.Add(New CustomersDataTable(ds.Tables("Customers")))
                End If
                Me.DataSetName = ds.DataSetName
                Me.Prefix = ds.Prefix
                Me.Namespace = ds.Namespace
                Me.Locale = ds.Locale
                Me.CaseSensitive = ds.CaseSensitive
                Me.EnforceConstraints = ds.EnforceConstraints
                Me.Merge(ds, False, Global.System.Data.MissingSchemaAction.Add)
                Me.InitVars()
            Else
                Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            End If
            Me.GetSerializationData(info, context)
            Dim schemaChangedHandler As New Global.System.ComponentModel.CollectionChangeEventHandler(AddressOf Me.SchemaChanged)
            AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
        End Sub


        Public ReadOnly Property Customers() As CustomersDataTable
            Get
                Return Me.tableCustomers
            End Get
        End Property


        Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
            Get
                Return Me._schemaSerializationMode
            End Get
            Set(ByVal value As System.Data.SchemaSerializationMode)
                Me._schemaSerializationMode = value
            End Set
        End Property


        Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
            Get
                Return MyBase.Tables
            End Get
        End Property


        Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
            Get
                Return MyBase.Relations
            End Get
        End Property


        Protected Overrides Sub InitializeDerivedDataSet()
            Me.BeginInit()
            Me.InitClass()
            Me.EndInit()
        End Sub


        Public Overrides Function Clone() As Global.System.Data.DataSet
            Dim cln As DataSet1 = (CType(MyBase.Clone(), DataSet1))
            cln.InitVars()
            cln.SchemaSerializationMode = Me.SchemaSerializationMode
            Return cln
        End Function


        Protected Overrides Function ShouldSerializeTables() As Boolean
            Return False
        End Function


        Protected Overrides Function ShouldSerializeRelations() As Boolean
            Return False
        End Function


        Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
            If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
                Me.Reset()
                Dim ds As New Global.System.Data.DataSet()
                ds.ReadXml(reader)
                If (ds.Tables("Customers") IsNot Nothing) Then
                    MyBase.Tables.Add(New CustomersDataTable(ds.Tables("Customers")))
                End If
                Me.DataSetName = ds.DataSetName
                Me.Prefix = ds.Prefix
                Me.Namespace = ds.Namespace
                Me.Locale = ds.Locale
                Me.CaseSensitive = ds.CaseSensitive
                Me.EnforceConstraints = ds.EnforceConstraints
                Me.Merge(ds, False, Global.System.Data.MissingSchemaAction.Add)
                Me.InitVars()
            Else
                Me.ReadXml(reader)
                Me.InitVars()
            End If
        End Sub


        Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
            Dim stream As New Global.System.IO.MemoryStream()
            Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
            stream.Position = 0
            Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
        End Function


        Friend Sub InitVars()
            Me.InitVars(True)
        End Sub


        Friend Sub InitVars(ByVal initTable As Boolean)
            Me.tableCustomers = (CType(MyBase.Tables("Customers"), CustomersDataTable))
            If (initTable = True) Then
                If (Me.tableCustomers IsNot Nothing) Then
                    Me.tableCustomers.InitVars()
                End If
            End If
        End Sub


        Private Sub InitClass()
            Me.DataSetName = "DataSet1"
            Me.Prefix = ""
            Me.Namespace = "http://tempuri.org/DataSet1.xsd"
            Me.EnforceConstraints = True
            Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
            Me.tableCustomers = New CustomersDataTable()
            MyBase.Tables.Add(Me.tableCustomers)
        End Sub


        Private Function ShouldSerializeCustomers() As Boolean
            Return False
        End Function


        Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
            If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
                Me.InitVars()
            End If
        End Sub


        Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim ds As New DataSet1()
            Dim type As New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim any As New Global.System.Xml.Schema.XmlSchemaAny()
            any.Namespace = ds.Namespace
            sequence.Items.Add(any)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable()
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As New Global.System.IO.MemoryStream()
                Dim s2 As New Global.System.IO.MemoryStream()
                Try
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator()
                    Do While schemas.MoveNext()
                        schema = (CType(schemas.Current, Global.System.Xml.Schema.XmlSchema))
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            Do While ((s1.Position <> s1.Length) AndAlso (s1.ReadByte() = s2.ReadByte()))

                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                    Loop
                Finally
                    If (s1 IsNot Nothing) Then
                        s1.Close()
                    End If
                    If (s2 IsNot Nothing) Then
                        s2.Close()
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function

        Public Delegate Sub CustomersRowChangeEventHandler(ByVal sender As Object, ByVal e As CustomersRowChangeEvent)

        ''' <summary>
        '''Represents the strongly named DataTable class.
        '''</summary>

        Partial Public Class CustomersDataTable
            Inherits System.Data.DataTable
            Implements System.Collections.IEnumerable

            Private columnAddress As Global.System.Data.DataColumn

            Private columnCity As Global.System.Data.DataColumn

            Private columnCompanyName As Global.System.Data.DataColumn

            Private columnContactName As Global.System.Data.DataColumn

            Private columnContactTitle As Global.System.Data.DataColumn

            Private columnCountry As Global.System.Data.DataColumn

            Private columnCustomerID As Global.System.Data.DataColumn

            Private columnFax As Global.System.Data.DataColumn

            Private columnPhone As Global.System.Data.DataColumn

            Private columnPostalCode As Global.System.Data.DataColumn

            Private columnRegion As Global.System.Data.DataColumn


            Public Sub New()
                Me.TableName = "Customers"
                Me.BeginInit()
                Me.InitClass()
                Me.EndInit()
            End Sub


            Friend Sub New(ByVal table As Global.System.Data.DataTable)
                Me.TableName = table.TableName
                If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                    Me.CaseSensitive = table.CaseSensitive
                End If
                If (table.Locale.ToString() <> table.DataSet.Locale.ToString()) Then
                    Me.Locale = table.Locale
                End If
                If (table.Namespace <> table.DataSet.Namespace) Then
                    Me.Namespace = table.Namespace
                End If
                Me.Prefix = table.Prefix
                Me.MinimumCapacity = table.MinimumCapacity
            End Sub


            Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
                MyBase.New(info, context)
                Me.InitVars()
            End Sub


            Public ReadOnly Property AddressColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnAddress
                End Get
            End Property


            Public ReadOnly Property CityColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnCity
                End Get
            End Property


            Public ReadOnly Property CompanyNameColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnCompanyName
                End Get
            End Property


            Public ReadOnly Property ContactNameColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnContactName
                End Get
            End Property


            Public ReadOnly Property ContactTitleColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnContactTitle
                End Get
            End Property


            Public ReadOnly Property CountryColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnCountry
                End Get
            End Property


            Public ReadOnly Property CustomerIDColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnCustomerID
                End Get
            End Property


            Public ReadOnly Property FaxColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnFax
                End Get
            End Property


            Public ReadOnly Property PhoneColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnPhone
                End Get
            End Property


            Public ReadOnly Property PostalCodeColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnPostalCode
                End Get
            End Property


            Public ReadOnly Property RegionColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnRegion
                End Get
            End Property


            Public ReadOnly Property Count() As Integer
                Get
                    Return Me.Rows.Count
                End Get
            End Property


            Default Public ReadOnly Property Item(ByVal index As Integer) As CustomersRow
                Get
                    Return (CType(Me.Rows(index), CustomersRow))
                End Get
            End Property

            Public Event CustomersRowChanging As CustomersRowChangeEventHandler

            Public Event CustomersRowChanged As CustomersRowChangeEventHandler

            Public Event CustomersRowDeleting As CustomersRowChangeEventHandler

            Public Event CustomersRowDeleted As CustomersRowChangeEventHandler


            Public Sub AddCustomersRow(ByVal row As CustomersRow)
                Me.Rows.Add(row)
            End Sub


            Public Function AddCustomersRow(ByVal Address As String, ByVal City As String, ByVal CompanyName As String, ByVal ContactName As String, ByVal ContactTitle As String, ByVal Country As String, ByVal CustomerID As String, ByVal Fax As String, ByVal Phone As String, ByVal PostalCode As String, ByVal Region As String) As CustomersRow
                Dim rowCustomersRow As CustomersRow = (CType(Me.NewRow(), CustomersRow))
                Dim columnValuesArray() As Object = {Address, City, CompanyName, ContactName, ContactTitle, Country, CustomerID, Fax, Phone, PostalCode, Region}
                rowCustomersRow.ItemArray = columnValuesArray
                Me.Rows.Add(rowCustomersRow)
                Return rowCustomersRow
            End Function


            Public Function FindByCustomerID(ByVal CustomerID As String) As CustomersRow
                Return (CType(Me.Rows.Find(New Object() {CustomerID}), CustomersRow))
            End Function


            Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
                Return Me.Rows.GetEnumerator()
            End Function


            Public Overrides Function Clone() As Global.System.Data.DataTable
                Dim cln As CustomersDataTable = (CType(MyBase.Clone(), CustomersDataTable))
                cln.InitVars()
                Return cln
            End Function

            Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
                Return New CustomersDataTable()
            End Function


            Friend Sub InitVars()
                Me.columnAddress = MyBase.Columns("Address")
                Me.columnCity = MyBase.Columns("City")
                Me.columnCompanyName = MyBase.Columns("CompanyName")
                Me.columnContactName = MyBase.Columns("ContactName")
                Me.columnContactTitle = MyBase.Columns("ContactTitle")
                Me.columnCountry = MyBase.Columns("Country")
                Me.columnCustomerID = MyBase.Columns("CustomerID")
                Me.columnFax = MyBase.Columns("Fax")
                Me.columnPhone = MyBase.Columns("Phone")
                Me.columnPostalCode = MyBase.Columns("PostalCode")
                Me.columnRegion = MyBase.Columns("Region")
            End Sub


            Private Sub InitClass()
                Me.columnAddress = New Global.System.Data.DataColumn("Address", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnAddress)
                Me.columnCity = New Global.System.Data.DataColumn("City", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnCity)
                Me.columnCompanyName = New Global.System.Data.DataColumn("CompanyName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnCompanyName)
                Me.columnContactName = New Global.System.Data.DataColumn("ContactName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnContactName)
                Me.columnContactTitle = New Global.System.Data.DataColumn("ContactTitle", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnContactTitle)
                Me.columnCountry = New Global.System.Data.DataColumn("Country", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnCountry)
                Me.columnCustomerID = New Global.System.Data.DataColumn("CustomerID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnCustomerID)
                Me.columnFax = New Global.System.Data.DataColumn("Fax", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnFax)
                Me.columnPhone = New Global.System.Data.DataColumn("Phone", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnPhone)
                Me.columnPostalCode = New Global.System.Data.DataColumn("PostalCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnPostalCode)
                Me.columnRegion = New Global.System.Data.DataColumn("Region", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnRegion)
                Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCustomerID}, True))
                Me.columnCustomerID.AllowDBNull = False
                Me.columnCustomerID.Unique = True
            End Sub


            Public Function NewCustomersRow() As CustomersRow
                Return (CType(Me.NewRow(), CustomersRow))
            End Function


            Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
                Return New CustomersRow(builder)
            End Function


            Protected Overrides Function GetRowType() As Global.System.Type
                Return GetType(CustomersRow)
            End Function


            Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanged(e)
                If (Me.CustomersRowChangedEvent IsNot Nothing) Then
                    RaiseEvent CustomersRowChanged(Me, New CustomersRowChangeEvent((CType(e.Row, CustomersRow)), e.Action))
                End If
            End Sub


            Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanging(e)
                If (Me.CustomersRowChangingEvent IsNot Nothing) Then
                    RaiseEvent CustomersRowChanging(Me, New CustomersRowChangeEvent((CType(e.Row, CustomersRow)), e.Action))
                End If
            End Sub


            Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleted(e)
                If (Me.CustomersRowDeletedEvent IsNot Nothing) Then
                    RaiseEvent CustomersRowDeleted(Me, New CustomersRowChangeEvent((CType(e.Row, CustomersRow)), e.Action))
                End If
            End Sub


            Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleting(e)
                If (Me.CustomersRowDeletingEvent IsNot Nothing) Then
                    RaiseEvent CustomersRowDeleting(Me, New CustomersRowChangeEvent((CType(e.Row, CustomersRow)), e.Action))
                End If
            End Sub


            Public Sub RemoveCustomersRow(ByVal row As CustomersRow)
                Me.Rows.Remove(row)
            End Sub


            Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
                Dim type As New Global.System.Xml.Schema.XmlSchemaComplexType()
                Dim sequence As New Global.System.Xml.Schema.XmlSchemaSequence()
                Dim ds As New DataSet1()
                Dim any1 As New Global.System.Xml.Schema.XmlSchemaAny()
                any1.Namespace = "http://www.w3.org/2001/XMLSchema"
                any1.MinOccurs = New Decimal(0)
                any1.MaxOccurs = Decimal.MaxValue
                any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any1)
                Dim any2 As New Global.System.Xml.Schema.XmlSchemaAny()
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
                any2.MinOccurs = New Decimal(1)
                any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any2)
                Dim attribute1 As New Global.System.Xml.Schema.XmlSchemaAttribute()
                attribute1.Name = "namespace"
                attribute1.FixedValue = ds.Namespace
                type.Attributes.Add(attribute1)
                Dim attribute2 As New Global.System.Xml.Schema.XmlSchemaAttribute()
                attribute2.Name = "tableTypeName"
                attribute2.FixedValue = "CustomersDataTable"
                type.Attributes.Add(attribute2)
                type.Particle = sequence
                Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable()
                If xs.Contains(dsSchema.TargetNamespace) Then
                    Dim s1 As New Global.System.IO.MemoryStream()
                    Dim s2 As New Global.System.IO.MemoryStream()
                    Try
                        Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                        dsSchema.Write(s1)
                        Dim schemas As System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator()
                        Do While schemas.MoveNext()
                            schema = (CType(schemas.Current, Global.System.Xml.Schema.XmlSchema))
                            s2.SetLength(0)
                            schema.Write(s2)
                            If (s1.Length = s2.Length) Then
                                s1.Position = 0
                                s2.Position = 0
                                Do While ((s1.Position <> s1.Length) AndAlso (s1.ReadByte() = s2.ReadByte()))

                                Loop
                                If (s1.Position = s1.Length) Then
                                    Return type
                                End If
                            End If
                        Loop
                    Finally
                        If (s1 IsNot Nothing) Then
                            s1.Close()
                        End If
                        If (s2 IsNot Nothing) Then
                            s2.Close()
                        End If
                    End Try
                End If
                xs.Add(dsSchema)
                Return type
            End Function
        End Class

		''' <summary>
		'''Represents strongly named DataRow class.
		'''</summary>

		Partial Public Class CustomersRow
			Inherits System.Data.DataRow

			Private tableCustomers As CustomersDataTable


			Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
				MyBase.New(rb)
				Me.tableCustomers = (CType(Me.Table, CustomersDataTable))
			End Sub


			Public Property Address() As String
				Get
					Try
						Return (CStr(Me(Me.tableCustomers.AddressColumn)))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'Address' in table 'Customers' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As String)
					Me(Me.tableCustomers.AddressColumn) = value
				End Set
			End Property


			Public Property City() As String
				Get
					Try
						Return (CStr(Me(Me.tableCustomers.CityColumn)))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'City' in table 'Customers' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As String)
					Me(Me.tableCustomers.CityColumn) = value
				End Set
			End Property


			Public Property CompanyName() As String
				Get
					Try
						Return (CStr(Me(Me.tableCustomers.CompanyNameColumn)))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'CompanyName' in table 'Customers' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As String)
					Me(Me.tableCustomers.CompanyNameColumn) = value
				End Set
			End Property


			Public Property ContactName() As String
				Get
					Try
						Return (CStr(Me(Me.tableCustomers.ContactNameColumn)))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'ContactName' in table 'Customers' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As String)
					Me(Me.tableCustomers.ContactNameColumn) = value
				End Set
			End Property


			Public Property ContactTitle() As String
				Get
					Try
						Return (CStr(Me(Me.tableCustomers.ContactTitleColumn)))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'ContactTitle' in table 'Customers' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As String)
					Me(Me.tableCustomers.ContactTitleColumn) = value
				End Set
			End Property


			Public Property Country() As String
				Get
					Try
						Return (CStr(Me(Me.tableCustomers.CountryColumn)))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'Country' in table 'Customers' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As String)
					Me(Me.tableCustomers.CountryColumn) = value
				End Set
			End Property


			Public Property CustomerID() As String
				Get
					Return (CStr(Me(Me.tableCustomers.CustomerIDColumn)))
				End Get
				Set(ByVal value As String)
					Me(Me.tableCustomers.CustomerIDColumn) = value
				End Set
			End Property


			Public Property Fax() As String
				Get
					Try
						Return (CStr(Me(Me.tableCustomers.FaxColumn)))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'Fax' in table 'Customers' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As String)
					Me(Me.tableCustomers.FaxColumn) = value
				End Set
			End Property


			Public Property Phone() As String
				Get
					Try
						Return (CStr(Me(Me.tableCustomers.PhoneColumn)))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'Phone' in table 'Customers' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As String)
					Me(Me.tableCustomers.PhoneColumn) = value
				End Set
			End Property


			Public Property PostalCode() As String
				Get
					Try
						Return (CStr(Me(Me.tableCustomers.PostalCodeColumn)))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'PostalCode' in table 'Customers' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As String)
					Me(Me.tableCustomers.PostalCodeColumn) = value
				End Set
			End Property


			Public Property Region() As String
				Get
					Try
						Return (CStr(Me(Me.tableCustomers.RegionColumn)))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'Region' in table 'Customers' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As String)
					Me(Me.tableCustomers.RegionColumn) = value
				End Set
			End Property


			Public Function IsAddressNull() As Boolean
				Return Me.IsNull(Me.tableCustomers.AddressColumn)
			End Function


			Public Sub SetAddressNull()
				Me(Me.tableCustomers.AddressColumn) = Global.System.Convert.DBNull
			End Sub


			Public Function IsCityNull() As Boolean
				Return Me.IsNull(Me.tableCustomers.CityColumn)
			End Function


			Public Sub SetCityNull()
				Me(Me.tableCustomers.CityColumn) = Global.System.Convert.DBNull
			End Sub


			Public Function IsCompanyNameNull() As Boolean
				Return Me.IsNull(Me.tableCustomers.CompanyNameColumn)
			End Function


			Public Sub SetCompanyNameNull()
				Me(Me.tableCustomers.CompanyNameColumn) = Global.System.Convert.DBNull
			End Sub

			Public Function IsContactNameNull() As Boolean
				Return Me.IsNull(Me.tableCustomers.ContactNameColumn)
			End Function


			Public Sub SetContactNameNull()
				Me(Me.tableCustomers.ContactNameColumn) = Global.System.Convert.DBNull
			End Sub


			Public Function IsContactTitleNull() As Boolean
				Return Me.IsNull(Me.tableCustomers.ContactTitleColumn)
			End Function


			Public Sub SetContactTitleNull()
				Me(Me.tableCustomers.ContactTitleColumn) = Global.System.Convert.DBNull
			End Sub


			Public Function IsCountryNull() As Boolean
				Return Me.IsNull(Me.tableCustomers.CountryColumn)
			End Function


			Public Sub SetCountryNull()
				Me(Me.tableCustomers.CountryColumn) = Global.System.Convert.DBNull
			End Sub


			Public Function IsFaxNull() As Boolean
				Return Me.IsNull(Me.tableCustomers.FaxColumn)
			End Function


			Public Sub SetFaxNull()
				Me(Me.tableCustomers.FaxColumn) = Global.System.Convert.DBNull
			End Sub


			Public Function IsPhoneNull() As Boolean
				Return Me.IsNull(Me.tableCustomers.PhoneColumn)
			End Function


			Public Sub SetPhoneNull()
				Me(Me.tableCustomers.PhoneColumn) = Global.System.Convert.DBNull
			End Sub

			Public Function IsPostalCodeNull() As Boolean
				Return Me.IsNull(Me.tableCustomers.PostalCodeColumn)
			End Function


			Public Sub SetPostalCodeNull()
				Me(Me.tableCustomers.PostalCodeColumn) = Global.System.Convert.DBNull
			End Sub


			Public Function IsRegionNull() As Boolean
				Return Me.IsNull(Me.tableCustomers.RegionColumn)
			End Function


			Public Sub SetRegionNull()
				Me(Me.tableCustomers.RegionColumn) = Global.System.Convert.DBNull
			End Sub
		End Class

		''' <summary>
		'''Row event argument class
		'''</summary>

		Public Class CustomersRowChangeEvent
			Inherits System.EventArgs

			Private eventRow As CustomersRow

			Private eventAction As Global.System.Data.DataRowAction


			Public Sub New(ByVal row As CustomersRow, ByVal action As Global.System.Data.DataRowAction)
				Me.eventRow = row
				Me.eventAction = action
			End Sub


			Public ReadOnly Property Row() As CustomersRow
				Get
					Return Me.eventRow
				End Get
			End Property


			Public ReadOnly Property Action() As Global.System.Data.DataRowAction
				Get
					Return Me.eventAction
				End Get
			End Property
		End Class
	End Class
End Namespace

'INSTANT VB TODO TASK: There is no equivalent to #pragma directives in VB.NET:
'#pragma warning restore 1591