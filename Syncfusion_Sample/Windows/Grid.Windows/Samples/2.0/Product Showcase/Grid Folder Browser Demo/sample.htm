<html>
<h1> Grid Folder Browser Demo</h1>

<p>The EssentialGrid can be used to develop a powerful TreeView control owing to its flexibility. The tree nodes can be created through a custom <strong>TreeCell</strong> type. 
The <strong>GridStaticCellModel </strong>class is inherited to create this cell type. The plus/minus buttons of the tree nodes are selected by using the
<strong>ImageIndex</strong> property. </p>


<p>Given below is a sample image.</p>

<p><div align=center><img src="images/sample.png" alt="GridFolderBrowser screenshot" title="GridFolderBrowser" ></div></p>

<p><FONT SIZE=4><strong>Features</strong></FONT><br /></p>


<p><ul><li>This sample operates the grid in virtual mode in order to populate the data dynamically on demand, i.e., when the tree is expanded. 
The <strong>QueryCellInfo</strong>, <strong>QueryColCount</strong>, and <strong>QueryRowCount</strong> events must be handled in order to implement a virtual grid. 
These events provide basic information about the number of rows and columns and the values of the data.</li></ul></p>

<p>
<p>The following code example illustrates how to set the data from the data source.<p>&nbsp;</p>
</p>
</p>

<font color="#8D2E1C"><pre>
	void GridQueryCellInfo(object sender, GridQueryCellInfoEventArgs e) 
	{
		if (e.RowIndex > 0 && e.ColIndex > 0)
		{
		      e.Style.CellValue = externalData[e.RowIndex - 1].Items[e.ColIndex - 1];
		      if (e.ColIndex == 1)
		      {
			e.Style.CellType = "TreeCell";
			e.Style.Tag = externalData[e.RowIndex - 1].IndentLevel;
			e.Style.ImageIndex = (int) externalData[e.RowIndex - 1].ExpandState;
		      }
		}
		e.Handled = true;
	}
</pre></font>

<p><ul><li>The implementation uses a <strong>CollapsibleDataSource</strong> 
	class. This class makes use of a custom collection to hold a list of <strong>SampleData</strong> objects (Consider each of these objects as a row in the underlying grid). Each row carries information on a specific folder. Each SampleData 
	object has an <strong>IndentValue</strong> property, an <strong>ExpandState</strong> property, 
	and an <strong>Items</strong> string array that holds the different column values for this row. The column values display the folder details like the name of the folder, folder size, and so on. This class also contains the <STRONG>InsertData</STRONG> method which 
	retrieves the data of the inner subtree and inserts the data into the collection when a node is expanded. </li></ul></p>
</html>