<html><h1>Interactive Cell Demo</h1>

<p><p>Cell Type Demo illustrates the usage of different controls as celltypes in grid cells. You will learn how to place push buttons, 
radio butttons, check boxes. You can easily use a push-button cell next to a check box or a combo box. You can even place special controls in the row headers. </p></p>

<p>Essential Grid uses a control-sharing architecture. While a combo box may appear 
    in many different cells (even with different drop-list content), there is 
    usually only a single combo box that is moved around and populated as needed. 
    This architecture allows Essential Grid to have many different controls without 
    the overhead of creating multiple controls of the same type. You can even create 
    your own custom control types. </p><p>Given below is an image of the sample.</p></p>

<p align=center><img src="images/sample.png" alt="Cell Types screenshot" title="Cell Types" /></p>

<p><strong>Features</strong>:</p>
<p><i><b>PushButtons</b></i></p>

<ul><li> Set the <b>CellType</b> as <b>PushButton</b> using the below code snippet.</ul>
<font color="#8D2E1C"><pre>       		gridControl1[rowIndex,colIndex].CellType = "PushButton";</pre></font>
			
<ul><li> To set text for <b>PushButton</b> celltype, use the <strong>Description </strong>&nbsp;property.</ul>
<font color="#8D2E1C"><pre>
    		gridControl1[rowIndex,colIndex].Description = "PushButton1";</pre>
</font>
<p>
    <i><b>CheckBoxes</b></i></p>

<ul>
    <li> Set the <b>CellType</b> as <b>CheckBox</b>, and define its value in the <strong>CheckBoxOptions</strong> property.  
	To have a tri-state checkbox(Checked, Unchecked, Indeterminated), set <strong>TriState</strong> property to <em>true</em>.</ul>

<font color="#8D2E1C"><pre>
    		gridControl1.TableStyle.CheckBoxOptions = new GridCheckBoxCellInfo("True", "False", "", false);
    		gridControl1[rowIndex,colIndex].CellValue = false;
    		gridControl1[rowIndex,colIndex].Description = "Click Me";
    		gridControl1[rowIndex,colIndex].CellType = "CheckBox";
    		gridControl1[rowIndex,colIndex].TriState = false;  </pre></font><FONT COLOR="#000000">
<P>
    <i><b>RadioButtons</b></i></P>
<UL>
	<LI>
        <P>This cell type enables
	multiple radio buttons in a cell. Their behavior is grouped.</P>
</UL>
<PRE STYLE="margin-left: 0.29in; margin-bottom: 0.2in"><FONT COLOR="#800000">      this.gridControl1[2, 2].CellType = &quot;RadioButton&quot;; </FONT> </PRE>
<UL>
	<LI>
        <P>The number of radio buttons
	needed is set to an instance of the string collection and added
	using the   <STRONG>ChoiceList</STRONG>
	property of a particular cell as follows.</P>
</UL>
<PRE STYLE="margin-left: 0.29in"><FONT COLOR="#800000">     sc = new StringCollection();</FONT>
<FONT COLOR="#800000">     sc.AddRange(new String[]{&quot;button 0&quot;,&quot;button 1/disabled&quot;,&quot;button 2&quot;,&quot;button 3&quot;});</FONT>
<FONT COLOR="#800000">     this.gridControl1[2, 2].ChoiceList = sc;</FONT>  </PRE>
<UL>
	<LI><P>To disable the radio button, append <STRONG>&quot;/disabled&quot;</STRONG> to the text of the radiobutton as shown in the above code.</P>
	<LI><P>Set the cell value of the radio button cell to the index of a string collection to enable
	a particular button as <EM>selected.</EM></P>
</UL>


</html>