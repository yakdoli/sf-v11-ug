<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML>
<HEAD>
	<META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset=windows-1252">
	<TITLE></TITLE>
	<META NAME="GENERATOR" CONTENT="OpenOffice.org 2.0  (Win32)">
	<META NAME="CREATED" CONTENT="20090102;6134212">
	<META NAME="CHANGEDBY" CONTENT="jisha j">
	<META NAME="CHANGED" CONTENT="20090102;6142295">
</HEAD>
<BODY LANG="en-US" DIR="LTR">
<H1>Refresh Grid Demo</H1>
<P>This sample illustrates how to optimize a grid for fast update scenarios. 
It provides a specialized volatile data cache that works best for non-virtual grids with a
limited number of rows and columns. It also shows how to use the
GDI<EM> interop </EM>routines to increase maximum performance. 
</P>
<P><FONT SIZE=4><strong>Features</strong></FONT></P>
<ul>
	<LI><P>Every twenty milliseconds, a timer event is raised.</P>
	<LI><P>In the event handler, it changes all the cell values three times
and it inserts and removes one-third of the rows and columns.</P>
	<LI><P>The <STRONG>PrepareViewStyleInfo</STRONG> is used to provide
a red background for specific cells. 
</P>
	<LI><P>This sample builds on the performance sample of <STRONG>OneTimeQueryCellInfo</STRONG>, 
	and uses the same derived classes most of the time.</P>
	<LI><P>In this sample, the derived grid control has additional properties
and methods that are used to illustrate additional performance
enhancements.</P>
</ul>
<P ALIGN=CENTER><img src="images/sample.png" NAME="graphics1" ALT="RefreshGrid screenshot" ALIGN=BOTTOM  BORDER=0></P>
<P>Here are the property settings of the derived Grid Control that
affects the performance. The first three are properties of the derived
class, and the latter three are inherited from the grid control. 
</P>
<UL>
	<LI><P><B>Use GDI </B>- Indicates whether the grid should use a GDI or
	a GDI+ to manage the drawing of text and backgrounds. In some
	situations, it would be more efficient to use a GDI drawing. This is
	implemented by the derived grid in the <STRONG>OnDrawCellDisplayText</STRONG>
	and the <STRONG>OnFillRectangleHook</STRONG> overrides. It uses
	call-to-static helper methods in the library code that accesses the
	GDI routines through the <EM>interop</EM>. 
	</P>
	<LI><P><B>Use Double Buffer</B>- Controls double buffering support
	when the .NET Framework is used. With double buffering turned on,
	the grid must call <STRONG>base.OnPaintBackground</STRONG> so that
	the background is drawn properly. 
	</P>
	<LI><P><B>Use Grid Non-Virtual Data Cache</B>- Controls the raising
	of <STRONG>QueryCellInfo</STRONG> just once or constantly. This is
	discussed in detail in the <STRONG>OneTimeQueryCellInfo</STRONG>
	performance sample. 
	</P>
	<LI><P><B>Optimize Draw Background</B>- Combine cells having the
	same background in order to draw them with one paint operation
	instead of drawing the background for each cell individually. 
	</P>
	<LI><P><B>Optimize Insert-Remove Cells</B>- Specifies if
	inserting and removing cells should be optimized by scrolling the
	window content and only invalidating new cells, instead of redrawing
	the whole display. 
	</P>
	<LI><P ALIGN=LEFT><B>Supports PrepareViewStyleInfo</B>- By
	default, the grid will make a copy of any style object before
	painting and will call the <STRONG>PrepareViewStyleInfo</STRONG>
	event. Changes that are made to the style object will then be
	discarded after the painting. The same is true with <STRONG>DrawCell</STRONG>
	and other events. Having a copy of the style will enable you to
	change the style object just for the purpose of drawing. If you do
	not have a need for this, and want to increase the scrolling
	performance of the grid, then set this property to <EM>false</EM>. 
	</P>
</UL>
</BODY>
</HTML>