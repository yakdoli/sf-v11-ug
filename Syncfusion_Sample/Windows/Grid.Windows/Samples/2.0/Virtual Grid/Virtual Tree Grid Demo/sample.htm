<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML>
<HEAD>
	<META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset=windows-1252">
	<TITLE></TITLE>
	<META NAME="GENERATOR" CONTENT="OpenOffice.org 2.0  (Win32)">
	<META NAME="CREATED" CONTENT="20081230;7045567">
	<META NAME="CHANGED" CONTENT="20081230;7071092">
</HEAD>
<BODY LANG="en-US" DIR="LTR">
<H1>Virtual Tree Grid Demo</H1>
<P>This sample displays an ordered, flat data source as a tree. Here,
a &quot;<STRONG>flat</STRONG>&quot; data source indicates that all
rows in the data source will contain the same column and &quot;<STRONG>ordered</STRONG>&quot;
implies that no row can be a child of a row with a higher row number.
Every row has an indentation value associated with it. Only rows 
below the given row, having higher indentation values, are considered
sub-nodes in the tree for a given row. The first row following the
given row, having an indentation value equal to or less than the
given rows, will not be treated as a sub-node. 
</P>
<P>The implementation uses a <STRONG>CollapsibleDataSource</STRONG>
class. This class has an array object that holds an array of sample
data objects (think of each of these objects as a row in the
underlying grid). Each sample data object has an <STRONG>IndentValue</STRONG>
property, an <STRONG>ExpandState</STRONG> property, and an <STRONG>Items</STRONG>
string array that holds the different column values for the row. If
you want to use a virtual tree grid to hold your data, you will have
to modify this sample data class to use your data instead of the
generic data that is provided. 
</P>
<P ALIGN=CENTER><img src="images/sample.png" NAME="graphics1" ALT="VirtTreeGrid  screenshot" ALIGN=BOTTOM  BORDER=0></P>
<P ALIGN=LEFT><FONT SIZE=4><B>Features</B></FONT></P>
<UL>
	<LI><P><STRONG>QueryCellInfo</STRONG>, <STRONG>QueryColCount</STRONG>,
	and <STRONG>QueryRowCount</STRONG> are events to be handled in order
	to implement a virtual grid.</P>
</UL>
<P STYLE="margin-left: 0.49in"> They provide the basic information
about the number of rows and columns, and the values of data.</P>
<UL>
	<LI><P>Data from the data source is set using the <STRONG>QueryCellInfo</STRONG>
	handler.</P>
</UL>

<UL>
	<LI><P>A tree cell is a custom cell type and <STRONG>GridStaticCellModel</STRONG>
	is inherited to create this cell type.</P>
</UL>
<P STYLE="margin-left: 0.49in"> The <STRONG>Model </STRONG>class
handles the serialization requirements for the control and creates
the <STRONG>Renderer</STRONG> class. The renderer class handles the
UI requirements of the cell, such as drawing and handling mouse
actions.</P>
<UL>
	<LI><P>Context menu for column 1 and events are described in the<STRONG>
	</STRONG>custom <STRONG>CellType</STRONG></P>
</UL>
<UL>
	<LI><P>Using the <STRONG>ImageIndex</STRONG> property, the images of
	+/- buttons are chosen.</P>
</UL>
<UL>
	<LI><P>Each cell is positively and negatively indented by increasing
	and decreasing the <STRONG>Tag</STRONG> property, which is taken to
	the <STRONG>OnDraw</STRONG> override as the drawing point.</P>
</UL>
<UL>
	<LI><P><STRONG>QueryColCount</STRONG> and<STRONG> QueryRowCount</STRONG>
	are events used to return the column and row count that are in demand.</P>
</UL>
<UL>
	<LI><P>The<STRONG> SaveCellInfo</STRONG> event is used to store data
	back into the data source when data is changed or modified.</P>
</UL>
<UL>
	<LI><P><STRONG>QueryRowHeight</STRONG> and <STRONG>QueryColWidth
	</STRONG>handlers are used to set the size of a row or column (optional).</P>
</UL>
<UL>
	<LI><P>The virtual grid is refreshed by calling <STRONG>ResetVolatileData,</STRONG>
	and all other events described above are triggered for this call.</P>
</UL>
<UL>
	<LI><P ALIGN=LEFT STYLE="font-weight: medium">This sample also
	illustrates serialization in binary format.</P>
</UL>
<UL>
	<P></P>
</UL>
</BODY>
</HTML>