<html>
<h1> Getting Started - Derived Cell Control Tutorial </h1>

<p>Derived Cell Control Tutorial provides step-by-step instructions to derive cell controls and customize cell behavior. In this tutorial, we have created a <strong>LinkLabel</strong> cell.   </p>


<p>In general, a cell type requires a <strong>model</strong> class and a <strong>renderer</strong> class. The model class handles the serialization requirements for the control and creates the renderer class. The renderer class handles the UI requirements of the cell, such as drawing and handling mouse actions. </p>

<p>For our <strong>LinkLabel</strong> sample, we have derived both the model class and the renderer class from the <strong>GridStaticCellModel</strong> and <strong>GridStaticCellRenderer</strong> classes of Essential Grid.</p>

<p><div align=center><img src="images/sample.png" alt="Getting started screenshot" title="Getting Started" ></div></p>

<p><FONT SIZE=4><strong>Features</strong></FONT><br /></p>


<p><ul><li>Overriding CreateRenderer of the model class will create an instance of RendererBase.</li></ul></p>


</p>

<font color="#8D2E1C"><pre>
	 public override GridCellRendererBase CreateRenderer(GridControlBase control)

            {

                return new LinkLabelCellRenderer(control, this);

            }  
</pre></font>

<p><ul><li> This custom cell type runs the <strong>iexplore.exe</strong> file in the overridden <strong>OnMouseUp</strong> handler, which is in the renderer class; the arguments are set by getting the string that is stored in the <strong>Tag</strong> property. The code to launch the browser is given below: </li></ul></p>

<font color="#8D2E1C"><pre>
	System.Diagnostics.Process process = new System.Diagnostics.Process();

            process.StartInfo.FileName = EXEname;

            process.StartInfo.Arguments = (string) style.Tag;

            process.Start();  
</pre></font>


<p><ul><li>  By overriding the OnMouseHoverEnter, OnMouseHoverLeave, and OnDraw events, the link label is highlighted while mouse hovering.

             The link label cell type is added through the Add function of the Grid.CellModels property</li></ul></p>

<font color="#8D2E1C"><pre>
	gridControl1.CellModels.Add("LinkLabelCell", new LinkLabelCellModel(gridControl1.Model));   
</pre></font>



<p><ul><li>Assign a cell type and pass the URL through the tag; the cell will behave as a link label cell.</li></ul></p>
<font color="#8D2E1C"><pre>
	    gridControl1[rowIndex, 2].CellType = "LinkLabelCell";

            gridControl1[rowIndex, 2].Text = "Syncfusion, Inc.";

            gridControl1[rowIndex, 2].Tag = "http://www.syncfusion.com"; 
</pre></font>

<p><FONT SIZE=4><strong>Interactive Features</strong></FONT><br /></p>

<p><ul><li>     The link label cells will be highlighted on mouse hovering

                Clicking the cell will direct you to the website specified in Tag property.</li></ul></p>
</html>
