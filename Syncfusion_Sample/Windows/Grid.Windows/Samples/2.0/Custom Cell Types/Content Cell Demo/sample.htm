<html><h1>ContentCell Demo</h1>

<p>DropDownCell Demo illustrates the usage of different controls as celltypes in grid cells. You will learn how to place 
    chart controls, pictureboxes, html&nbsp; and Gridcontrols 
into cells. </p><p>Essential Grid uses a control-sharing architecture. While a combo box may appear in many different cells (even with different drop-list content), there is usually only a single combo box that is moved around and populated as needed. This architecture allows Essential Grid to have many different controls without the overhead of creating multiple controls of the same type. You can even create your own custom control types. Other samples like Derived Cell Control Tutorial, Cell Buttons and Virtual Tree Grid have examples of derived cell controls. </p><p>Given below is an image of the sample.</p><p align=center><img src="images/sample.png" alt="Cell Types screenshot" title="Cell Types" /></p>

<p><strong>Features</strong>:</p>
<p><i><b>ChartCell</b></i></p>
<UL>
	<LI><P>To have a chart cell, set the CellType property to &quot;ChartCell&quot;</P>
	<PRE STYLE="margin-left: 0.75in"><FONT COLOR="#800000"> style.CellType = &quot;ChartCell&quot;;</FONT></PRE>
	<LI><P>Built-in custom style properties can be associated with chart
	cells</P>
	</UL>
<P><FONT SIZE=4><i>Interactive Features</i><B>:</B></FONT></P>
<UL>
	<LI><P>You can interact with the chart cell instantaneously by changing
	chart data at run-time</P>
	<LI><P>You can navigate between different cells using the Arrow keys or using Mouse</P>
	<LI><P>Dynamically change the settings in the property grid and monitor those
	changes applied to the current cell</P>
</UL>
<p><i><b>GridInCell</b></i></p>
<UL>
	<LI><P><STRONG>GridGenericControlCellModel</STRONG>
	class is inherited. The <STRONG>model</STRONG>
	class handles the serialization requirements for the
	control and creates the <STRONG>renderer</STRONG>
	class which handles the UI requirements of
	the cell, such as drawing it, handling mouse actions, etc. The <STRONG>GridGenericControlCellRenderer</STRONG> class is useful if you need support for
	embedding any custom .NET control inside a cell.</P>
	<LI><P>A custom cell type is registered by
	adding an instance of the <STRONG>GridCellModelBase</STRONG> derived
	class to the grid <STRONG>CellModels</STRONG> collection and by
	passing a string that is used as the <STRONG>Style.CellType</STRONG>
	value for this custom cell type.</P>
    <LI>

	value for this custom cell type.</P>
    <LI>
        <P>
            This special cell type requires you to create instances for
	each grid that are used in the cells with the <STRONG>CellEmbeddedGrid</STRONG>
	class and by passing the parent grid in that constructor.</P>
</UL>
<PRE><FONT COLOR="#8d2e1c">      GridControl grid;</FONT>
<FONT COLOR="#8d2e1c">      this.gridControl1[2,2].CellType = &quot;GridinCell&quot;;</FONT>
<FONT COLOR="#8d2e1c">      this.gridControl1.CoveredRanges.Add(GridRangeInfo.Cells(2, 2, 6, 4));</FONT>
<FONT COLOR="#8d2e1c">      grid = new CellEmbeddedGrid(this.gridControl1);</FONT>
<FONT COLOR="#8d2e1c">      <FONT SIZE=2>this.gridControl1[2,2].Control = grid; </FONT></FONT> </PRE>
<UL>
	<LI><P>With that instance, the grid properties can be set on each
	grid used in the cells.</P>
</UL>  

<PRE><FONT COLOR="#8d2e1c">      grid.RowCount = 5;</FONT>
<FONT COLOR="#8d2e1c">      grid.ColCount = 5;</FONT>
<FONT COLOR="#8d2e1c">      grid[1,1].Text = &quot;this is a 5x5 grid&quot;;</FONT>
<FONT COLOR="#8d2e1c">      grid.ThemesEnabled = true;</FONT> </PRE>

<p><i><b>XHTML Cell</b></i></p>
<UL>
	<LI><P>Custom cell types require you to derive two classes:
	<STRONG>GridCellModelBase</STRONG> and <STRONG>GridCellRendererBase</STRONG>.
		</P>
	<LI><P>The cellmodel class handles any serialization if required and
	also recreates the renderer class that is
	associated with the cell type. 
	</P>
	<LI><P>The cellrenderer class manages the UI aspects of the cell
	type.</P>
</UL>
<p><i><b>PictureBox</b></i></p>
<UL>
	<LI><P><STRONG>CellType</STRONG> property should be set to &quot;Calendar&quot; for the cells that
	need to have custom cell control. 
	</P>
	<LI><P>This sample creates a Month Calendar control for every cell.<STRONG> CalendarCellRenderer</STRONG>
	will then manage that <B>MonthCalendar</B> control and displays it
	inside the cell.</P>

	<LI><P ALIGN=LEFT STYLE="background: transparent; font-weight: medium">
	Additionally,
	<STRONG>ResizingRows</STRONG>
	and <STRONG>ResizingColumns</STRONG>
	events are handled in order to maintain the least minimization of the size
	of the control. By using <STRONG>SizeIndicatorBorder</STRONG> property 
	on the instances of <STRONG>GridResizingRowsEventArgs</STRONG>
	and <STRONG>GridResizingColumnsEventArgs</STRONG>,
	the resizing indicator can be changed. This has been illustrated in
	the images below:</P>
</UL>
<P ALIGN=CENTER>
    <img src="images/sample2.png" 
        NAME="graphics2" ALT="Calendar Cells screenshot" ALIGN=BOTTOM WIDTH=318 
        HEIGHT=236 BORDER=0>
</P>
<p>&nbsp;</p>


</html>