
<HTML>
<HEAD>
	<META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset=windows-1252">
	<TITLE></TITLE>
	<META NAME="GENERATOR" CONTENT="OpenOffice.org 2.3  (Win32)">
	<META NAME="CREATED" CONTENT="0;0">
	<META NAME="CHANGED" CONTENT="20090103;3022695">
	<STYLE TYPE="text/css">
	<!--
		@page { size: 8.5in 11in }
	-->
	</STYLE>
</HEAD>
<BODY LANG="en-US" DIR="LTR">
<H1>IBindingList Demo</H1>
<P>This sample demonstrates the implementation of the <STRONG>IBindingList
</STRONG>for an array list that is used internally, and it also shows
how to bind this list to a Grid Grouping control. 
</P>
<UL>
	<P STYLE="line-height: 0.14in"><FONT COLOR="#000000"><FONT FACE="Times New Roman, serif"><FONT SIZE=4><B>Features:</B></FONT></FONT></FONT></P>
	<li>
	<P STYLE="line-height: 0.14in">Implementing the <STRONG>IBindingList</STRONG>
	 requires utilization of all members of <STRONG>IBindingList</STRONG>,
	<STRONG>IList</STRONG>, <STRONG>ICollection</STRONG>, and
	<STRONG>IEnumerable</STRONG> interfaces. Benefits of using
	<STRONG>IBindingList</STRONG> include support for change
	notifications when the list is modified.</P>
	</li>
	<li>
	<P STYLE="line-height: 0.14in">It has a <STRONG>ListChanged
	</STRONG>event, which is fired when any data changes</P>
	</li>
	<li>
	<P STYLE="line-height: 0.14in">If the collection supports
	changes, it should also support firing a <B>ListChanged</B> event
	when the collection changes.</P>
	</li>
	<li>
	<P STYLE="line-height: 0.14in">To indicate this, it should
	return <EM>true</EM> from the <B>SupportsChangeNotification</B>
	property.</P>
	</li>
	<li>
	<P STYLE="line-height: 0.14in">When items are added or
	removed from the collection, the Grid Grouping control is notified
	of these changes and updates itself automatically.</P>
	</li>
	<li>
	<P STYLE="line-height: 0.14in">This sample implements the
	<STRONG>INotifiedPropertyChanged</STRONG> interface to make the
	collection aware of  property changes.</P>
	</li>
</UL>
<P><B>Benefits</B><BR><BR>The benefits of using <STRONG>IBindingList</STRONG>
include support for change notifications when the list is modified.
It does have a <STRONG>ListChanged </STRONG>event, which will be
fired when any data changes. If the collection supports changes, it
should also support firing a <B>ListChanged</B> event when the
collection changes. To indicate that, it should return <EM>true</EM>
from the <B>SupportsChangeNotification</B> property. Hence, when
items are added or removed from the collection, the Grid Grouping
control will be notified of these changes and will update itself
automatically.</P>
<P>This sample also implements the <STRONG>INotifiedPropertyChanged</STRONG>
interface used to make the collection aware of any property changes.</P>
<P ALIGN=CENTER><img src="images/sample.png" NAME="graphics1" ALT="IBindingList screenshot" ALIGN=BOTTOM  BORDER=0></P>
<P class="style1"><strong>Interactive Features:</strong><BR>
</P>
<P>Follow these steps to experience the benefits of the <STRONG>ListChanged</STRONG>
event.</P>
<UL>
	<LI><P>Implement the <STRONG>ListChanged </STRONG>event. 
	</P>
	<PRE><FONT COLOR="#8d2e1c">public event System.ComponentModel.ListChangedEventHandler ListChanged;</FONT>

<FONT COLOR="#8d2e1c">void RaiseListChanged(ListChangedType type, int index)</FONT>
<FONT COLOR="#8d2e1c">        {</FONT>
<FONT COLOR="#8d2e1c">            if (ListChanged != null)</FONT>
<FONT COLOR="#8d2e1c">                ListChanged(this, new ListChangedEventArgs(type, index));</FONT>
<FONT COLOR="#8d2e1c">        }</FONT>
</PRE>
</UL>
<UL>
	<LI><P>The <STRONG>SupportChangeNotification</STRONG> property
	should be made to return<EM> true</EM>. 
	</P>
	<PRE><FONT COLOR="#8d2e1c">public bool SupportsChangeNotification</FONT>
<FONT COLOR="#8d2e1c">        {</FONT>
<FONT COLOR="#8d2e1c">              get</FONT>
<FONT COLOR="#8d2e1c">              {</FONT>
<FONT COLOR="#8d2e1c">                 return true;</FONT>
<FONT COLOR="#8d2e1c">              }</FONT>
<FONT COLOR="#8d2e1c">        }</FONT>
<FONT COLOR="#8d2e1c"> </FONT></PRE>
</UL>
<UL>
	<LI><P>Raise the <STRONG>ListChanged</STRONG> event when there is a
	change in the list. 
	</P>
	<PRE><FONT COLOR="#8d2e1c">public int Add(object value)</FONT>
<FONT COLOR="#8d2e1c">        {</FONT>
<FONT COLOR="#8d2e1c">            int count = list.Add(value);</FONT>
<FONT COLOR="#8d2e1c">            RaiseListChanged(ListChangedType.ItemAdded, list.Count-1);</FONT>
<FONT COLOR="#8d2e1c">            return count;</FONT>
<FONT COLOR="#8d2e1c">        }</FONT>

<FONT COLOR="#8d2e1c">public void RemoveAt(int index)</FONT>
<FONT COLOR="#8d2e1c">        {</FONT>
<FONT COLOR="#8d2e1c">             list.RemoveAt(index);</FONT>
<FONT COLOR="#8d2e1c">             RaiseListChanged(ListChangedType.ItemDeleted, index);</FONT>
<FONT COLOR="#8d2e1c">        }</FONT>

<FONT COLOR="#8d2e1c">public void Insert(int index, object value)</FONT>
<FONT COLOR="#8d2e1c">        {</FONT>
<FONT COLOR="#8d2e1c">            list.Insert(index, value);</FONT>
<FONT COLOR="#8d2e1c">            RaiseListChanged(ListChangedType.ItemAdded, index);</FONT>
<FONT COLOR="#8d2e1c">        }</FONT>

<FONT COLOR="#8d2e1c">public void Remove(object value)</FONT>
<FONT COLOR="#8d2e1c">        {</FONT>
<FONT COLOR="#8d2e1c">            int index = list.IndexOf(value);</FONT>
<FONT COLOR="#8d2e1c">                        list.Remove(value);</FONT>
<FONT COLOR="#8d2e1c">            RaiseListChanged(ListChangedType.ItemDeleted, index);</FONT>
<FONT COLOR="#8d2e1c">        }</FONT>
<FONT COLOR="#8d2e1c"> </FONT></PRE>
</UL>
</BODY>
</HTML>