Imports Microsoft.VisualBasic
#Region "Copyright Syncfusion Inc. 2001 - 2013"
' Copyright Syncfusion Inc. 2001 - 2013. All rights reserved.
' Use of this code is subject to the terms of our license.
' A copy of the current license can be obtained at any time by e-mailing
' licensing@syncfusion.com. Any infringement will be prosecuted under
' applicable laws. 
#End Region
'INSTANT VB TODO TASK: There is no equivalent to #pragma directives in VB.NET:
'#pragma warning disable 1591
'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.3074
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Data
Imports System.Collections.Generic
Imports System.Reflection
Imports System.Linq
Imports System.Linq.Expressions
Imports System.ComponentModel
Imports System

Namespace ObserCollection_2008


	Partial Public Class Northwind
		Inherits System.Data.Linq.DataContext

		Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()

	#Region "Extensibility Method Definitions"
	Partial Private Sub OnCreated()
	End Sub
	Partial Private Sub InsertCategories(ByVal instance As Categories)
	End Sub
	Partial Private Sub UpdateCategories(ByVal instance As Categories)
	End Sub
	Partial Private Sub DeleteCategories(ByVal instance As Categories)
	End Sub
	Partial Private Sub InsertCustomers(ByVal instance As Customers)
	End Sub
	Partial Private Sub UpdateCustomers(ByVal instance As Customers)
	End Sub
	Partial Private Sub DeleteCustomers(ByVal instance As Customers)
	End Sub
	Partial Private Sub InsertEmployees(ByVal instance As Employees)
	End Sub
	Partial Private Sub UpdateEmployees(ByVal instance As Employees)
	End Sub
	Partial Private Sub DeleteEmployees(ByVal instance As Employees)
	End Sub
	Partial Private Sub InsertOrderDetails(ByVal instance As OrderDetails)
	End Sub
	Partial Private Sub UpdateOrderDetails(ByVal instance As OrderDetails)
	End Sub
	Partial Private Sub DeleteOrderDetails(ByVal instance As OrderDetails)
	End Sub
	Partial Private Sub InsertOrders(ByVal instance As Orders)
	End Sub
	Partial Private Sub UpdateOrders(ByVal instance As Orders)
	End Sub
	Partial Private Sub DeleteOrders(ByVal instance As Orders)
	End Sub
	Partial Private Sub InsertProducts(ByVal instance As Products)
	End Sub
	Partial Private Sub UpdateProducts(ByVal instance As Products)
	End Sub
	Partial Private Sub DeleteProducts(ByVal instance As Products)
	End Sub
	Partial Private Sub InsertShippers(ByVal instance As Shippers)
	End Sub
	Partial Private Sub UpdateShippers(ByVal instance As Shippers)
	End Sub
	Partial Private Sub DeleteShippers(ByVal instance As Shippers)
	End Sub
	Partial Private Sub InsertSuppliers(ByVal instance As Suppliers)
	End Sub
	Partial Private Sub UpdateSuppliers(ByVal instance As Suppliers)
	End Sub
	Partial Private Sub DeleteSuppliers(ByVal instance As Suppliers)
	End Sub
	#End Region

		Public Sub New(ByVal connection As String)
			MyBase.New(connection, mappingSource)
			OnCreated()
		End Sub

		Public Sub New(ByVal connection As System.Data.IDbConnection)
			MyBase.New(connection, mappingSource)
			OnCreated()
		End Sub

		Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
			MyBase.New(connection, mappingSource)
			OnCreated()
		End Sub

		Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
			MyBase.New(connection, mappingSource)
			OnCreated()
		End Sub

		Public ReadOnly Property Categories() As System.Data.Linq.Table(Of Categories)
			Get
				Return Me.GetTable(Of Categories)()
			End Get
		End Property

		Public ReadOnly Property Customers() As System.Data.Linq.Table(Of Customers)
			Get
				Return Me.GetTable(Of Customers)()
			End Get
		End Property

		Public ReadOnly Property Employees() As System.Data.Linq.Table(Of Employees)
			Get
				Return Me.GetTable(Of Employees)()
			End Get
		End Property

		Public ReadOnly Property OrderDetails() As System.Data.Linq.Table(Of OrderDetails)
			Get
				Return Me.GetTable(Of OrderDetails)()
			End Get
		End Property

		Public ReadOnly Property Orders() As System.Data.Linq.Table(Of Orders)
			Get
				Return Me.GetTable(Of Orders)()
			End Get
		End Property

		Public ReadOnly Property Products() As System.Data.Linq.Table(Of Products)
			Get
				Return Me.GetTable(Of Products)()
			End Get
		End Property

		Public ReadOnly Property Shippers() As System.Data.Linq.Table(Of Shippers)
			Get
				Return Me.GetTable(Of Shippers)()
			End Get
		End Property

		Public ReadOnly Property Suppliers() As System.Data.Linq.Table(Of Suppliers)
			Get
				Return Me.GetTable(Of Suppliers)()
			End Get
		End Property
	End Class

	<Table()> _
	Partial Public Class Categories
		Implements INotifyPropertyChanging, INotifyPropertyChanged

		Private Shared emptyChangingEventArgs As New PropertyChangingEventArgs(String.Empty)

		Private _CategoryID As Integer

		Private _CategoryName As String

		Private _Description As String

		Private _Picture As System.Data.Linq.Binary

		Private _Products As EntitySet(Of Products)

	#Region "Extensibility Method Definitions"
	Partial Private Sub OnLoaded()
	End Sub
	Partial Private Sub OnValidate(ByVal action As System.Data.Linq.ChangeAction)
	End Sub
	Partial Private Sub OnCreated()
	End Sub
	Partial Private Sub OnCategoryIDChanging(ByVal value As Integer)
	End Sub
	Partial Private Sub OnCategoryIDChanged()
	End Sub
	Partial Private Sub OnCategoryNameChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnCategoryNameChanged()
	End Sub
	Partial Private Sub OnDescriptionChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnDescriptionChanged()
	End Sub
	Partial Private Sub OnPictureChanging(ByVal value As System.Data.Linq.Binary)
	End Sub
	Partial Private Sub OnPictureChanged()
	End Sub
	#End Region

		Public Sub New()
			Me._Products = New EntitySet(Of Products)(New Action(Of Products)(AddressOf Me.attach_Products), New Action(Of Products)(AddressOf Me.detach_Products))
			OnCreated()
		End Sub

		<Column(Name:="Category ID", Storage:="_CategoryID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=True, IsDbGenerated:=True)> _
		Public Property CategoryID() As Integer
			Get
				Return Me._CategoryID
			End Get
			Set(ByVal value As Integer)
				If (Me._CategoryID <> value) Then
					Me.OnCategoryIDChanging(value)
					Me.SendPropertyChanging()
					Me._CategoryID = value
					Me.SendPropertyChanged("CategoryID")
					Me.OnCategoryIDChanged()
				End If
			End Set
		End Property

		<Column(Name:="Category Name", Storage:="_CategoryName", DbType:="NVarChar(15) NOT NULL", CanBeNull:=False)> _
		Public Property CategoryName() As String
			Get
				Return Me._CategoryName
			End Get
			Set(ByVal value As String)
				If (Me._CategoryName <> value) Then
					Me.OnCategoryNameChanging(value)
					Me.SendPropertyChanging()
					Me._CategoryName = value
					Me.SendPropertyChanged("CategoryName")
					Me.OnCategoryNameChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_Description", DbType:="NText", UpdateCheck:=UpdateCheck.Never)> _
		Public Property Description() As String
			Get
				Return Me._Description
			End Get
			Set(ByVal value As String)
				If (Me._Description <> value) Then
					Me.OnDescriptionChanging(value)
					Me.SendPropertyChanging()
					Me._Description = value
					Me.SendPropertyChanged("Description")
					Me.OnDescriptionChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_Picture", DbType:="Image", UpdateCheck:=UpdateCheck.Never)> _
		Public Property Picture() As System.Data.Linq.Binary
			Get
				Return Me._Picture
			End Get
			Set(ByVal value As System.Data.Linq.Binary)
				If (Me._Picture IsNot value) Then
					Me.OnPictureChanging(value)
					Me.SendPropertyChanging()
					Me._Picture = value
					Me.SendPropertyChanged("Picture")
					Me.OnPictureChanged()
				End If
			End Set
		End Property

		<Association(Name:="Categories_Products", Storage:="_Products", ThisKey:="CategoryID", OtherKey:="CategoryID")> _
		Public Property Products() As EntitySet(Of Products)
			Get
				Return Me._Products
			End Get
			Set(ByVal value As EntitySet(Of Products))
				Me._Products.Assign(value)
			End Set
		End Property

		Public Event PropertyChanging As PropertyChangingEventHandler Implements INotifyPropertyChanging.PropertyChanging

		Public Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged

		Protected Overridable Sub SendPropertyChanging()
			If (Me.PropertyChangingEvent IsNot Nothing) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub

		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As String)
			If (Me.PropertyChangedEvent IsNot Nothing) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub

		Private Sub attach_Products(ByVal entity As Products)
			Me.SendPropertyChanging()
			entity.Categories = Me
		End Sub

		Private Sub detach_Products(ByVal entity As Products)
			Me.SendPropertyChanging()
			entity.Categories = Nothing
		End Sub
	End Class

	<Table()> _
	Partial Public Class Customers
		Implements INotifyPropertyChanging, INotifyPropertyChanged

		Private Shared emptyChangingEventArgs As New PropertyChangingEventArgs(String.Empty)

		Private _CustomerID As String

		Private _CompanyName As String

		Private _ContactName As String

		Private _ContactTitle As String

		Private _Address As String

		Private _City As String

		Private _Region As String

		Private _PostalCode As String

		Private _Country As String

		Private _Phone As String

		Private _Fax As String

		Private _Orders As EntitySet(Of Orders)

	#Region "Extensibility Method Definitions"
	Partial Private Sub OnLoaded()
	End Sub
	Partial Private Sub OnValidate(ByVal action As System.Data.Linq.ChangeAction)
	End Sub
	Partial Private Sub OnCreated()
	End Sub
	Partial Private Sub OnCustomerIDChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnCustomerIDChanged()
	End Sub
	Partial Private Sub OnCompanyNameChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnCompanyNameChanged()
	End Sub
	Partial Private Sub OnContactNameChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnContactNameChanged()
	End Sub
	Partial Private Sub OnContactTitleChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnContactTitleChanged()
	End Sub
	Partial Private Sub OnAddressChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnAddressChanged()
	End Sub
	Partial Private Sub OnCityChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnCityChanged()
	End Sub
	Partial Private Sub OnRegionChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnRegionChanged()
	End Sub
	Partial Private Sub OnPostalCodeChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnPostalCodeChanged()
	End Sub
	Partial Private Sub OnCountryChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnCountryChanged()
	End Sub
	Partial Private Sub OnPhoneChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnPhoneChanged()
	End Sub
	Partial Private Sub OnFaxChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnFaxChanged()
	End Sub
	#End Region

		Public Sub New()
			Me._Orders = New EntitySet(Of Orders)(New Action(Of Orders)(AddressOf Me.attach_Orders), New Action(Of Orders)(AddressOf Me.detach_Orders))
			OnCreated()
		End Sub

		<Column(Name:="Customer ID", Storage:="_CustomerID", DbType:="NVarChar(5) NOT NULL", CanBeNull:=False, IsPrimaryKey:=True)> _
		Public Property CustomerID() As String
			Get
				Return Me._CustomerID
			End Get
			Set(ByVal value As String)
				If (Me._CustomerID <> value) Then
					Me.OnCustomerIDChanging(value)
					Me.SendPropertyChanging()
					Me._CustomerID = value
					Me.SendPropertyChanged("CustomerID")
					Me.OnCustomerIDChanged()
				End If
			End Set
		End Property

		<Column(Name:="Company Name", Storage:="_CompanyName", DbType:="NVarChar(40) NOT NULL", CanBeNull:=False)> _
		Public Property CompanyName() As String
			Get
				Return Me._CompanyName
			End Get
			Set(ByVal value As String)
				If (Me._CompanyName <> value) Then
					Me.OnCompanyNameChanging(value)
					Me.SendPropertyChanging()
					Me._CompanyName = value
					Me.SendPropertyChanged("CompanyName")
					Me.OnCompanyNameChanged()
				End If
			End Set
		End Property

		<Column(Name:="Contact Name", Storage:="_ContactName", DbType:="NVarChar(30)")> _
		Public Property ContactName() As String
			Get
				Return Me._ContactName
			End Get
			Set(ByVal value As String)
				If (Me._ContactName <> value) Then
					Me.OnContactNameChanging(value)
					Me.SendPropertyChanging()
					Me._ContactName = value
					Me.SendPropertyChanged("ContactName")
					Me.OnContactNameChanged()
				End If
			End Set
		End Property

		<Column(Name:="Contact Title", Storage:="_ContactTitle", DbType:="NVarChar(30)")> _
		Public Property ContactTitle() As String
			Get
				Return Me._ContactTitle
			End Get
			Set(ByVal value As String)
				If (Me._ContactTitle <> value) Then
					Me.OnContactTitleChanging(value)
					Me.SendPropertyChanging()
					Me._ContactTitle = value
					Me.SendPropertyChanged("ContactTitle")
					Me.OnContactTitleChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_Address", DbType:="NVarChar(60)")> _
		Public Property Address() As String
			Get
				Return Me._Address
			End Get
			Set(ByVal value As String)
				If (Me._Address <> value) Then
					Me.OnAddressChanging(value)
					Me.SendPropertyChanging()
					Me._Address = value
					Me.SendPropertyChanged("Address")
					Me.OnAddressChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_City", DbType:="NVarChar(15)")> _
		Public Property City() As String
			Get
				Return Me._City
			End Get
			Set(ByVal value As String)
				If (Me._City <> value) Then
					Me.OnCityChanging(value)
					Me.SendPropertyChanging()
					Me._City = value
					Me.SendPropertyChanged("City")
					Me.OnCityChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_Region", DbType:="NVarChar(15)")> _
		Public Property Region() As String
			Get
				Return Me._Region
			End Get
			Set(ByVal value As String)
				If (Me._Region <> value) Then
					Me.OnRegionChanging(value)
					Me.SendPropertyChanging()
					Me._Region = value
					Me.SendPropertyChanged("Region")
					Me.OnRegionChanged()
				End If
			End Set
		End Property

		<Column(Name:="Postal Code", Storage:="_PostalCode", DbType:="NVarChar(10)")> _
		Public Property PostalCode() As String
			Get
				Return Me._PostalCode
			End Get
			Set(ByVal value As String)
				If (Me._PostalCode <> value) Then
					Me.OnPostalCodeChanging(value)
					Me.SendPropertyChanging()
					Me._PostalCode = value
					Me.SendPropertyChanged("PostalCode")
					Me.OnPostalCodeChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_Country", DbType:="NVarChar(15)")> _
		Public Property Country() As String
			Get
				Return Me._Country
			End Get
			Set(ByVal value As String)
				If (Me._Country <> value) Then
					Me.OnCountryChanging(value)
					Me.SendPropertyChanging()
					Me._Country = value
					Me.SendPropertyChanged("Country")
					Me.OnCountryChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_Phone", DbType:="NVarChar(24)")> _
		Public Property Phone() As String
			Get
				Return Me._Phone
			End Get
			Set(ByVal value As String)
				If (Me._Phone <> value) Then
					Me.OnPhoneChanging(value)
					Me.SendPropertyChanging()
					Me._Phone = value
					Me.SendPropertyChanged("Phone")
					Me.OnPhoneChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_Fax", DbType:="NVarChar(24)")> _
		Public Property Fax() As String
			Get
				Return Me._Fax
			End Get
			Set(ByVal value As String)
				If (Me._Fax <> value) Then
					Me.OnFaxChanging(value)
					Me.SendPropertyChanging()
					Me._Fax = value
					Me.SendPropertyChanged("Fax")
					Me.OnFaxChanged()
				End If
			End Set
		End Property

		<Association(Name:="Customers_Orders", Storage:="_Orders", ThisKey:="CustomerID", OtherKey:="CustomerID")> _
		Public Property Orders() As EntitySet(Of Orders)
			Get
				Return Me._Orders
			End Get
			Set(ByVal value As EntitySet(Of Orders))
				Me._Orders.Assign(value)
			End Set
		End Property

		Public Event PropertyChanging As PropertyChangingEventHandler Implements INotifyPropertyChanging.PropertyChanging

		Public Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged

		Protected Overridable Sub SendPropertyChanging()
			If (Me.PropertyChangingEvent IsNot Nothing) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub

		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As String)
			If (Me.PropertyChangedEvent IsNot Nothing) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub

		Private Sub attach_Orders(ByVal entity As Orders)
			Me.SendPropertyChanging()
			entity.Customers = Me
		End Sub

		Private Sub detach_Orders(ByVal entity As Orders)
			Me.SendPropertyChanging()
			entity.Customers = Nothing
		End Sub
	End Class

	<Table()> _
	Partial Public Class Employees
		Implements INotifyPropertyChanging, INotifyPropertyChanged

		Private Shared emptyChangingEventArgs As New PropertyChangingEventArgs(String.Empty)

		Private _EmployeeID As Integer

		Private _LastName As String

		Private _FirstName As String

		Private _Title As String

		Private _BirthDate? As System.DateTime

		Private _HireDate? As System.DateTime

		Private _Address As String

		Private _City As String

		Private _Region As String

		Private _PostalCode As String

		Private _Country As String

		Private _HomePhone As String

		Private _Extension As String

		Private _Photo As System.Data.Linq.Binary

		Private _Notes As String

		Private _ReportsTo? As Integer

		Private _Orders As EntitySet(Of Orders)

	#Region "Extensibility Method Definitions"
	Partial Private Sub OnLoaded()
	End Sub
	Partial Private Sub OnValidate(ByVal action As System.Data.Linq.ChangeAction)
	End Sub
	Partial Private Sub OnCreated()
	End Sub
	Partial Private Sub OnEmployeeIDChanging(ByVal value As Integer)
	End Sub
	Partial Private Sub OnEmployeeIDChanged()
	End Sub
	Partial Private Sub OnLastNameChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnLastNameChanged()
	End Sub
	Partial Private Sub OnFirstNameChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnFirstNameChanged()
	End Sub
	Partial Private Sub OnTitleChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnTitleChanged()
	End Sub
	Partial Private Sub OnBirthDateChanging(ByVal value? As System.DateTime)
	End Sub
	Partial Private Sub OnBirthDateChanged()
	End Sub
	Partial Private Sub OnHireDateChanging(ByVal value? As System.DateTime)
	End Sub
	Partial Private Sub OnHireDateChanged()
	End Sub
	Partial Private Sub OnAddressChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnAddressChanged()
	End Sub
	Partial Private Sub OnCityChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnCityChanged()
	End Sub
	Partial Private Sub OnRegionChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnRegionChanged()
	End Sub
	Partial Private Sub OnPostalCodeChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnPostalCodeChanged()
	End Sub
	Partial Private Sub OnCountryChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnCountryChanged()
	End Sub
	Partial Private Sub OnHomePhoneChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnHomePhoneChanged()
	End Sub
	Partial Private Sub OnExtensionChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnExtensionChanged()
	End Sub
	Partial Private Sub OnPhotoChanging(ByVal value As System.Data.Linq.Binary)
	End Sub
	Partial Private Sub OnPhotoChanged()
	End Sub
	Partial Private Sub OnNotesChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnNotesChanged()
	End Sub
	Partial Private Sub OnReportsToChanging(ByVal value? As Integer)
	End Sub
	Partial Private Sub OnReportsToChanged()
	End Sub
	#End Region

		Public Sub New()
			Me._Orders = New EntitySet(Of Orders)(New Action(Of Orders)(AddressOf Me.attach_Orders), New Action(Of Orders)(AddressOf Me.detach_Orders))
			OnCreated()
		End Sub

		<Column(Name:="Employee ID", Storage:="_EmployeeID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=True, IsDbGenerated:=True)> _
		Public Property EmployeeID() As Integer
			Get
				Return Me._EmployeeID
			End Get
			Set(ByVal value As Integer)
				If (Me._EmployeeID <> value) Then
					Me.OnEmployeeIDChanging(value)
					Me.SendPropertyChanging()
					Me._EmployeeID = value
					Me.SendPropertyChanged("EmployeeID")
					Me.OnEmployeeIDChanged()
				End If
			End Set
		End Property

		<Column(Name:="Last Name", Storage:="_LastName", DbType:="NVarChar(20) NOT NULL", CanBeNull:=False)> _
		Public Property LastName() As String
			Get
				Return Me._LastName
			End Get
			Set(ByVal value As String)
				If (Me._LastName <> value) Then
					Me.OnLastNameChanging(value)
					Me.SendPropertyChanging()
					Me._LastName = value
					Me.SendPropertyChanged("LastName")
					Me.OnLastNameChanged()
				End If
			End Set
		End Property

		<Column(Name:="First Name", Storage:="_FirstName", DbType:="NVarChar(10) NOT NULL", CanBeNull:=False)> _
		Public Property FirstName() As String
			Get
				Return Me._FirstName
			End Get
			Set(ByVal value As String)
				If (Me._FirstName <> value) Then
					Me.OnFirstNameChanging(value)
					Me.SendPropertyChanging()
					Me._FirstName = value
					Me.SendPropertyChanged("FirstName")
					Me.OnFirstNameChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_Title", DbType:="NVarChar(30)")> _
		Public Property Title() As String
			Get
				Return Me._Title
			End Get
			Set(ByVal value As String)
				If (Me._Title <> value) Then
					Me.OnTitleChanging(value)
					Me.SendPropertyChanging()
					Me._Title = value
					Me.SendPropertyChanged("Title")
					Me.OnTitleChanged()
				End If
			End Set
		End Property

		<Column(Name:="Birth Date", Storage:="_BirthDate", DbType:="DateTime")> _
		Public Property BirthDate() As System.DateTime?
			Get
				Return Me._BirthDate
			End Get
			Set(ByVal value? As System.DateTime)
				If (Not Me._BirthDate.Equals(value)) Then
					Me.OnBirthDateChanging(value)
					Me.SendPropertyChanging()
					Me._BirthDate = value
					Me.SendPropertyChanged("BirthDate")
					Me.OnBirthDateChanged()
				End If
			End Set
		End Property

		<Column(Name:="Hire Date", Storage:="_HireDate", DbType:="DateTime")> _
		Public Property HireDate() As System.DateTime?
			Get
				Return Me._HireDate
			End Get
			Set(ByVal value? As System.DateTime)
				If (Not Me._HireDate.Equals(value)) Then
					Me.OnHireDateChanging(value)
					Me.SendPropertyChanging()
					Me._HireDate = value
					Me.SendPropertyChanged("HireDate")
					Me.OnHireDateChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_Address", DbType:="NVarChar(60)")> _
		Public Property Address() As String
			Get
				Return Me._Address
			End Get
			Set(ByVal value As String)
				If (Me._Address <> value) Then
					Me.OnAddressChanging(value)
					Me.SendPropertyChanging()
					Me._Address = value
					Me.SendPropertyChanged("Address")
					Me.OnAddressChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_City", DbType:="NVarChar(15)")> _
		Public Property City() As String
			Get
				Return Me._City
			End Get
			Set(ByVal value As String)
				If (Me._City <> value) Then
					Me.OnCityChanging(value)
					Me.SendPropertyChanging()
					Me._City = value
					Me.SendPropertyChanged("City")
					Me.OnCityChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_Region", DbType:="NVarChar(15)")> _
		Public Property Region() As String
			Get
				Return Me._Region
			End Get
			Set(ByVal value As String)
				If (Me._Region <> value) Then
					Me.OnRegionChanging(value)
					Me.SendPropertyChanging()
					Me._Region = value
					Me.SendPropertyChanged("Region")
					Me.OnRegionChanged()
				End If
			End Set
		End Property

		<Column(Name:="Postal Code", Storage:="_PostalCode", DbType:="NVarChar(10)")> _
		Public Property PostalCode() As String
			Get
				Return Me._PostalCode
			End Get
			Set(ByVal value As String)
				If (Me._PostalCode <> value) Then
					Me.OnPostalCodeChanging(value)
					Me.SendPropertyChanging()
					Me._PostalCode = value
					Me.SendPropertyChanged("PostalCode")
					Me.OnPostalCodeChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_Country", DbType:="NVarChar(15)")> _
		Public Property Country() As String
			Get
				Return Me._Country
			End Get
			Set(ByVal value As String)
				If (Me._Country <> value) Then
					Me.OnCountryChanging(value)
					Me.SendPropertyChanging()
					Me._Country = value
					Me.SendPropertyChanged("Country")
					Me.OnCountryChanged()
				End If
			End Set
		End Property

		<Column(Name:="Home Phone", Storage:="_HomePhone", DbType:="NVarChar(24)")> _
		Public Property HomePhone() As String
			Get
				Return Me._HomePhone
			End Get
			Set(ByVal value As String)
				If (Me._HomePhone <> value) Then
					Me.OnHomePhoneChanging(value)
					Me.SendPropertyChanging()
					Me._HomePhone = value
					Me.SendPropertyChanged("HomePhone")
					Me.OnHomePhoneChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_Extension", DbType:="NVarChar(4)")> _
		Public Property Extension() As String
			Get
				Return Me._Extension
			End Get
			Set(ByVal value As String)
				If (Me._Extension <> value) Then
					Me.OnExtensionChanging(value)
					Me.SendPropertyChanging()
					Me._Extension = value
					Me.SendPropertyChanged("Extension")
					Me.OnExtensionChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_Photo", DbType:="Image", UpdateCheck:=UpdateCheck.Never)> _
		Public Property Photo() As System.Data.Linq.Binary
			Get
				Return Me._Photo
			End Get
			Set(ByVal value As System.Data.Linq.Binary)
				If (Me._Photo IsNot value) Then
					Me.OnPhotoChanging(value)
					Me.SendPropertyChanging()
					Me._Photo = value
					Me.SendPropertyChanged("Photo")
					Me.OnPhotoChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_Notes", DbType:="NText", UpdateCheck:=UpdateCheck.Never)> _
		Public Property Notes() As String
			Get
				Return Me._Notes
			End Get
			Set(ByVal value As String)
				If (Me._Notes <> value) Then
					Me.OnNotesChanging(value)
					Me.SendPropertyChanging()
					Me._Notes = value
					Me.SendPropertyChanged("Notes")
					Me.OnNotesChanged()
				End If
			End Set
		End Property

		<Column(Name:="Reports To", Storage:="_ReportsTo", DbType:="Int")> _
		Public Property ReportsTo() As Integer?
			Get
				Return Me._ReportsTo
			End Get
			Set(ByVal value? As Integer)
				If (Not Me._ReportsTo.Equals(value)) Then
					Me.OnReportsToChanging(value)
					Me.SendPropertyChanging()
					Me._ReportsTo = value
					Me.SendPropertyChanged("ReportsTo")
					Me.OnReportsToChanged()
				End If
			End Set
		End Property

		<Association(Name:="Employees_Orders", Storage:="_Orders", ThisKey:="EmployeeID", OtherKey:="EmployeeID")> _
		Public Property Orders() As EntitySet(Of Orders)
			Get
				Return Me._Orders
			End Get
			Set(ByVal value As EntitySet(Of Orders))
				Me._Orders.Assign(value)
			End Set
		End Property

		Public Event PropertyChanging As PropertyChangingEventHandler Implements INotifyPropertyChanging.PropertyChanging

		Public Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged

		Protected Overridable Sub SendPropertyChanging()
			If (Me.PropertyChangingEvent IsNot Nothing) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub

		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As String)
			If (Me.PropertyChangedEvent IsNot Nothing) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub

		Private Sub attach_Orders(ByVal entity As Orders)
			Me.SendPropertyChanging()
			entity.Employees = Me
		End Sub

		Private Sub detach_Orders(ByVal entity As Orders)
			Me.SendPropertyChanging()
			entity.Employees = Nothing
		End Sub
	End Class

	<Table(Name:="Order Details")> _
	Partial Public Class OrderDetails
		Implements INotifyPropertyChanging, INotifyPropertyChanged

		Private Shared emptyChangingEventArgs As New PropertyChangingEventArgs(String.Empty)

		Private _OrderID As Integer

		Private _ProductID As Integer

		Private _UnitPrice As Decimal

		Private _Quantity As Short

		Private _Discount As Single

		Private _Products As EntityRef(Of Products)

		Private _Orders As EntityRef(Of Orders)

	#Region "Extensibility Method Definitions"
	Partial Private Sub OnLoaded()
	End Sub
	Partial Private Sub OnValidate(ByVal action As System.Data.Linq.ChangeAction)
	End Sub
	Partial Private Sub OnCreated()
	End Sub
	Partial Private Sub OnOrderIDChanging(ByVal value As Integer)
	End Sub
	Partial Private Sub OnOrderIDChanged()
	End Sub
	Partial Private Sub OnProductIDChanging(ByVal value As Integer)
	End Sub
	Partial Private Sub OnProductIDChanged()
	End Sub
	Partial Private Sub OnUnitPriceChanging(ByVal value As Decimal)
	End Sub
	Partial Private Sub OnUnitPriceChanged()
	End Sub
	Partial Private Sub OnQuantityChanging(ByVal value As Short)
	End Sub
	Partial Private Sub OnQuantityChanged()
	End Sub
	Partial Private Sub OnDiscountChanging(ByVal value As Single)
	End Sub
	Partial Private Sub OnDiscountChanged()
	End Sub
	#End Region

		Public Sub New()
			Me._Products = Nothing
			Me._Orders = Nothing
			OnCreated()
		End Sub

		<Column(Name:="Order ID", Storage:="_OrderID", DbType:="Int NOT NULL", IsPrimaryKey:=True)> _
		Public Property OrderID() As Integer
			Get
				Return Me._OrderID
			End Get
			Set(ByVal value As Integer)
				If (Me._OrderID <> value) Then
					Me.OnOrderIDChanging(value)
					Me.SendPropertyChanging()
					Me._OrderID = value
					Me.SendPropertyChanged("OrderID")
					Me.OnOrderIDChanged()
				End If
			End Set
		End Property

		<Column(Name:="Product ID", Storage:="_ProductID", DbType:="Int NOT NULL", IsPrimaryKey:=True)> _
		Public Property ProductID() As Integer
			Get
				Return Me._ProductID
			End Get
			Set(ByVal value As Integer)
				If (Me._ProductID <> value) Then
					Me.OnProductIDChanging(value)
					Me.SendPropertyChanging()
					Me._ProductID = value
					Me.SendPropertyChanged("ProductID")
					Me.OnProductIDChanged()
				End If
			End Set
		End Property

		<Column(Name:="Unit Price", Storage:="_UnitPrice", DbType:="Money NOT NULL")> _
		Public Property UnitPrice() As Decimal
			Get
				Return Me._UnitPrice
			End Get
			Set(ByVal value As Decimal)
				If (Me._UnitPrice <> value) Then
					Me.OnUnitPriceChanging(value)
					Me.SendPropertyChanging()
					Me._UnitPrice = value
					Me.SendPropertyChanged("UnitPrice")
					Me.OnUnitPriceChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_Quantity", DbType:="SmallInt NOT NULL")> _
		Public Property Quantity() As Short
			Get
				Return Me._Quantity
			End Get
			Set(ByVal value As Short)
				If (Me._Quantity <> value) Then
					Me.OnQuantityChanging(value)
					Me.SendPropertyChanging()
					Me._Quantity = value
					Me.SendPropertyChanged("Quantity")
					Me.OnQuantityChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_Discount", DbType:="Real NOT NULL")> _
		Public Property Discount() As Single
			Get
				Return Me._Discount
			End Get
			Set(ByVal value As Single)
				If (Me._Discount <> value) Then
					Me.OnDiscountChanging(value)
					Me.SendPropertyChanging()
					Me._Discount = value
					Me.SendPropertyChanged("Discount")
					Me.OnDiscountChanged()
				End If
			End Set
		End Property

		<Association(Name:="Products_OrderDetails", Storage:="_Products", ThisKey:="ProductID", OtherKey:="ProductID", IsForeignKey:=True)> _
		Public Property Products() As Products
			Get
				Return Me._Products.Entity
			End Get
			Set(ByVal value As Products)
				Dim previousValue As Products = Me._Products.Entity
				If ((previousValue IsNot value) OrElse (Me._Products.HasLoadedOrAssignedValue = False)) Then
					Me.SendPropertyChanging()
					If (previousValue IsNot Nothing) Then
						Me._Products.Entity = Nothing
						previousValue.OrderDetails.Remove(Me)
					End If
					Me._Products.Entity = value
					If (value IsNot Nothing) Then
						value.OrderDetails.Add(Me)
						Me._ProductID = value.ProductID
					Else
						Me._ProductID = Nothing
					End If
					Me.SendPropertyChanged("Products")
				End If
			End Set
		End Property

		<Association(Name:="Orders_OrderDetails", Storage:="_Orders", ThisKey:="OrderID", OtherKey:="OrderID", IsForeignKey:=True, DeleteOnNull:=True)> _
		Public Property Orders() As Orders
			Get
				Return Me._Orders.Entity
			End Get
			Set(ByVal value As Orders)
				Dim previousValue As Orders = Me._Orders.Entity
				If ((previousValue IsNot value) OrElse (Me._Orders.HasLoadedOrAssignedValue = False)) Then
					Me.SendPropertyChanging()
					If (previousValue IsNot Nothing) Then
						Me._Orders.Entity = Nothing
						previousValue.OrderDetails.Remove(Me)
					End If
					Me._Orders.Entity = value
					If (value IsNot Nothing) Then
						value.OrderDetails.Add(Me)
						Me._OrderID = value.OrderID
					Else
						Me._OrderID = Nothing
					End If
					Me.SendPropertyChanged("Orders")
				End If
			End Set
		End Property

		Public Event PropertyChanging As PropertyChangingEventHandler Implements INotifyPropertyChanging.PropertyChanging

		Public Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged

		Protected Overridable Sub SendPropertyChanging()
			If (Me.PropertyChangingEvent IsNot Nothing) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub

		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As String)
			If (Me.PropertyChangedEvent IsNot Nothing) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class

	<Table()> _
	Partial Public Class Orders
		Implements INotifyPropertyChanging, INotifyPropertyChanged

		Private Shared emptyChangingEventArgs As New PropertyChangingEventArgs(String.Empty)

		Private _OrderID As Integer

		Private _CustomerID As String

		Private _EmployeeID? As Integer

		Private _ShipName As String

		Private _ShipAddress As String

		Private _ShipCity As String

		Private _ShipRegion As String

		Private _ShipPostalCode As String

		Private _ShipCountry As String

		Private _ShipVia? As Integer

		Private _OrderDate? As System.DateTime

		Private _RequiredDate? As System.DateTime

		Private _ShippedDate? As System.DateTime

		Private _Freight? As Decimal

		Private _OrderDetails As EntitySet(Of OrderDetails)

		Private _Customers As EntityRef(Of Customers)

		Private _Shippers As EntityRef(Of Shippers)

		Private _Employees As EntityRef(Of Employees)

	#Region "Extensibility Method Definitions"
	Partial Private Sub OnLoaded()
	End Sub
	Partial Private Sub OnValidate(ByVal action As System.Data.Linq.ChangeAction)
	End Sub
	Partial Private Sub OnCreated()
	End Sub
	Partial Private Sub OnOrderIDChanging(ByVal value As Integer)
	End Sub
	Partial Private Sub OnOrderIDChanged()
	End Sub
	Partial Private Sub OnCustomerIDChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnCustomerIDChanged()
	End Sub
	Partial Private Sub OnEmployeeIDChanging(ByVal value? As Integer)
	End Sub
	Partial Private Sub OnEmployeeIDChanged()
	End Sub
	Partial Private Sub OnShipNameChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnShipNameChanged()
	End Sub
	Partial Private Sub OnShipAddressChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnShipAddressChanged()
	End Sub
	Partial Private Sub OnShipCityChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnShipCityChanged()
	End Sub
	Partial Private Sub OnShipRegionChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnShipRegionChanged()
	End Sub
	Partial Private Sub OnShipPostalCodeChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnShipPostalCodeChanged()
	End Sub
	Partial Private Sub OnShipCountryChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnShipCountryChanged()
	End Sub
	Partial Private Sub OnShipViaChanging(ByVal value? As Integer)
	End Sub
	Partial Private Sub OnShipViaChanged()
	End Sub
	Partial Private Sub OnOrderDateChanging(ByVal value? As System.DateTime)
	End Sub
	Partial Private Sub OnOrderDateChanged()
	End Sub
	Partial Private Sub OnRequiredDateChanging(ByVal value? As System.DateTime)
	End Sub
	Partial Private Sub OnRequiredDateChanged()
	End Sub
	Partial Private Sub OnShippedDateChanging(ByVal value? As System.DateTime)
	End Sub
	Partial Private Sub OnShippedDateChanged()
	End Sub
	Partial Private Sub OnFreightChanging(ByVal value? As Decimal)
	End Sub
	Partial Private Sub OnFreightChanged()
	End Sub
	#End Region

		Public Sub New()
			Me._OrderDetails = New EntitySet(Of OrderDetails)(New Action(Of OrderDetails)(AddressOf Me.attach_OrderDetails), New Action(Of OrderDetails)(AddressOf Me.detach_OrderDetails))
			Me._Customers = Nothing
			Me._Shippers = Nothing
			Me._Employees = Nothing
			OnCreated()
		End Sub

		<Column(Name:="Order ID", Storage:="_OrderID", DbType:="Int NOT NULL", IsPrimaryKey:=True)> _
		Public Property OrderID() As Integer
			Get
				Return Me._OrderID
			End Get
			Set(ByVal value As Integer)
				If (Me._OrderID <> value) Then
					Me.OnOrderIDChanging(value)
					Me.SendPropertyChanging()
					Me._OrderID = value
					Me.SendPropertyChanged("OrderID")
					Me.OnOrderIDChanged()
				End If
			End Set
		End Property

		<Column(Name:="Customer ID", Storage:="_CustomerID", DbType:="NVarChar(5) NOT NULL", CanBeNull:=False)> _
		Public Property CustomerID() As String
			Get
				Return Me._CustomerID
			End Get
			Set(ByVal value As String)
				If (Me._CustomerID <> value) Then
					Me.OnCustomerIDChanging(value)
					Me.SendPropertyChanging()
					Me._CustomerID = value
					Me.SendPropertyChanged("CustomerID")
					Me.OnCustomerIDChanged()
				End If
			End Set
		End Property

		<Column(Name:="Employee ID", Storage:="_EmployeeID", DbType:="Int")> _
		Public Property EmployeeID() As Integer?
			Get
				Return Me._EmployeeID
			End Get
			Set(ByVal value? As Integer)
				If (Not Me._EmployeeID.Equals(value)) Then
					Me.OnEmployeeIDChanging(value)
					Me.SendPropertyChanging()
					Me._EmployeeID = value
					Me.SendPropertyChanged("EmployeeID")
					Me.OnEmployeeIDChanged()
				End If
			End Set
		End Property

		<Column(Name:="Ship Name", Storage:="_ShipName", DbType:="NVarChar(40)")> _
		Public Property ShipName() As String
			Get
				Return Me._ShipName
			End Get
			Set(ByVal value As String)
				If (Me._ShipName <> value) Then
					Me.OnShipNameChanging(value)
					Me.SendPropertyChanging()
					Me._ShipName = value
					Me.SendPropertyChanged("ShipName")
					Me.OnShipNameChanged()
				End If
			End Set
		End Property

		<Column(Name:="Ship Address", Storage:="_ShipAddress", DbType:="NVarChar(60)")> _
		Public Property ShipAddress() As String
			Get
				Return Me._ShipAddress
			End Get
			Set(ByVal value As String)
				If (Me._ShipAddress <> value) Then
					Me.OnShipAddressChanging(value)
					Me.SendPropertyChanging()
					Me._ShipAddress = value
					Me.SendPropertyChanged("ShipAddress")
					Me.OnShipAddressChanged()
				End If
			End Set
		End Property

		<Column(Name:="Ship City", Storage:="_ShipCity", DbType:="NVarChar(15)")> _
		Public Property ShipCity() As String
			Get
				Return Me._ShipCity
			End Get
			Set(ByVal value As String)
				If (Me._ShipCity <> value) Then
					Me.OnShipCityChanging(value)
					Me.SendPropertyChanging()
					Me._ShipCity = value
					Me.SendPropertyChanged("ShipCity")
					Me.OnShipCityChanged()
				End If
			End Set
		End Property

		<Column(Name:="Ship Region", Storage:="_ShipRegion", DbType:="NVarChar(15)")> _
		Public Property ShipRegion() As String
			Get
				Return Me._ShipRegion
			End Get
			Set(ByVal value As String)
				If (Me._ShipRegion <> value) Then
					Me.OnShipRegionChanging(value)
					Me.SendPropertyChanging()
					Me._ShipRegion = value
					Me.SendPropertyChanged("ShipRegion")
					Me.OnShipRegionChanged()
				End If
			End Set
		End Property

		<Column(Name:="Ship Postal Code", Storage:="_ShipPostalCode", DbType:="NVarChar(10)")> _
		Public Property ShipPostalCode() As String
			Get
				Return Me._ShipPostalCode
			End Get
			Set(ByVal value As String)
				If (Me._ShipPostalCode <> value) Then
					Me.OnShipPostalCodeChanging(value)
					Me.SendPropertyChanging()
					Me._ShipPostalCode = value
					Me.SendPropertyChanged("ShipPostalCode")
					Me.OnShipPostalCodeChanged()
				End If
			End Set
		End Property

		<Column(Name:="Ship Country", Storage:="_ShipCountry", DbType:="NVarChar(15)")> _
		Public Property ShipCountry() As String
			Get
				Return Me._ShipCountry
			End Get
			Set(ByVal value As String)
				If (Me._ShipCountry <> value) Then
					Me.OnShipCountryChanging(value)
					Me.SendPropertyChanging()
					Me._ShipCountry = value
					Me.SendPropertyChanged("ShipCountry")
					Me.OnShipCountryChanged()
				End If
			End Set
		End Property

		<Column(Name:="Ship Via", Storage:="_ShipVia", DbType:="Int")> _
		Public Property ShipVia() As Integer?
			Get
				Return Me._ShipVia
			End Get
			Set(ByVal value? As Integer)
				If (Not Me._ShipVia.Equals(value)) Then
					Me.OnShipViaChanging(value)
					Me.SendPropertyChanging()
					Me._ShipVia = value
					Me.SendPropertyChanged("ShipVia")
					Me.OnShipViaChanged()
				End If
			End Set
		End Property

		<Column(Name:="Order Date", Storage:="_OrderDate", DbType:="DateTime")> _
		Public Property OrderDate() As System.DateTime?
			Get
				Return Me._OrderDate
			End Get
			Set(ByVal value? As System.DateTime)
				If (Not Me._OrderDate.Equals(value)) Then
					Me.OnOrderDateChanging(value)
					Me.SendPropertyChanging()
					Me._OrderDate = value
					Me.SendPropertyChanged("OrderDate")
					Me.OnOrderDateChanged()
				End If
			End Set
		End Property

		<Column(Name:="Required Date", Storage:="_RequiredDate", DbType:="DateTime")> _
		Public Property RequiredDate() As System.DateTime?
			Get
				Return Me._RequiredDate
			End Get
			Set(ByVal value? As System.DateTime)
				If (Not Me._RequiredDate.Equals(value)) Then
					Me.OnRequiredDateChanging(value)
					Me.SendPropertyChanging()
					Me._RequiredDate = value
					Me.SendPropertyChanged("RequiredDate")
					Me.OnRequiredDateChanged()
				End If
			End Set
		End Property

		<Column(Name:="Shipped Date", Storage:="_ShippedDate", DbType:="DateTime")> _
		Public Property ShippedDate() As System.DateTime?
			Get
				Return Me._ShippedDate
			End Get
			Set(ByVal value? As System.DateTime)
				If (Not Me._ShippedDate.Equals(value)) Then
					Me.OnShippedDateChanging(value)
					Me.SendPropertyChanging()
					Me._ShippedDate = value
					Me.SendPropertyChanged("ShippedDate")
					Me.OnShippedDateChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_Freight", DbType:="Money")> _
		Public Property Freight() As Decimal?
			Get
				Return Me._Freight
			End Get
			Set(ByVal value? As Decimal)
				If (Not Me._Freight.Equals(value)) Then
					Me.OnFreightChanging(value)
					Me.SendPropertyChanging()
					Me._Freight = value
					Me.SendPropertyChanged("Freight")
					Me.OnFreightChanged()
				End If
			End Set
		End Property

		<Association(Name:="Orders_OrderDetails", Storage:="_OrderDetails", ThisKey:="OrderID", OtherKey:="OrderID")> _
		Public Property OrderDetails() As EntitySet(Of OrderDetails)
			Get
				Return Me._OrderDetails
			End Get
			Set(ByVal value As EntitySet(Of OrderDetails))
				Me._OrderDetails.Assign(value)
			End Set
		End Property

		<Association(Name:="Customers_Orders", Storage:="_Customers", ThisKey:="CustomerID", OtherKey:="CustomerID", IsForeignKey:=True)> _
		Public Property Customers() As Customers
			Get
				Return Me._Customers.Entity
			End Get
			Set(ByVal value As Customers)
				Dim previousValue As Customers = Me._Customers.Entity
				If ((previousValue IsNot value) OrElse (Me._Customers.HasLoadedOrAssignedValue = False)) Then
					Me.SendPropertyChanging()
					If (previousValue IsNot Nothing) Then
						Me._Customers.Entity = Nothing
						previousValue.Orders.Remove(Me)
					End If
					Me._Customers.Entity = value
					If (value IsNot Nothing) Then
						value.Orders.Add(Me)
						Me._CustomerID = value.CustomerID
					Else
						Me._CustomerID = Nothing
					End If
					Me.SendPropertyChanged("Customers")
				End If
			End Set
		End Property

		<Association(Name:="Shippers_Orders", Storage:="_Shippers", ThisKey:="ShipVia", OtherKey:="ShipperID", IsForeignKey:=True)> _
		Public Property Shippers() As Shippers
			Get
				Return Me._Shippers.Entity
			End Get
			Set(ByVal value As Shippers)
				Dim previousValue As Shippers = Me._Shippers.Entity
				If ((previousValue IsNot value) OrElse (Me._Shippers.HasLoadedOrAssignedValue = False)) Then
					Me.SendPropertyChanging()
					If (previousValue IsNot Nothing) Then
						Me._Shippers.Entity = Nothing
						previousValue.Orders.Remove(Me)
					End If
					Me._Shippers.Entity = value
					If (value IsNot Nothing) Then
						value.Orders.Add(Me)
						Me._ShipVia = value.ShipperID
					Else
						Me._ShipVia = Nothing
					End If
					Me.SendPropertyChanged("Shippers")
				End If
			End Set
		End Property

		<Association(Name:="Employees_Orders", Storage:="_Employees", ThisKey:="EmployeeID", OtherKey:="EmployeeID", IsForeignKey:=True)> _
		Public Property Employees() As Employees
			Get
				Return Me._Employees.Entity
			End Get
			Set(ByVal value As Employees)
				Dim previousValue As Employees = Me._Employees.Entity
				If ((previousValue IsNot value) OrElse (Me._Employees.HasLoadedOrAssignedValue = False)) Then
					Me.SendPropertyChanging()
					If (previousValue IsNot Nothing) Then
						Me._Employees.Entity = Nothing
						previousValue.Orders.Remove(Me)
					End If
					Me._Employees.Entity = value
					If (value IsNot Nothing) Then
						value.Orders.Add(Me)
						Me._EmployeeID = value.EmployeeID
					Else
						Me._EmployeeID = Nothing
					End If
					Me.SendPropertyChanged("Employees")
				End If
			End Set
		End Property

		Public Event PropertyChanging As PropertyChangingEventHandler Implements INotifyPropertyChanging.PropertyChanging

		Public Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged

		Protected Overridable Sub SendPropertyChanging()
			If (Me.PropertyChangingEvent IsNot Nothing) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub

		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As String)
			If (Me.PropertyChangedEvent IsNot Nothing) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub

		Private Sub attach_OrderDetails(ByVal entity As OrderDetails)
			Me.SendPropertyChanging()
			entity.Orders = Me
		End Sub

		Private Sub detach_OrderDetails(ByVal entity As OrderDetails)
			Me.SendPropertyChanging()
			entity.Orders = Nothing
		End Sub
	End Class

	<Table()> _
	Partial Public Class Products
		Implements INotifyPropertyChanging, INotifyPropertyChanged

		Private Shared emptyChangingEventArgs As New PropertyChangingEventArgs(String.Empty)

		Private _ProductID As Integer

		Private _SupplierID? As Integer

		Private _CategoryID? As Integer

		Private _ProductName As String

		Private _EnglishName As String

		Private _QuantityPerUnit As String

		Private _UnitPrice? As Decimal

		Private _UnitsInStock? As Short

		Private _UnitsOnOrder? As Short

		Private _ReorderLevel? As Short

		Private _Discontinued As Boolean

		Private _OrderDetails As EntitySet(Of OrderDetails)

		Private _Suppliers As EntityRef(Of Suppliers)

		Private _Categories As EntityRef(Of Categories)

	#Region "Extensibility Method Definitions"
	Partial Private Sub OnLoaded()
	End Sub
	Partial Private Sub OnValidate(ByVal action As System.Data.Linq.ChangeAction)
	End Sub
	Partial Private Sub OnCreated()
	End Sub
	Partial Private Sub OnProductIDChanging(ByVal value As Integer)
	End Sub
	Partial Private Sub OnProductIDChanged()
	End Sub
	Partial Private Sub OnSupplierIDChanging(ByVal value? As Integer)
	End Sub
	Partial Private Sub OnSupplierIDChanged()
	End Sub
	Partial Private Sub OnCategoryIDChanging(ByVal value? As Integer)
	End Sub
	Partial Private Sub OnCategoryIDChanged()
	End Sub
	Partial Private Sub OnProductNameChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnProductNameChanged()
	End Sub
	Partial Private Sub OnEnglishNameChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnEnglishNameChanged()
	End Sub
	Partial Private Sub OnQuantityPerUnitChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnQuantityPerUnitChanged()
	End Sub
	Partial Private Sub OnUnitPriceChanging(ByVal value? As Decimal)
	End Sub
	Partial Private Sub OnUnitPriceChanged()
	End Sub
	Partial Private Sub OnUnitsInStockChanging(ByVal value? As Short)
	End Sub
	Partial Private Sub OnUnitsInStockChanged()
	End Sub
	Partial Private Sub OnUnitsOnOrderChanging(ByVal value? As Short)
	End Sub
	Partial Private Sub OnUnitsOnOrderChanged()
	End Sub
	Partial Private Sub OnReorderLevelChanging(ByVal value? As Short)
	End Sub
	Partial Private Sub OnReorderLevelChanged()
	End Sub
	Partial Private Sub OnDiscontinuedChanging(ByVal value As Boolean)
	End Sub
	Partial Private Sub OnDiscontinuedChanged()
	End Sub
	#End Region

		Public Sub New()
			Me._OrderDetails = New EntitySet(Of OrderDetails)(New Action(Of OrderDetails)(AddressOf Me.attach_OrderDetails), New Action(Of OrderDetails)(AddressOf Me.detach_OrderDetails))
			Me._Suppliers = Nothing
			Me._Categories = Nothing
			OnCreated()
		End Sub

		<Column(Name:="Product ID", Storage:="_ProductID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=True, IsDbGenerated:=True)> _
		Public Property ProductID() As Integer
			Get
				Return Me._ProductID
			End Get
			Set(ByVal value As Integer)
				If (Me._ProductID <> value) Then
					Me.OnProductIDChanging(value)
					Me.SendPropertyChanging()
					Me._ProductID = value
					Me.SendPropertyChanged("ProductID")
					Me.OnProductIDChanged()
				End If
			End Set
		End Property

		<Column(Name:="Supplier ID", Storage:="_SupplierID", DbType:="Int")> _
		Public Property SupplierID() As Integer?
			Get
				Return Me._SupplierID
			End Get
			Set(ByVal value? As Integer)
				If (Not Me._SupplierID.Equals(value)) Then
					Me.OnSupplierIDChanging(value)
					Me.SendPropertyChanging()
					Me._SupplierID = value
					Me.SendPropertyChanged("SupplierID")
					Me.OnSupplierIDChanged()
				End If
			End Set
		End Property

		<Column(Name:="Category ID", Storage:="_CategoryID", DbType:="Int")> _
		Public Property CategoryID() As Integer?
			Get
				Return Me._CategoryID
			End Get
			Set(ByVal value? As Integer)
				If (Not Me._CategoryID.Equals(value)) Then
					Me.OnCategoryIDChanging(value)
					Me.SendPropertyChanging()
					Me._CategoryID = value
					Me.SendPropertyChanged("CategoryID")
					Me.OnCategoryIDChanged()
				End If
			End Set
		End Property

		<Column(Name:="Product Name", Storage:="_ProductName", DbType:="NVarChar(40) NOT NULL", CanBeNull:=False)> _
		Public Property ProductName() As String
			Get
				Return Me._ProductName
			End Get
			Set(ByVal value As String)
				If (Me._ProductName <> value) Then
					Me.OnProductNameChanging(value)
					Me.SendPropertyChanging()
					Me._ProductName = value
					Me.SendPropertyChanged("ProductName")
					Me.OnProductNameChanged()
				End If
			End Set
		End Property

		<Column(Name:="English Name", Storage:="_EnglishName", DbType:="NVarChar(40)")> _
		Public Property EnglishName() As String
			Get
				Return Me._EnglishName
			End Get
			Set(ByVal value As String)
				If (Me._EnglishName <> value) Then
					Me.OnEnglishNameChanging(value)
					Me.SendPropertyChanging()
					Me._EnglishName = value
					Me.SendPropertyChanged("EnglishName")
					Me.OnEnglishNameChanged()
				End If
			End Set
		End Property

		<Column(Name:="Quantity Per Unit", Storage:="_QuantityPerUnit", DbType:="NVarChar(20)")> _
		Public Property QuantityPerUnit() As String
			Get
				Return Me._QuantityPerUnit
			End Get
			Set(ByVal value As String)
				If (Me._QuantityPerUnit <> value) Then
					Me.OnQuantityPerUnitChanging(value)
					Me.SendPropertyChanging()
					Me._QuantityPerUnit = value
					Me.SendPropertyChanged("QuantityPerUnit")
					Me.OnQuantityPerUnitChanged()
				End If
			End Set
		End Property

		<Column(Name:="Unit Price", Storage:="_UnitPrice", DbType:="Money")> _
		Public Property UnitPrice() As Decimal?
			Get
				Return Me._UnitPrice
			End Get
			Set(ByVal value? As Decimal)
				If (Not Me._UnitPrice.Equals(value)) Then
					Me.OnUnitPriceChanging(value)
					Me.SendPropertyChanging()
					Me._UnitPrice = value
					Me.SendPropertyChanged("UnitPrice")
					Me.OnUnitPriceChanged()
				End If
			End Set
		End Property

		<Column(Name:="Units In Stock", Storage:="_UnitsInStock", DbType:="SmallInt")> _
		Public Property UnitsInStock() As Short?
			Get
				Return Me._UnitsInStock
			End Get
			Set(ByVal value? As Short)
				If (Not Me._UnitsInStock.Equals(value)) Then
					Me.OnUnitsInStockChanging(value)
					Me.SendPropertyChanging()
					Me._UnitsInStock = value
					Me.SendPropertyChanged("UnitsInStock")
					Me.OnUnitsInStockChanged()
				End If
			End Set
		End Property

		<Column(Name:="Units On Order", Storage:="_UnitsOnOrder", DbType:="SmallInt")> _
		Public Property UnitsOnOrder() As Short?
			Get
				Return Me._UnitsOnOrder
			End Get
			Set(ByVal value? As Short)
				If (Not Me._UnitsOnOrder.Equals(value)) Then
					Me.OnUnitsOnOrderChanging(value)
					Me.SendPropertyChanging()
					Me._UnitsOnOrder = value
					Me.SendPropertyChanged("UnitsOnOrder")
					Me.OnUnitsOnOrderChanged()
				End If
			End Set
		End Property

		<Column(Name:="Reorder Level", Storage:="_ReorderLevel", DbType:="SmallInt")> _
		Public Property ReorderLevel() As Short?
			Get
				Return Me._ReorderLevel
			End Get
			Set(ByVal value? As Short)
				If (Not Me._ReorderLevel.Equals(value)) Then
					Me.OnReorderLevelChanging(value)
					Me.SendPropertyChanging()
					Me._ReorderLevel = value
					Me.SendPropertyChanged("ReorderLevel")
					Me.OnReorderLevelChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_Discontinued", DbType:="Bit NOT NULL")> _
		Public Property Discontinued() As Boolean
			Get
				Return Me._Discontinued
			End Get
			Set(ByVal value As Boolean)
				If (Me._Discontinued <> value) Then
					Me.OnDiscontinuedChanging(value)
					Me.SendPropertyChanging()
					Me._Discontinued = value
					Me.SendPropertyChanged("Discontinued")
					Me.OnDiscontinuedChanged()
				End If
			End Set
		End Property

		<Association(Name:="Products_OrderDetails", Storage:="_OrderDetails", ThisKey:="ProductID", OtherKey:="ProductID")> _
		Public Property OrderDetails() As EntitySet(Of OrderDetails)
			Get
				Return Me._OrderDetails
			End Get
			Set(ByVal value As EntitySet(Of OrderDetails))
				Me._OrderDetails.Assign(value)
			End Set
		End Property

		<Association(Name:="Suppliers_Products", Storage:="_Suppliers", ThisKey:="SupplierID", OtherKey:="SupplierID", IsForeignKey:=True)> _
		Public Property Suppliers() As Suppliers
			Get
				Return Me._Suppliers.Entity
			End Get
			Set(ByVal value As Suppliers)
				Dim previousValue As Suppliers = Me._Suppliers.Entity
				If ((previousValue IsNot value) OrElse (Me._Suppliers.HasLoadedOrAssignedValue = False)) Then
					Me.SendPropertyChanging()
					If (previousValue IsNot Nothing) Then
						Me._Suppliers.Entity = Nothing
						previousValue.Products.Remove(Me)
					End If
					Me._Suppliers.Entity = value
					If (value IsNot Nothing) Then
						value.Products.Add(Me)
						Me._SupplierID = value.SupplierID
					Else
						Me._SupplierID = Nothing
					End If
					Me.SendPropertyChanged("Suppliers")
				End If
			End Set
		End Property

		<Association(Name:="Categories_Products", Storage:="_Categories", ThisKey:="CategoryID", OtherKey:="CategoryID", IsForeignKey:=True)> _
		Public Property Categories() As Categories
			Get
				Return Me._Categories.Entity
			End Get
			Set(ByVal value As Categories)
				Dim previousValue As Categories = Me._Categories.Entity
				If ((previousValue IsNot value) OrElse (Me._Categories.HasLoadedOrAssignedValue = False)) Then
					Me.SendPropertyChanging()
					If (previousValue IsNot Nothing) Then
						Me._Categories.Entity = Nothing
						previousValue.Products.Remove(Me)
					End If
					Me._Categories.Entity = value
					If (value IsNot Nothing) Then
						value.Products.Add(Me)
						Me._CategoryID = value.CategoryID
					Else
						Me._CategoryID = Nothing
					End If
					Me.SendPropertyChanged("Categories")
				End If
			End Set
		End Property

		Public Event PropertyChanging As PropertyChangingEventHandler Implements INotifyPropertyChanging.PropertyChanging

		Public Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged

		Protected Overridable Sub SendPropertyChanging()
			If (Me.PropertyChangingEvent IsNot Nothing) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub

		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As String)
			If (Me.PropertyChangedEvent IsNot Nothing) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub

		Private Sub attach_OrderDetails(ByVal entity As OrderDetails)
			Me.SendPropertyChanging()
			entity.Products = Me
		End Sub

		Private Sub detach_OrderDetails(ByVal entity As OrderDetails)
			Me.SendPropertyChanging()
			entity.Products = Nothing
		End Sub
	End Class

	<Table()> _
	Partial Public Class Shippers
		Implements INotifyPropertyChanging, INotifyPropertyChanged

		Private Shared emptyChangingEventArgs As New PropertyChangingEventArgs(String.Empty)

		Private _ShipperID As Integer

		Private _CompanyName As String

		Private _Orders As EntitySet(Of Orders)

	#Region "Extensibility Method Definitions"
	Partial Private Sub OnLoaded()
	End Sub
	Partial Private Sub OnValidate(ByVal action As System.Data.Linq.ChangeAction)
	End Sub
	Partial Private Sub OnCreated()
	End Sub
	Partial Private Sub OnShipperIDChanging(ByVal value As Integer)
	End Sub
	Partial Private Sub OnShipperIDChanged()
	End Sub
	Partial Private Sub OnCompanyNameChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnCompanyNameChanged()
	End Sub
	#End Region

		Public Sub New()
			Me._Orders = New EntitySet(Of Orders)(New Action(Of Orders)(AddressOf Me.attach_Orders), New Action(Of Orders)(AddressOf Me.detach_Orders))
			OnCreated()
		End Sub

		<Column(Name:="Shipper ID", Storage:="_ShipperID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=True, IsDbGenerated:=True)> _
		Public Property ShipperID() As Integer
			Get
				Return Me._ShipperID
			End Get
			Set(ByVal value As Integer)
				If (Me._ShipperID <> value) Then
					Me.OnShipperIDChanging(value)
					Me.SendPropertyChanging()
					Me._ShipperID = value
					Me.SendPropertyChanged("ShipperID")
					Me.OnShipperIDChanged()
				End If
			End Set
		End Property

		<Column(Name:="Company Name", Storage:="_CompanyName", DbType:="NVarChar(40) NOT NULL", CanBeNull:=False)> _
		Public Property CompanyName() As String
			Get
				Return Me._CompanyName
			End Get
			Set(ByVal value As String)
				If (Me._CompanyName <> value) Then
					Me.OnCompanyNameChanging(value)
					Me.SendPropertyChanging()
					Me._CompanyName = value
					Me.SendPropertyChanged("CompanyName")
					Me.OnCompanyNameChanged()
				End If
			End Set
		End Property

		<Association(Name:="Shippers_Orders", Storage:="_Orders", ThisKey:="ShipperID", OtherKey:="ShipVia")> _
		Public Property Orders() As EntitySet(Of Orders)
			Get
				Return Me._Orders
			End Get
			Set(ByVal value As EntitySet(Of Orders))
				Me._Orders.Assign(value)
			End Set
		End Property

		Public Event PropertyChanging As PropertyChangingEventHandler Implements INotifyPropertyChanging.PropertyChanging

		Public Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged

		Protected Overridable Sub SendPropertyChanging()
			If (Me.PropertyChangingEvent IsNot Nothing) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub

		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As String)
			If (Me.PropertyChangedEvent IsNot Nothing) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub

		Private Sub attach_Orders(ByVal entity As Orders)
			Me.SendPropertyChanging()
			entity.Shippers = Me
		End Sub

		Private Sub detach_Orders(ByVal entity As Orders)
			Me.SendPropertyChanging()
			entity.Shippers = Nothing
		End Sub
	End Class

	<Table()> _
	Partial Public Class Suppliers
		Implements INotifyPropertyChanging, INotifyPropertyChanged

		Private Shared emptyChangingEventArgs As New PropertyChangingEventArgs(String.Empty)

		Private _SupplierID As Integer

		Private _CompanyName As String

		Private _ContactName As String

		Private _ContactTitle As String

		Private _Address As String

		Private _City As String

		Private _Region As String

		Private _PostalCode As String

		Private _Country As String

		Private _Phone As String

		Private _Fax As String

		Private _Products As EntitySet(Of Products)

	#Region "Extensibility Method Definitions"
	Partial Private Sub OnLoaded()
	End Sub
	Partial Private Sub OnValidate(ByVal action As System.Data.Linq.ChangeAction)
	End Sub
	Partial Private Sub OnCreated()
	End Sub
	Partial Private Sub OnSupplierIDChanging(ByVal value As Integer)
	End Sub
	Partial Private Sub OnSupplierIDChanged()
	End Sub
	Partial Private Sub OnCompanyNameChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnCompanyNameChanged()
	End Sub
	Partial Private Sub OnContactNameChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnContactNameChanged()
	End Sub
	Partial Private Sub OnContactTitleChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnContactTitleChanged()
	End Sub
	Partial Private Sub OnAddressChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnAddressChanged()
	End Sub
	Partial Private Sub OnCityChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnCityChanged()
	End Sub
	Partial Private Sub OnRegionChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnRegionChanged()
	End Sub
	Partial Private Sub OnPostalCodeChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnPostalCodeChanged()
	End Sub
	Partial Private Sub OnCountryChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnCountryChanged()
	End Sub
	Partial Private Sub OnPhoneChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnPhoneChanged()
	End Sub
	Partial Private Sub OnFaxChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnFaxChanged()
	End Sub
	#End Region

		Public Sub New()
			Me._Products = New EntitySet(Of Products)(New Action(Of Products)(AddressOf Me.attach_Products), New Action(Of Products)(AddressOf Me.detach_Products))
			OnCreated()
		End Sub

		<Column(Name:="Supplier ID", Storage:="_SupplierID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=True, IsDbGenerated:=True)> _
		Public Property SupplierID() As Integer
			Get
				Return Me._SupplierID
			End Get
			Set(ByVal value As Integer)
				If (Me._SupplierID <> value) Then
					Me.OnSupplierIDChanging(value)
					Me.SendPropertyChanging()
					Me._SupplierID = value
					Me.SendPropertyChanged("SupplierID")
					Me.OnSupplierIDChanged()
				End If
			End Set
		End Property

		<Column(Name:="Company Name", Storage:="_CompanyName", DbType:="NVarChar(40) NOT NULL", CanBeNull:=False)> _
		Public Property CompanyName() As String
			Get
				Return Me._CompanyName
			End Get
			Set(ByVal value As String)
				If (Me._CompanyName <> value) Then
					Me.OnCompanyNameChanging(value)
					Me.SendPropertyChanging()
					Me._CompanyName = value
					Me.SendPropertyChanged("CompanyName")
					Me.OnCompanyNameChanged()
				End If
			End Set
		End Property

		<Column(Name:="Contact Name", Storage:="_ContactName", DbType:="NVarChar(30)")> _
		Public Property ContactName() As String
			Get
				Return Me._ContactName
			End Get
			Set(ByVal value As String)
				If (Me._ContactName <> value) Then
					Me.OnContactNameChanging(value)
					Me.SendPropertyChanging()
					Me._ContactName = value
					Me.SendPropertyChanged("ContactName")
					Me.OnContactNameChanged()
				End If
			End Set
		End Property

		<Column(Name:="Contact Title", Storage:="_ContactTitle", DbType:="NVarChar(30)")> _
		Public Property ContactTitle() As String
			Get
				Return Me._ContactTitle
			End Get
			Set(ByVal value As String)
				If (Me._ContactTitle <> value) Then
					Me.OnContactTitleChanging(value)
					Me.SendPropertyChanging()
					Me._ContactTitle = value
					Me.SendPropertyChanged("ContactTitle")
					Me.OnContactTitleChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_Address", DbType:="NVarChar(60)")> _
		Public Property Address() As String
			Get
				Return Me._Address
			End Get
			Set(ByVal value As String)
				If (Me._Address <> value) Then
					Me.OnAddressChanging(value)
					Me.SendPropertyChanging()
					Me._Address = value
					Me.SendPropertyChanged("Address")
					Me.OnAddressChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_City", DbType:="NVarChar(15)")> _
		Public Property City() As String
			Get
				Return Me._City
			End Get
			Set(ByVal value As String)
				If (Me._City <> value) Then
					Me.OnCityChanging(value)
					Me.SendPropertyChanging()
					Me._City = value
					Me.SendPropertyChanged("City")
					Me.OnCityChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_Region", DbType:="NVarChar(15)")> _
		Public Property Region() As String
			Get
				Return Me._Region
			End Get
			Set(ByVal value As String)
				If (Me._Region <> value) Then
					Me.OnRegionChanging(value)
					Me.SendPropertyChanging()
					Me._Region = value
					Me.SendPropertyChanged("Region")
					Me.OnRegionChanged()
				End If
			End Set
		End Property

		<Column(Name:="Postal Code", Storage:="_PostalCode", DbType:="NVarChar(10)")> _
		Public Property PostalCode() As String
			Get
				Return Me._PostalCode
			End Get
			Set(ByVal value As String)
				If (Me._PostalCode <> value) Then
					Me.OnPostalCodeChanging(value)
					Me.SendPropertyChanging()
					Me._PostalCode = value
					Me.SendPropertyChanged("PostalCode")
					Me.OnPostalCodeChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_Country", DbType:="NVarChar(15)")> _
		Public Property Country() As String
			Get
				Return Me._Country
			End Get
			Set(ByVal value As String)
				If (Me._Country <> value) Then
					Me.OnCountryChanging(value)
					Me.SendPropertyChanging()
					Me._Country = value
					Me.SendPropertyChanged("Country")
					Me.OnCountryChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_Phone", DbType:="NVarChar(24)")> _
		Public Property Phone() As String
			Get
				Return Me._Phone
			End Get
			Set(ByVal value As String)
				If (Me._Phone <> value) Then
					Me.OnPhoneChanging(value)
					Me.SendPropertyChanging()
					Me._Phone = value
					Me.SendPropertyChanged("Phone")
					Me.OnPhoneChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_Fax", DbType:="NVarChar(24)")> _
		Public Property Fax() As String
			Get
				Return Me._Fax
			End Get
			Set(ByVal value As String)
				If (Me._Fax <> value) Then
					Me.OnFaxChanging(value)
					Me.SendPropertyChanging()
					Me._Fax = value
					Me.SendPropertyChanged("Fax")
					Me.OnFaxChanged()
				End If
			End Set
		End Property

		<Association(Name:="Suppliers_Products", Storage:="_Products", ThisKey:="SupplierID", OtherKey:="SupplierID")> _
		Public Property Products() As EntitySet(Of Products)
			Get
				Return Me._Products
			End Get
			Set(ByVal value As EntitySet(Of Products))
				Me._Products.Assign(value)
			End Set
		End Property

		Public Event PropertyChanging As PropertyChangingEventHandler Implements INotifyPropertyChanging.PropertyChanging

		Public Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged

		Protected Overridable Sub SendPropertyChanging()
			If (Me.PropertyChangingEvent IsNot Nothing) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub

		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As String)
			If (Me.PropertyChangedEvent IsNot Nothing) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub

		Private Sub attach_Products(ByVal entity As Products)
			Me.SendPropertyChanging()
			entity.Suppliers = Me
		End Sub

		Private Sub detach_Products(ByVal entity As Products)
			Me.SendPropertyChanging()
			entity.Suppliers = Nothing
		End Sub
	End Class
End Namespace
'INSTANT VB TODO TASK: There is no equivalent to #pragma directives in VB.NET:
'#pragma warning restore 1591
