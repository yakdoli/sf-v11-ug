<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML>
<HEAD>
	<META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset=windows-1252">
	<TITLE></TITLE>
	<META NAME="GENERATOR" CONTENT="OpenOffice.org 2.3  (Win32)">
	<META NAME="CREATED" CONTENT="0;0">
	<META NAME="CHANGED" CONTENT="20090103;2591598">
	<STYLE TYPE="text/css">
	<!--
		@page { size: 8.5in 11in }
	    .style1
        {
            font-family: "Times New Roman", Times, serif;
            font-weight: bold;
            font-size: medium;
        }
	    .style2
        {
            font-family: "Times New Roman", Times, serif;
            font-size: medium;
        }
	-->
	</STYLE>
</HEAD>
<BODY LANG="en-US" DIR="LTR">
<H1>Observable Collection Demo</H1>
<P>This demo illustrates the support for data binding with an ObservableCollection 
    in GridGroupingControl</P>
<P><FONT COLOR="#000000"><FONT FACE="Times New Roman, serif"><FONT SIZE=4><B>Features:</B></FONT></FONT></FONT></P>
    <p>
        Notifications provided to bounded grid on adding, removing, moving items, 
        refreshing the collection or changing property value since, it implements <b>
        INotifyCollectionChanged</b>, <b>INotifyPropertyChanged</b> interfaces</p>
    <P>Below is the code snippet showing how to create and bind to a collection that 
        derives from the <b>ObservableCollection</b> class.</P>
    <pre><font color="#8d2e1c">              public class Customer : ObservableCollection<Customers></font>
    <font color="#8d2e1c">           { </font>
    <font color="#8d2e1c">              public Customer() </font>
    <font color="#8d2e1c">              { </font>
<font color="#8d2e1c">                     string connectionString = string.Format(@"Data Source = {0}", FindFile("Northwind.sdf")); </font>
<font color="#8d2e1c">                     northWind = new Northwind(connectionString);    </font>
<font color="#8d2e1c">                     var customer = northWind.Customers.Skip(0).Take(100).ToList(); </font>
<font color="#8d2e1c">                     foreach (var o in customer)    </font>
<font color="#8d2e1c">                     this.Add(o); </font>
<font color="#8d2e1c">                  } </font>
<font color="#8d2e1c">               } </font></pre>

    <p>
        The collection that has been created with the class <b>Customer</b> is bound to 
        the Grid Grouping control.</p>
    <pre style="margin-bottom: 0.2in"><font color="#8d2e1c">                gridGroupingControl1.DataSource = new Customer();  </font></pre>

    <p>
        Here is the image of the sample</p>
    <p align="CENTER">
       <img src="images/sample.png" NAME="graphics1" ALT="Observable Collection screenshot" ALIGN=BOTTOM BORDER=0>
    </p>
    <p class="style1">
        Interactive Features:</p>

    <ul>
        <li>
            <p>
                An Event tracer is maintained below the Grid to log the events that are fired at 
                runtime.
            </p>
        </li>
        <li>The <strong>GridEngine</strong> class is used to implement the<b>
            EngineEventTracer</b> to hook-up the events on demand and unhook them when they 
            are not traced</li>
        <li>
            <p>
                You will be able to see the events related to Grouping, Sorting, Filtering in 
                the log window which is generated via the <b>EventTracer</b></p>
        </li>
        <p class="style2">
            &nbsp;</p>
    </ul>

</BODY>
</HTML>