#Region "Copyright Syncfusion Inc. 2001 - 2013"
' Copyright Syncfusion Inc. 2001 - 2013. All rights reserved.
' Use of this code is subject to the terms of our license.
' A copy of the current license can be obtained at any time by e-mailing
' licensing@syncfusion.com. Any infringement will be prosecuted under
' applicable laws. 
#End Region

'------------------------------------------------------------------------------
' <autogenerated>
'	 This code was generated by a tool.
'	 Runtime Version: 1.1.4322.573
'
'	 Changes to this file may cause incorrect behavior and will be lost if 
'	 the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------


Imports Microsoft.VisualBasic
	Imports System
	Imports System.Data
	Imports System.Xml
	Imports System.Runtime.Serialization
Namespace FilterBar


	<Serializable(), System.ComponentModel.DesignerCategoryAttribute("code"), System.Diagnostics.DebuggerStepThrough(), System.ComponentModel.ToolboxItem(True)> _
	Public Class DataSet1 : Inherits DataSet

		Private tableCustomers As CustomersDataTable

		Private tableOrders As OrdersDataTable

		Private relationCustomersOrders As DataRelation

		Public Sub New()
			Me.InitClass()
			Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = New System.ComponentModel.CollectionChangeEventHandler(AddressOf Me.SchemaChanged)
			AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
			AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
		End Sub

		Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
			Dim strSchema As String = (CStr(info.GetValue("XmlSchema", GetType(String))))
			If (Not strSchema Is Nothing) Then
				Dim ds As DataSet = New DataSet()
				ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
				If (Not ds.Tables("Customers") Is Nothing) Then
					Me.Tables.Add(New CustomersDataTable(ds.Tables("Customers")))
				End If
				If (Not ds.Tables("Orders") Is Nothing) Then
					Me.Tables.Add(New OrdersDataTable(ds.Tables("Orders")))
				End If
				Me.DataSetName = ds.DataSetName
				Me.Prefix = ds.Prefix
				Me.Namespace = ds.Namespace
				Me.Locale = ds.Locale
				Me.CaseSensitive = ds.CaseSensitive
				Me.EnforceConstraints = ds.EnforceConstraints
				Me.Merge(ds, False, System.Data.MissingSchemaAction.Add)
				Me.InitVars()
			Else
				Me.InitClass()
			End If
			Me.GetSerializationData(info, context)
			Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = New System.ComponentModel.CollectionChangeEventHandler(AddressOf Me.SchemaChanged)
			AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
			AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
		End Sub

		<System.ComponentModel.Browsable(False), System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)> _
		Public ReadOnly Property Customers() As CustomersDataTable
			Get
				Return Me.tableCustomers
			End Get
		End Property

		<System.ComponentModel.Browsable(False), System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)> _
		Public ReadOnly Property Orders() As OrdersDataTable
			Get
				Return Me.tableOrders
			End Get
		End Property

		Public Overrides Function Clone() As DataSet
			Dim cln As DataSet1 = (CType(MyBase.Clone(), DataSet1))
			cln.InitVars()
			Return cln
		End Function

		Protected Overrides Function ShouldSerializeTables() As Boolean
			Return False
		End Function

		Protected Overrides Function ShouldSerializeRelations() As Boolean
			Return False
		End Function

		Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
			Me.Reset()
			Dim ds As DataSet = New DataSet()
			ds.ReadXml(reader)
			If (Not ds.Tables("Customers") Is Nothing) Then
				Me.Tables.Add(New CustomersDataTable(ds.Tables("Customers")))
			End If
			If (Not ds.Tables("Orders") Is Nothing) Then
				Me.Tables.Add(New OrdersDataTable(ds.Tables("Orders")))
			End If
			Me.DataSetName = ds.DataSetName
			Me.Prefix = ds.Prefix
			Me.Namespace = ds.Namespace
			Me.Locale = ds.Locale
			Me.CaseSensitive = ds.CaseSensitive
			Me.EnforceConstraints = ds.EnforceConstraints
			Me.Merge(ds, False, System.Data.MissingSchemaAction.Add)
			Me.InitVars()
		End Sub

		Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
			Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream()
			Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
			stream.Position = 0
			Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
		End Function

		Friend Sub InitVars()
			Me.tableCustomers = (CType(Me.Tables("Customers"), CustomersDataTable))
			If (Not Me.tableCustomers Is Nothing) Then
				Me.tableCustomers.InitVars()
			End If
			Me.tableOrders = (CType(Me.Tables("Orders"), OrdersDataTable))
			If (Not Me.tableOrders Is Nothing) Then
				Me.tableOrders.InitVars()
			End If
			Me.relationCustomersOrders = Me.Relations("CustomersOrders")
		End Sub

		Private Sub InitClass()
			Me.DataSetName = "DataSet1"
			Me.Prefix = ""
			Me.Namespace = "http://www.tempuri.org/DataSet1.xsd"
			Me.Locale = New System.Globalization.CultureInfo("en-US")
			Me.CaseSensitive = False
			Me.EnforceConstraints = True
			Me.tableCustomers = New CustomersDataTable()
			Me.Tables.Add(Me.tableCustomers)
			Me.tableOrders = New OrdersDataTable()
			Me.Tables.Add(Me.tableOrders)
			Dim fkc As ForeignKeyConstraint
			fkc = New ForeignKeyConstraint("CustomersOrders", New DataColumn() { Me.tableCustomers.CustomerIDColumn}, New DataColumn() { Me.tableOrders.CustomerIDColumn})
			Me.tableOrders.Constraints.Add(fkc)
			fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
			fkc.DeleteRule = System.Data.Rule.Cascade
			fkc.UpdateRule = System.Data.Rule.Cascade
			Me.relationCustomersOrders = New DataRelation("CustomersOrders", New DataColumn() { Me.tableCustomers.CustomerIDColumn}, New DataColumn() { Me.tableOrders.CustomerIDColumn}, False)
			Me.Relations.Add(Me.relationCustomersOrders)
		End Sub

		Private Function ShouldSerializeCustomers() As Boolean
			Return False
		End Function

		Private Function ShouldSerializeOrders() As Boolean
			Return False
		End Function

		Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
			If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
				Me.InitVars()
			End If
		End Sub

		Public Delegate Sub CustomersRowChangeEventHandler(ByVal sender As Object, ByVal e As CustomersRowChangeEvent)

		Public Delegate Sub OrdersRowChangeEventHandler(ByVal sender As Object, ByVal e As OrdersRowChangeEvent)

		<System.Diagnostics.DebuggerStepThrough()> _
		Public Class CustomersDataTable : Inherits DataTable : Implements System.Collections.IEnumerable

			Private columnAddress As DataColumn

			Private columnCity As DataColumn

			Private columnCompanyName As DataColumn

			Private columnContactName As DataColumn

			Private columnContactTitle As DataColumn

			Private columnCountry As DataColumn

			Private columnCustomerID As DataColumn

			Private columnFax As DataColumn

			Private columnPhone As DataColumn

			Private columnPostalCode As DataColumn

			Private columnRegion As DataColumn

			Friend Sub New()
				MyBase.New("Customers")
				Me.InitClass()
			End Sub

			Friend Sub New(ByVal table As DataTable)
				MyBase.New(table.TableName)
				If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
					Me.CaseSensitive = table.CaseSensitive
				End If
				If (table.Locale.ToString() <> table.DataSet.Locale.ToString()) Then
					Me.Locale = table.Locale
				End If
				If (table.Namespace <> table.DataSet.Namespace) Then
					Me.Namespace = table.Namespace
				End If
				Me.Prefix = table.Prefix
				Me.MinimumCapacity = table.MinimumCapacity
				Me.DisplayExpression = table.DisplayExpression
			End Sub

			<System.ComponentModel.Browsable(False)> _
			Public ReadOnly Property Count() As Integer
				Get
					Return Me.Rows.Count
				End Get
			End Property

			Friend ReadOnly Property AddressColumn() As DataColumn
				Get
					Return Me.columnAddress
				End Get
			End Property

			Friend ReadOnly Property CityColumn() As DataColumn
				Get
					Return Me.columnCity
				End Get
			End Property

			Friend ReadOnly Property CompanyNameColumn() As DataColumn
				Get
					Return Me.columnCompanyName
				End Get
			End Property

			Friend ReadOnly Property ContactNameColumn() As DataColumn
				Get
					Return Me.columnContactName
				End Get
			End Property

			Friend ReadOnly Property ContactTitleColumn() As DataColumn
				Get
					Return Me.columnContactTitle
				End Get
			End Property

			Friend ReadOnly Property CountryColumn() As DataColumn
				Get
					Return Me.columnCountry
				End Get
			End Property

			Friend ReadOnly Property CustomerIDColumn() As DataColumn
				Get
					Return Me.columnCustomerID
				End Get
			End Property

			Friend ReadOnly Property FaxColumn() As DataColumn
				Get
					Return Me.columnFax
				End Get
			End Property

			Friend ReadOnly Property PhoneColumn() As DataColumn
				Get
					Return Me.columnPhone
				End Get
			End Property

			Friend ReadOnly Property PostalCodeColumn() As DataColumn
				Get
					Return Me.columnPostalCode
				End Get
			End Property

			Friend ReadOnly Property RegionColumn() As DataColumn
				Get
					Return Me.columnRegion
				End Get
			End Property

			Public ReadOnly Default Property Item(ByVal index As Integer) As CustomersRow
				Get
					Return (CType(Me.Rows(index), CustomersRow))
				End Get
			End Property

			Public Event CustomersRowChanged As CustomersRowChangeEventHandler

			Public Event CustomersRowChanging As CustomersRowChangeEventHandler

			Public Event CustomersRowDeleted As CustomersRowChangeEventHandler

			Public Event CustomersRowDeleting As CustomersRowChangeEventHandler

			Public Sub AddCustomersRow(ByVal row As CustomersRow)
				Me.Rows.Add(row)
			End Sub

			Public Function AddCustomersRow(ByVal Address As String, ByVal City As String, ByVal CompanyName As String, ByVal ContactName As String, ByVal ContactTitle As String, ByVal Country As String, ByVal CustomerID As String, ByVal Fax As String, ByVal Phone As String, ByVal PostalCode As String, ByVal Region As String) As CustomersRow
				Dim rowCustomersRow As CustomersRow = (CType(Me.NewRow(), CustomersRow))
				rowCustomersRow.ItemArray = New Object() { Address, City, CompanyName, ContactName, ContactTitle, Country, CustomerID, Fax, Phone, PostalCode, Region}
				Me.Rows.Add(rowCustomersRow)
				Return rowCustomersRow
			End Function

			Public Function FindByCustomerID(ByVal CustomerID As String) As CustomersRow
				Return (CType(Me.Rows.Find(New Object() { CustomerID}), CustomersRow))
			End Function

			Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
				Return Me.Rows.GetEnumerator()
			End Function

			Public Overrides Function Clone() As DataTable
				Dim cln As CustomersDataTable = (CType(MyBase.Clone(), CustomersDataTable))
				cln.InitVars()
				Return cln
			End Function

			Protected Overrides Function CreateInstance() As DataTable
				Return New CustomersDataTable()
			End Function

			Friend Sub InitVars()
				Me.columnAddress = Me.Columns("Address")
				Me.columnCity = Me.Columns("City")
				Me.columnCompanyName = Me.Columns("CompanyName")
				Me.columnContactName = Me.Columns("ContactName")
				Me.columnContactTitle = Me.Columns("ContactTitle")
				Me.columnCountry = Me.Columns("Country")
				Me.columnCustomerID = Me.Columns("CustomerID")
				Me.columnFax = Me.Columns("Fax")
				Me.columnPhone = Me.Columns("Phone")
				Me.columnPostalCode = Me.Columns("PostalCode")
				Me.columnRegion = Me.Columns("Region")
			End Sub

			Private Sub InitClass()
				Me.columnAddress = New DataColumn("Address", GetType(String), Nothing, System.Data.MappingType.Element)
				Me.Columns.Add(Me.columnAddress)
				Me.columnCity = New DataColumn("City", GetType(String), Nothing, System.Data.MappingType.Element)
				Me.Columns.Add(Me.columnCity)
				Me.columnCompanyName = New DataColumn("CompanyName", GetType(String), Nothing, System.Data.MappingType.Element)
				Me.Columns.Add(Me.columnCompanyName)
				Me.columnContactName = New DataColumn("ContactName", GetType(String), Nothing, System.Data.MappingType.Element)
				Me.Columns.Add(Me.columnContactName)
				Me.columnContactTitle = New DataColumn("ContactTitle", GetType(String), Nothing, System.Data.MappingType.Element)
				Me.Columns.Add(Me.columnContactTitle)
				Me.columnCountry = New DataColumn("Country", GetType(String), Nothing, System.Data.MappingType.Element)
				Me.Columns.Add(Me.columnCountry)
				Me.columnCustomerID = New DataColumn("CustomerID", GetType(String), Nothing, System.Data.MappingType.Element)
				Me.Columns.Add(Me.columnCustomerID)
				Me.columnFax = New DataColumn("Fax", GetType(String), Nothing, System.Data.MappingType.Element)
				Me.Columns.Add(Me.columnFax)
				Me.columnPhone = New DataColumn("Phone", GetType(String), Nothing, System.Data.MappingType.Element)
				Me.Columns.Add(Me.columnPhone)
				Me.columnPostalCode = New DataColumn("PostalCode", GetType(String), Nothing, System.Data.MappingType.Element)
				Me.Columns.Add(Me.columnPostalCode)
				Me.columnRegion = New DataColumn("Region", GetType(String), Nothing, System.Data.MappingType.Element)
				Me.Columns.Add(Me.columnRegion)
				Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() { Me.columnCustomerID}, True))
				Me.columnCustomerID.AllowDBNull = False
				Me.columnCustomerID.Unique = True
			End Sub

			Public Function NewCustomersRow() As CustomersRow
				Return (CType(Me.NewRow(), CustomersRow))
			End Function

			Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
				Return New CustomersRow(builder)
			End Function

			Protected Overrides Function GetRowType() As System.Type
				Return GetType(CustomersRow)
			End Function

			Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
				MyBase.OnRowChanged(e)
				If (Not Me.CustomersRowChangedEvent Is Nothing) Then
					RaiseEvent CustomersRowChanged(Me, New CustomersRowChangeEvent((CType(e.Row, CustomersRow)), e.Action))
				End If
			End Sub

			Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
				MyBase.OnRowChanging(e)
				If (Not Me.CustomersRowChangingEvent Is Nothing) Then
					RaiseEvent CustomersRowChanging(Me, New CustomersRowChangeEvent((CType(e.Row, CustomersRow)), e.Action))
				End If
			End Sub

			Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
				MyBase.OnRowDeleted(e)
				If (Not Me.CustomersRowDeletedEvent Is Nothing) Then
					RaiseEvent CustomersRowDeleted(Me, New CustomersRowChangeEvent((CType(e.Row, CustomersRow)), e.Action))
				End If
			End Sub

			Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
				MyBase.OnRowDeleting(e)
				If (Not Me.CustomersRowDeletingEvent Is Nothing) Then
					RaiseEvent CustomersRowDeleting(Me, New CustomersRowChangeEvent((CType(e.Row, CustomersRow)), e.Action))
				End If
			End Sub

			Public Sub RemoveCustomersRow(ByVal row As CustomersRow)
				Me.Rows.Remove(row)
			End Sub
		End Class

		<System.Diagnostics.DebuggerStepThrough()> _
		Public Class CustomersRow : Inherits DataRow

			Private tableCustomers As CustomersDataTable

			Friend Sub New(ByVal rb As DataRowBuilder)
				MyBase.New(rb)
				Me.tableCustomers = (CType(Me.Table, CustomersDataTable))
			End Sub

			Public Property Address() As String
				Get
					Try
						Return (CStr(Me(Me.tableCustomers.AddressColumn)))
					Catch e As InvalidCastException
						Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableCustomers.AddressColumn) = Value
				End Set
			End Property

			Public Property City() As String
				Get
					Try
						Return (CStr(Me(Me.tableCustomers.CityColumn)))
					Catch e As InvalidCastException
						Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableCustomers.CityColumn) = Value
				End Set
			End Property

			Public Property CompanyName() As String
				Get
					Try
						Return (CStr(Me(Me.tableCustomers.CompanyNameColumn)))
					Catch e As InvalidCastException
						Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableCustomers.CompanyNameColumn) = Value
				End Set
			End Property

			Public Property ContactName() As String
				Get
					Try
						Return (CStr(Me(Me.tableCustomers.ContactNameColumn)))
					Catch e As InvalidCastException
						Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableCustomers.ContactNameColumn) = Value
				End Set
			End Property

			Public Property ContactTitle() As String
				Get
					Try
						Return (CStr(Me(Me.tableCustomers.ContactTitleColumn)))
					Catch e As InvalidCastException
						Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableCustomers.ContactTitleColumn) = Value
				End Set
			End Property

			Public Property Country() As String
				Get
					Try
						Return (CStr(Me(Me.tableCustomers.CountryColumn)))
					Catch e As InvalidCastException
						Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableCustomers.CountryColumn) = Value
				End Set
			End Property

			Public Property CustomerID() As String
				Get
					Return (CStr(Me(Me.tableCustomers.CustomerIDColumn)))
				End Get
				Set
					Me(Me.tableCustomers.CustomerIDColumn) = Value
				End Set
			End Property

			Public Property Fax() As String
				Get
					Try
						Return (CStr(Me(Me.tableCustomers.FaxColumn)))
					Catch e As InvalidCastException
						Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableCustomers.FaxColumn) = Value
				End Set
			End Property

			Public Property Phone() As String
				Get
					Try
						Return (CStr(Me(Me.tableCustomers.PhoneColumn)))
					Catch e As InvalidCastException
						Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableCustomers.PhoneColumn) = Value
				End Set
			End Property

			Public Property PostalCode() As String
				Get
					Try
						Return (CStr(Me(Me.tableCustomers.PostalCodeColumn)))
					Catch e As InvalidCastException
						Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableCustomers.PostalCodeColumn) = Value
				End Set
			End Property

			Public Property Region() As String
				Get
					Try
						Return (CStr(Me(Me.tableCustomers.RegionColumn)))
					Catch e As InvalidCastException
						Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableCustomers.RegionColumn) = Value
				End Set
			End Property

			Public Function IsAddressNull() As Boolean
				Return Me.IsNull(Me.tableCustomers.AddressColumn)
			End Function

			Public Sub SetAddressNull()
				Me(Me.tableCustomers.AddressColumn) = System.Convert.DBNull
			End Sub

			Public Function IsCityNull() As Boolean
				Return Me.IsNull(Me.tableCustomers.CityColumn)
			End Function

			Public Sub SetCityNull()
				Me(Me.tableCustomers.CityColumn) = System.Convert.DBNull
			End Sub

			Public Function IsCompanyNameNull() As Boolean
				Return Me.IsNull(Me.tableCustomers.CompanyNameColumn)
			End Function

			Public Sub SetCompanyNameNull()
				Me(Me.tableCustomers.CompanyNameColumn) = System.Convert.DBNull
			End Sub

			Public Function IsContactNameNull() As Boolean
				Return Me.IsNull(Me.tableCustomers.ContactNameColumn)
			End Function

			Public Sub SetContactNameNull()
				Me(Me.tableCustomers.ContactNameColumn) = System.Convert.DBNull
			End Sub

			Public Function IsContactTitleNull() As Boolean
				Return Me.IsNull(Me.tableCustomers.ContactTitleColumn)
			End Function

			Public Sub SetContactTitleNull()
				Me(Me.tableCustomers.ContactTitleColumn) = System.Convert.DBNull
			End Sub

			Public Function IsCountryNull() As Boolean
				Return Me.IsNull(Me.tableCustomers.CountryColumn)
			End Function

			Public Sub SetCountryNull()
				Me(Me.tableCustomers.CountryColumn) = System.Convert.DBNull
			End Sub

			Public Function IsFaxNull() As Boolean
				Return Me.IsNull(Me.tableCustomers.FaxColumn)
			End Function

			Public Sub SetFaxNull()
				Me(Me.tableCustomers.FaxColumn) = System.Convert.DBNull
			End Sub

			Public Function IsPhoneNull() As Boolean
				Return Me.IsNull(Me.tableCustomers.PhoneColumn)
			End Function

			Public Sub SetPhoneNull()
				Me(Me.tableCustomers.PhoneColumn) = System.Convert.DBNull
			End Sub

			Public Function IsPostalCodeNull() As Boolean
				Return Me.IsNull(Me.tableCustomers.PostalCodeColumn)
			End Function

			Public Sub SetPostalCodeNull()
				Me(Me.tableCustomers.PostalCodeColumn) = System.Convert.DBNull
			End Sub

			Public Function IsRegionNull() As Boolean
				Return Me.IsNull(Me.tableCustomers.RegionColumn)
			End Function

			Public Sub SetRegionNull()
				Me(Me.tableCustomers.RegionColumn) = System.Convert.DBNull
			End Sub

			Public Function GetOrdersRows() As OrdersRow()
				Return (CType(Me.GetChildRows(Me.Table.ChildRelations("CustomersOrders")), OrdersRow()))
			End Function
		End Class

		<System.Diagnostics.DebuggerStepThrough()> _
		Public Class CustomersRowChangeEvent : Inherits EventArgs

			Private eventRow As CustomersRow

			Private eventAction As DataRowAction

'INSTANT VB NOTE: The parameter row was renamed since Visual Basic will not uniquely identify class members when parameters have the same name:
'INSTANT VB NOTE: The parameter action was renamed since Visual Basic will not uniquely identify class members when parameters have the same name:
			Public Sub New(ByVal row_Renamed As CustomersRow, ByVal action_Renamed As DataRowAction)
				Me.eventRow = row_Renamed
				Me.eventAction = action_Renamed
			End Sub

			Public ReadOnly Property Row() As CustomersRow
				Get
					Return Me.eventRow
				End Get
			End Property

			Public ReadOnly Property Action() As DataRowAction
				Get
					Return Me.eventAction
				End Get
			End Property
		End Class

		<System.Diagnostics.DebuggerStepThrough()> _
		Public Class OrdersDataTable : Inherits DataTable : Implements System.Collections.IEnumerable

			Private columnCustomerID As DataColumn

			Private columnEmployeeID As DataColumn

			Private columnFreight As DataColumn

			Private columnOrderDate As DataColumn

			Private columnOrderID As DataColumn

			Private columnRequiredDate As DataColumn

			Private columnShipAddress As DataColumn

			Private columnShipCity As DataColumn

			Private columnShipCountry As DataColumn

			Private columnShipName As DataColumn

			Private columnShippedDate As DataColumn

			Private columnShipPostalCode As DataColumn

			Private columnShipRegion As DataColumn

			Private columnShipVia As DataColumn

			Friend Sub New()
				MyBase.New("Orders")
				Me.InitClass()
			End Sub

			Friend Sub New(ByVal table As DataTable)
				MyBase.New(table.TableName)
				If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
					Me.CaseSensitive = table.CaseSensitive
				End If
				If (table.Locale.ToString() <> table.DataSet.Locale.ToString()) Then
					Me.Locale = table.Locale
				End If
				If (table.Namespace <> table.DataSet.Namespace) Then
					Me.Namespace = table.Namespace
				End If
				Me.Prefix = table.Prefix
				Me.MinimumCapacity = table.MinimumCapacity
				Me.DisplayExpression = table.DisplayExpression
			End Sub

			<System.ComponentModel.Browsable(False)> _
			Public ReadOnly Property Count() As Integer
				Get
					Return Me.Rows.Count
				End Get
			End Property

			Friend ReadOnly Property CustomerIDColumn() As DataColumn
				Get
					Return Me.columnCustomerID
				End Get
			End Property

			Friend ReadOnly Property EmployeeIDColumn() As DataColumn
				Get
					Return Me.columnEmployeeID
				End Get
			End Property

			Friend ReadOnly Property FreightColumn() As DataColumn
				Get
					Return Me.columnFreight
				End Get
			End Property

			Friend ReadOnly Property OrderDateColumn() As DataColumn
				Get
					Return Me.columnOrderDate
				End Get
			End Property

			Friend ReadOnly Property OrderIDColumn() As DataColumn
				Get
					Return Me.columnOrderID
				End Get
			End Property

			Friend ReadOnly Property RequiredDateColumn() As DataColumn
				Get
					Return Me.columnRequiredDate
				End Get
			End Property

			Friend ReadOnly Property ShipAddressColumn() As DataColumn
				Get
					Return Me.columnShipAddress
				End Get
			End Property

			Friend ReadOnly Property ShipCityColumn() As DataColumn
				Get
					Return Me.columnShipCity
				End Get
			End Property

			Friend ReadOnly Property ShipCountryColumn() As DataColumn
				Get
					Return Me.columnShipCountry
				End Get
			End Property

			Friend ReadOnly Property ShipNameColumn() As DataColumn
				Get
					Return Me.columnShipName
				End Get
			End Property

			Friend ReadOnly Property ShippedDateColumn() As DataColumn
				Get
					Return Me.columnShippedDate
				End Get
			End Property

			Friend ReadOnly Property ShipPostalCodeColumn() As DataColumn
				Get
					Return Me.columnShipPostalCode
				End Get
			End Property

			Friend ReadOnly Property ShipRegionColumn() As DataColumn
				Get
					Return Me.columnShipRegion
				End Get
			End Property

			Friend ReadOnly Property ShipViaColumn() As DataColumn
				Get
					Return Me.columnShipVia
				End Get
			End Property

			Public ReadOnly Default Property Item(ByVal index As Integer) As OrdersRow
				Get
					Return (CType(Me.Rows(index), OrdersRow))
				End Get
			End Property

			Public Event OrdersRowChanged As OrdersRowChangeEventHandler

			Public Event OrdersRowChanging As OrdersRowChangeEventHandler

			Public Event OrdersRowDeleted As OrdersRowChangeEventHandler

			Public Event OrdersRowDeleting As OrdersRowChangeEventHandler

			Public Sub AddOrdersRow(ByVal row As OrdersRow)
				Me.Rows.Add(row)
			End Sub

			Public Function AddOrdersRow(ByVal parentCustomersRowByCustomersOrders As CustomersRow, ByVal EmployeeID As Integer, ByVal Freight As System.Decimal, ByVal OrderDate As System.DateTime, ByVal RequiredDate As System.DateTime, ByVal ShipAddress As String, ByVal ShipCity As String, ByVal ShipCountry As String, ByVal ShipName As String, ByVal ShippedDate As System.DateTime, ByVal ShipPostalCode As String, ByVal ShipRegion As String, ByVal ShipVia As Integer) As OrdersRow
				Dim rowOrdersRow As OrdersRow = (CType(Me.NewRow(), OrdersRow))
				rowOrdersRow.ItemArray = New Object() { parentCustomersRowByCustomersOrders(6), EmployeeID, Freight, OrderDate, Nothing, RequiredDate, ShipAddress, ShipCity, ShipCountry, ShipName, ShippedDate, ShipPostalCode, ShipRegion, ShipVia}
				Me.Rows.Add(rowOrdersRow)
				Return rowOrdersRow
			End Function

			Public Function FindByOrderID(ByVal OrderID As Integer) As OrdersRow
				Return (CType(Me.Rows.Find(New Object() { OrderID}), OrdersRow))
			End Function

			Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
				Return Me.Rows.GetEnumerator()
			End Function

			Public Overrides Function Clone() As DataTable
				Dim cln As OrdersDataTable = (CType(MyBase.Clone(), OrdersDataTable))
				cln.InitVars()
				Return cln
			End Function

			Protected Overrides Function CreateInstance() As DataTable
				Return New OrdersDataTable()
			End Function

			Friend Sub InitVars()
				Me.columnCustomerID = Me.Columns("CustomerID")
				Me.columnEmployeeID = Me.Columns("EmployeeID")
				Me.columnFreight = Me.Columns("Freight")
				Me.columnOrderDate = Me.Columns("OrderDate")
				Me.columnOrderID = Me.Columns("OrderID")
				Me.columnRequiredDate = Me.Columns("RequiredDate")
				Me.columnShipAddress = Me.Columns("ShipAddress")
				Me.columnShipCity = Me.Columns("ShipCity")
				Me.columnShipCountry = Me.Columns("ShipCountry")
				Me.columnShipName = Me.Columns("ShipName")
				Me.columnShippedDate = Me.Columns("ShippedDate")
				Me.columnShipPostalCode = Me.Columns("ShipPostalCode")
				Me.columnShipRegion = Me.Columns("ShipRegion")
				Me.columnShipVia = Me.Columns("ShipVia")
			End Sub

			Private Sub InitClass()
				Me.columnCustomerID = New DataColumn("CustomerID", GetType(String), Nothing, System.Data.MappingType.Element)
				Me.Columns.Add(Me.columnCustomerID)
				Me.columnEmployeeID = New DataColumn("EmployeeID", GetType(Integer), Nothing, System.Data.MappingType.Element)
				Me.Columns.Add(Me.columnEmployeeID)
				Me.columnFreight = New DataColumn("Freight", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
				Me.Columns.Add(Me.columnFreight)
				Me.columnOrderDate = New DataColumn("OrderDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
				Me.Columns.Add(Me.columnOrderDate)
				Me.columnOrderID = New DataColumn("OrderID", GetType(Integer), Nothing, System.Data.MappingType.Element)
				Me.Columns.Add(Me.columnOrderID)
				Me.columnRequiredDate = New DataColumn("RequiredDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
				Me.Columns.Add(Me.columnRequiredDate)
				Me.columnShipAddress = New DataColumn("ShipAddress", GetType(String), Nothing, System.Data.MappingType.Element)
				Me.Columns.Add(Me.columnShipAddress)
				Me.columnShipCity = New DataColumn("ShipCity", GetType(String), Nothing, System.Data.MappingType.Element)
				Me.Columns.Add(Me.columnShipCity)
				Me.columnShipCountry = New DataColumn("ShipCountry", GetType(String), Nothing, System.Data.MappingType.Element)
				Me.Columns.Add(Me.columnShipCountry)
				Me.columnShipName = New DataColumn("ShipName", GetType(String), Nothing, System.Data.MappingType.Element)
				Me.Columns.Add(Me.columnShipName)
				Me.columnShippedDate = New DataColumn("ShippedDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
				Me.Columns.Add(Me.columnShippedDate)
				Me.columnShipPostalCode = New DataColumn("ShipPostalCode", GetType(String), Nothing, System.Data.MappingType.Element)
				Me.Columns.Add(Me.columnShipPostalCode)
				Me.columnShipRegion = New DataColumn("ShipRegion", GetType(String), Nothing, System.Data.MappingType.Element)
				Me.Columns.Add(Me.columnShipRegion)
				Me.columnShipVia = New DataColumn("ShipVia", GetType(Integer), Nothing, System.Data.MappingType.Element)
				Me.Columns.Add(Me.columnShipVia)
				Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() { Me.columnOrderID}, True))
				Me.columnOrderID.AutoIncrement = True
				Me.columnOrderID.AllowDBNull = False
				Me.columnOrderID.Unique = True
			End Sub

			Public Function NewOrdersRow() As OrdersRow
				Return (CType(Me.NewRow(), OrdersRow))
			End Function

			Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
				Return New OrdersRow(builder)
			End Function

			Protected Overrides Function GetRowType() As System.Type
				Return GetType(OrdersRow)
			End Function

			Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
				MyBase.OnRowChanged(e)
				If (Not Me.OrdersRowChangedEvent Is Nothing) Then
					RaiseEvent OrdersRowChanged(Me, New OrdersRowChangeEvent((CType(e.Row, OrdersRow)), e.Action))
				End If
			End Sub

			Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
				MyBase.OnRowChanging(e)
				If (Not Me.OrdersRowChangingEvent Is Nothing) Then
					RaiseEvent OrdersRowChanging(Me, New OrdersRowChangeEvent((CType(e.Row, OrdersRow)), e.Action))
				End If
			End Sub

			Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
				MyBase.OnRowDeleted(e)
				If (Not Me.OrdersRowDeletedEvent Is Nothing) Then
					RaiseEvent OrdersRowDeleted(Me, New OrdersRowChangeEvent((CType(e.Row, OrdersRow)), e.Action))
				End If
			End Sub

			Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
				MyBase.OnRowDeleting(e)
				If (Not Me.OrdersRowDeletingEvent Is Nothing) Then
					RaiseEvent OrdersRowDeleting(Me, New OrdersRowChangeEvent((CType(e.Row, OrdersRow)), e.Action))
				End If
			End Sub

			Public Sub RemoveOrdersRow(ByVal row As OrdersRow)
				Me.Rows.Remove(row)
			End Sub
		End Class

		<System.Diagnostics.DebuggerStepThrough()> _
		Public Class OrdersRow : Inherits DataRow

			Private tableOrders As OrdersDataTable

			Friend Sub New(ByVal rb As DataRowBuilder)
				MyBase.New(rb)
				Me.tableOrders = (CType(Me.Table, OrdersDataTable))
			End Sub

			Public Property CustomerID() As String
				Get
					Try
						Return (CStr(Me(Me.tableOrders.CustomerIDColumn)))
					Catch e As InvalidCastException
						Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableOrders.CustomerIDColumn) = Value
				End Set
			End Property

			Public Property EmployeeID() As Integer
				Get
					Try
						Return (CInt(Me(Me.tableOrders.EmployeeIDColumn)))
					Catch e As InvalidCastException
						Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableOrders.EmployeeIDColumn) = Value
				End Set
			End Property

			Public Property Freight() As System.Decimal
				Get
					Try
						Return (CDec(Me(Me.tableOrders.FreightColumn)))
					Catch e As InvalidCastException
						Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableOrders.FreightColumn) = Value
				End Set
			End Property

			Public Property OrderDate() As System.DateTime
				Get
					Try
						Return (CDate(Me(Me.tableOrders.OrderDateColumn)))
					Catch e As InvalidCastException
						Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableOrders.OrderDateColumn) = Value
				End Set
			End Property

			Public Property OrderID() As Integer
				Get
					Return (CInt(Me(Me.tableOrders.OrderIDColumn)))
				End Get
				Set
					Me(Me.tableOrders.OrderIDColumn) = Value
				End Set
			End Property

			Public Property RequiredDate() As System.DateTime
				Get
					Try
						Return (CDate(Me(Me.tableOrders.RequiredDateColumn)))
					Catch e As InvalidCastException
						Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableOrders.RequiredDateColumn) = Value
				End Set
			End Property

			Public Property ShipAddress() As String
				Get
					Try
						Return (CStr(Me(Me.tableOrders.ShipAddressColumn)))
					Catch e As InvalidCastException
						Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableOrders.ShipAddressColumn) = Value
				End Set
			End Property

			Public Property ShipCity() As String
				Get
					Try
						Return (CStr(Me(Me.tableOrders.ShipCityColumn)))
					Catch e As InvalidCastException
						Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableOrders.ShipCityColumn) = Value
				End Set
			End Property

			Public Property ShipCountry() As String
				Get
					Try
						Return (CStr(Me(Me.tableOrders.ShipCountryColumn)))
					Catch e As InvalidCastException
						Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableOrders.ShipCountryColumn) = Value
				End Set
			End Property

			Public Property ShipName() As String
				Get
					Try
						Return (CStr(Me(Me.tableOrders.ShipNameColumn)))
					Catch e As InvalidCastException
						Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableOrders.ShipNameColumn) = Value
				End Set
			End Property

			Public Property ShippedDate() As System.DateTime
				Get
					Try
						Return (CDate(Me(Me.tableOrders.ShippedDateColumn)))
					Catch e As InvalidCastException
						Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableOrders.ShippedDateColumn) = Value
				End Set
			End Property

			Public Property ShipPostalCode() As String
				Get
					Try
						Return (CStr(Me(Me.tableOrders.ShipPostalCodeColumn)))
					Catch e As InvalidCastException
						Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableOrders.ShipPostalCodeColumn) = Value
				End Set
			End Property

			Public Property ShipRegion() As String
				Get
					Try
						Return (CStr(Me(Me.tableOrders.ShipRegionColumn)))
					Catch e As InvalidCastException
						Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableOrders.ShipRegionColumn) = Value
				End Set
			End Property

			Public Property ShipVia() As Integer
				Get
					Try
						Return (CInt(Me(Me.tableOrders.ShipViaColumn)))
					Catch e As InvalidCastException
						Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableOrders.ShipViaColumn) = Value
				End Set
			End Property

			Public Property CustomersRow() As CustomersRow
				Get
					Return (CType(Me.GetParentRow(Me.Table.ParentRelations("CustomersOrders")), CustomersRow))
				End Get
				Set
					Me.SetParentRow(Value, Me.Table.ParentRelations("CustomersOrders"))
				End Set
			End Property

			Public Function IsCustomerIDNull() As Boolean
				Return Me.IsNull(Me.tableOrders.CustomerIDColumn)
			End Function

			Public Sub SetCustomerIDNull()
				Me(Me.tableOrders.CustomerIDColumn) = System.Convert.DBNull
			End Sub

			Public Function IsEmployeeIDNull() As Boolean
				Return Me.IsNull(Me.tableOrders.EmployeeIDColumn)
			End Function

			Public Sub SetEmployeeIDNull()
				Me(Me.tableOrders.EmployeeIDColumn) = System.Convert.DBNull
			End Sub

			Public Function IsFreightNull() As Boolean
				Return Me.IsNull(Me.tableOrders.FreightColumn)
			End Function

			Public Sub SetFreightNull()
				Me(Me.tableOrders.FreightColumn) = System.Convert.DBNull
			End Sub

			Public Function IsOrderDateNull() As Boolean
				Return Me.IsNull(Me.tableOrders.OrderDateColumn)
			End Function

			Public Sub SetOrderDateNull()
				Me(Me.tableOrders.OrderDateColumn) = System.Convert.DBNull
			End Sub

			Public Function IsRequiredDateNull() As Boolean
				Return Me.IsNull(Me.tableOrders.RequiredDateColumn)
			End Function

			Public Sub SetRequiredDateNull()
				Me(Me.tableOrders.RequiredDateColumn) = System.Convert.DBNull
			End Sub

			Public Function IsShipAddressNull() As Boolean
				Return Me.IsNull(Me.tableOrders.ShipAddressColumn)
			End Function

			Public Sub SetShipAddressNull()
				Me(Me.tableOrders.ShipAddressColumn) = System.Convert.DBNull
			End Sub

			Public Function IsShipCityNull() As Boolean
				Return Me.IsNull(Me.tableOrders.ShipCityColumn)
			End Function

			Public Sub SetShipCityNull()
				Me(Me.tableOrders.ShipCityColumn) = System.Convert.DBNull
			End Sub

			Public Function IsShipCountryNull() As Boolean
				Return Me.IsNull(Me.tableOrders.ShipCountryColumn)
			End Function

			Public Sub SetShipCountryNull()
				Me(Me.tableOrders.ShipCountryColumn) = System.Convert.DBNull
			End Sub

			Public Function IsShipNameNull() As Boolean
				Return Me.IsNull(Me.tableOrders.ShipNameColumn)
			End Function

			Public Sub SetShipNameNull()
				Me(Me.tableOrders.ShipNameColumn) = System.Convert.DBNull
			End Sub

			Public Function IsShippedDateNull() As Boolean
				Return Me.IsNull(Me.tableOrders.ShippedDateColumn)
			End Function

			Public Sub SetShippedDateNull()
				Me(Me.tableOrders.ShippedDateColumn) = System.Convert.DBNull
			End Sub

			Public Function IsShipPostalCodeNull() As Boolean
				Return Me.IsNull(Me.tableOrders.ShipPostalCodeColumn)
			End Function

			Public Sub SetShipPostalCodeNull()
				Me(Me.tableOrders.ShipPostalCodeColumn) = System.Convert.DBNull
			End Sub

			Public Function IsShipRegionNull() As Boolean
				Return Me.IsNull(Me.tableOrders.ShipRegionColumn)
			End Function

			Public Sub SetShipRegionNull()
				Me(Me.tableOrders.ShipRegionColumn) = System.Convert.DBNull
			End Sub

			Public Function IsShipViaNull() As Boolean
				Return Me.IsNull(Me.tableOrders.ShipViaColumn)
			End Function

			Public Sub SetShipViaNull()
				Me(Me.tableOrders.ShipViaColumn) = System.Convert.DBNull
			End Sub
		End Class

		<System.Diagnostics.DebuggerStepThrough()> _
		Public Class OrdersRowChangeEvent : Inherits EventArgs

			Private eventRow As OrdersRow

			Private eventAction As DataRowAction

'INSTANT VB NOTE: The parameter row was renamed since Visual Basic will not uniquely identify class members when parameters have the same name:
'INSTANT VB NOTE: The parameter action was renamed since Visual Basic will not uniquely identify class members when parameters have the same name:
			Public Sub New(ByVal row_Renamed As OrdersRow, ByVal action_Renamed As DataRowAction)
				Me.eventRow = row_Renamed
				Me.eventAction = action_Renamed
			End Sub

			Public ReadOnly Property Row() As OrdersRow
				Get
					Return Me.eventRow
				End Get
			End Property

			Public ReadOnly Property Action() As DataRowAction
				Get
					Return Me.eventAction
				End Get
			End Property
		End Class
	End Class
End Namespace
