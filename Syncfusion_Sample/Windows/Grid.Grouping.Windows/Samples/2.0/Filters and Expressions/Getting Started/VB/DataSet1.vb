#Region "Copyright Syncfusion Inc. 2001 - 2013"
' Copyright Syncfusion Inc. 2001 - 2013. All rights reserved.
' Use of this code is subject to the terms of our license.
' A copy of the current license can be obtained at any time by e-mailing
' licensing@syncfusion.com. Any infringement will be prosecuted under
' applicable laws. 
#End Region

'------------------------------------------------------------------------------
' <autogenerated>
'	 This code was generated by a tool.
'	 Runtime Version: 1.1.4322.573
'
'	 Changes to this file may cause incorrect behavior and will be lost if 
'	 the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------


Imports Microsoft.VisualBasic
	Imports System
	Imports System.Data
	Imports System.Xml
	Imports System.Runtime.Serialization
Namespace Filtering_Tutorial


	<Serializable(), System.ComponentModel.DesignerCategoryAttribute("code"), System.Diagnostics.DebuggerStepThrough(), System.ComponentModel.ToolboxItem(True)> _
	Public Class DataSet1 : Inherits DataSet

		Private tableStatistics As StatisticsDataTable

		Public Sub New()
			Me.InitClass()
			Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = New System.ComponentModel.CollectionChangeEventHandler(AddressOf Me.SchemaChanged)
			AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
			AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
		End Sub

		Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
			Dim strSchema As String = (CStr(info.GetValue("XmlSchema", GetType(String))))
			If (Not strSchema Is Nothing) Then
				Dim ds As DataSet = New DataSet()
				ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
				If (Not ds.Tables("Statistics") Is Nothing) Then
					Me.Tables.Add(New StatisticsDataTable(ds.Tables("Statistics")))
				End If
				Me.DataSetName = ds.DataSetName
				Me.Prefix = ds.Prefix
				Me.Namespace = ds.Namespace
				Me.Locale = ds.Locale
				Me.CaseSensitive = ds.CaseSensitive
				Me.EnforceConstraints = ds.EnforceConstraints
				Me.Merge(ds, False, System.Data.MissingSchemaAction.Add)
				Me.InitVars()
			Else
				Me.InitClass()
			End If
			Me.GetSerializationData(info, context)
			Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = New System.ComponentModel.CollectionChangeEventHandler(AddressOf Me.SchemaChanged)
			AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
			AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
		End Sub

		<System.ComponentModel.Browsable(False), System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)> _
		Public ReadOnly Property Statistics() As StatisticsDataTable
			Get
				Return Me.tableStatistics
			End Get
		End Property

		Public Overrides Function Clone() As DataSet
			Dim cln As DataSet1 = (CType(MyBase.Clone(), DataSet1))
			cln.InitVars()
			Return cln
		End Function

		Protected Overrides Function ShouldSerializeTables() As Boolean
			Return False
		End Function

		Protected Overrides Function ShouldSerializeRelations() As Boolean
			Return False
		End Function

		Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
			Me.Reset()
			Dim ds As DataSet = New DataSet()
			ds.ReadXml(reader)
			If (Not ds.Tables("Statistics") Is Nothing) Then
				Me.Tables.Add(New StatisticsDataTable(ds.Tables("Statistics")))
			End If
			Me.DataSetName = ds.DataSetName
			Me.Prefix = ds.Prefix
			Me.Namespace = ds.Namespace
			Me.Locale = ds.Locale
			Me.CaseSensitive = ds.CaseSensitive
			Me.EnforceConstraints = ds.EnforceConstraints
			Me.Merge(ds, False, System.Data.MissingSchemaAction.Add)
			Me.InitVars()
		End Sub

		Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
			Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream()
			Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
			stream.Position = 0
			Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
		End Function

		Friend Sub InitVars()
			Me.tableStatistics = (CType(Me.Tables("Statistics"), StatisticsDataTable))
			If (Not Me.tableStatistics Is Nothing) Then
				Me.tableStatistics.InitVars()
			End If
		End Sub

		Private Sub InitClass()
			Me.DataSetName = "DataSet1"
			Me.Prefix = ""
			Me.Namespace = "http://www.tempuri.org/DataSet1.xsd"
			Me.Locale = New System.Globalization.CultureInfo("en-US")
			Me.CaseSensitive = False
			Me.EnforceConstraints = True
			Me.tableStatistics = New StatisticsDataTable()
			Me.Tables.Add(Me.tableStatistics)
		End Sub

		Private Function ShouldSerializeStatistics() As Boolean
			Return False
		End Function

		Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
			If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
				Me.InitVars()
			End If
		End Sub

		Public Delegate Sub StatisticsRowChangeEventHandler(ByVal sender As Object, ByVal e As StatisticsRowChangeEvent)

		<System.Diagnostics.DebuggerStepThrough()> _
		Public Class StatisticsDataTable : Inherits DataTable : Implements System.Collections.IEnumerable

			Private columnID As DataColumn

			Private columnlosses As DataColumn

			Private columnSchool As DataColumn

			Private columnSport As DataColumn

			Private columnties As DataColumn

			Private columnwins As DataColumn

			Private columnyear As DataColumn

			Friend Sub New()
				MyBase.New("Statistics")
				Me.InitClass()
			End Sub

			Friend Sub New(ByVal table As DataTable)
				MyBase.New(table.TableName)
				If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
					Me.CaseSensitive = table.CaseSensitive
				End If
				If (table.Locale.ToString() <> table.DataSet.Locale.ToString()) Then
					Me.Locale = table.Locale
				End If
				If (table.Namespace <> table.DataSet.Namespace) Then
					Me.Namespace = table.Namespace
				End If
				Me.Prefix = table.Prefix
				Me.MinimumCapacity = table.MinimumCapacity
				Me.DisplayExpression = table.DisplayExpression
			End Sub

			<System.ComponentModel.Browsable(False)> _
			Public ReadOnly Property Count() As Integer
				Get
					Return Me.Rows.Count
				End Get
			End Property

			Friend ReadOnly Property IDColumn() As DataColumn
				Get
					Return Me.columnID
				End Get
			End Property

			Friend ReadOnly Property lossesColumn() As DataColumn
				Get
					Return Me.columnlosses
				End Get
			End Property

			Friend ReadOnly Property SchoolColumn() As DataColumn
				Get
					Return Me.columnSchool
				End Get
			End Property

			Friend ReadOnly Property SportColumn() As DataColumn
				Get
					Return Me.columnSport
				End Get
			End Property

			Friend ReadOnly Property tiesColumn() As DataColumn
				Get
					Return Me.columnties
				End Get
			End Property

			Friend ReadOnly Property winsColumn() As DataColumn
				Get
					Return Me.columnwins
				End Get
			End Property

			Friend ReadOnly Property yearColumn() As DataColumn
				Get
					Return Me.columnyear
				End Get
			End Property

			Public ReadOnly Default Property Item(ByVal index As Integer) As StatisticsRow
				Get
					Return (CType(Me.Rows(index), StatisticsRow))
				End Get
			End Property

			Public Event StatisticsRowChanged As StatisticsRowChangeEventHandler

			Public Event StatisticsRowChanging As StatisticsRowChangeEventHandler

			Public Event StatisticsRowDeleted As StatisticsRowChangeEventHandler

			Public Event StatisticsRowDeleting As StatisticsRowChangeEventHandler

			Public Sub AddStatisticsRow(ByVal row As StatisticsRow)
				Me.Rows.Add(row)
			End Sub

			Public Function AddStatisticsRow(ByVal losses As Integer, ByVal School As String, ByVal Sport As String, ByVal ties As Integer, ByVal wins As Integer, ByVal year As Integer) As StatisticsRow
				Dim rowStatisticsRow As StatisticsRow = (CType(Me.NewRow(), StatisticsRow))
				rowStatisticsRow.ItemArray = New Object() { Nothing, losses, School, Sport, ties, wins, year}
				Me.Rows.Add(rowStatisticsRow)
				Return rowStatisticsRow
			End Function

			Public Function FindByID(ByVal ID As Integer) As StatisticsRow
				Return (CType(Me.Rows.Find(New Object() { ID}), StatisticsRow))
			End Function

			Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
				Return Me.Rows.GetEnumerator()
			End Function

			Public Overrides Function Clone() As DataTable
				Dim cln As StatisticsDataTable = (CType(MyBase.Clone(), StatisticsDataTable))
				cln.InitVars()
				Return cln
			End Function

			Protected Overrides Function CreateInstance() As DataTable
				Return New StatisticsDataTable()
			End Function

			Friend Sub InitVars()
				Me.columnID = Me.Columns("ID")
				Me.columnlosses = Me.Columns("losses")
				Me.columnSchool = Me.Columns("School")
				Me.columnSport = Me.Columns("Sport")
				Me.columnties = Me.Columns("ties")
				Me.columnwins = Me.Columns("wins")
				Me.columnyear = Me.Columns("year")
			End Sub

			Private Sub InitClass()
				Me.columnID = New DataColumn("ID", GetType(Integer), Nothing, System.Data.MappingType.Element)
				Me.Columns.Add(Me.columnID)
				Me.columnlosses = New DataColumn("losses", GetType(Integer), Nothing, System.Data.MappingType.Element)
				Me.Columns.Add(Me.columnlosses)
				Me.columnSchool = New DataColumn("School", GetType(String), Nothing, System.Data.MappingType.Element)
				Me.Columns.Add(Me.columnSchool)
				Me.columnSport = New DataColumn("Sport", GetType(String), Nothing, System.Data.MappingType.Element)
				Me.Columns.Add(Me.columnSport)
				Me.columnties = New DataColumn("ties", GetType(Integer), Nothing, System.Data.MappingType.Element)
				Me.Columns.Add(Me.columnties)
				Me.columnwins = New DataColumn("wins", GetType(Integer), Nothing, System.Data.MappingType.Element)
				Me.Columns.Add(Me.columnwins)
				Me.columnyear = New DataColumn("year", GetType(Integer), Nothing, System.Data.MappingType.Element)
				Me.Columns.Add(Me.columnyear)
				Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() { Me.columnID}, True))
				Me.columnID.AutoIncrement = True
				Me.columnID.AllowDBNull = False
				Me.columnID.Unique = True
			End Sub

			Public Function NewStatisticsRow() As StatisticsRow
				Return (CType(Me.NewRow(), StatisticsRow))
			End Function

			Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
				Return New StatisticsRow(builder)
			End Function

			Protected Overrides Function GetRowType() As System.Type
				Return GetType(StatisticsRow)
			End Function

			Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
				MyBase.OnRowChanged(e)
				If (Not Me.StatisticsRowChangedEvent Is Nothing) Then
					RaiseEvent StatisticsRowChanged(Me, New StatisticsRowChangeEvent((CType(e.Row, StatisticsRow)), e.Action))
				End If
			End Sub

			Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
				MyBase.OnRowChanging(e)
				If (Not Me.StatisticsRowChangingEvent Is Nothing) Then
					RaiseEvent StatisticsRowChanging(Me, New StatisticsRowChangeEvent((CType(e.Row, StatisticsRow)), e.Action))
				End If
			End Sub

			Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
				MyBase.OnRowDeleted(e)
				If (Not Me.StatisticsRowDeletedEvent Is Nothing) Then
					RaiseEvent StatisticsRowDeleted(Me, New StatisticsRowChangeEvent((CType(e.Row, StatisticsRow)), e.Action))
				End If
			End Sub

			Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
				MyBase.OnRowDeleting(e)
				If (Not Me.StatisticsRowDeletingEvent Is Nothing) Then
					RaiseEvent StatisticsRowDeleting(Me, New StatisticsRowChangeEvent((CType(e.Row, StatisticsRow)), e.Action))
				End If
			End Sub

			Public Sub RemoveStatisticsRow(ByVal row As StatisticsRow)
				Me.Rows.Remove(row)
			End Sub
		End Class

		<System.Diagnostics.DebuggerStepThrough()> _
		Public Class StatisticsRow : Inherits DataRow

			Private tableStatistics As StatisticsDataTable

			Friend Sub New(ByVal rb As DataRowBuilder)
				MyBase.New(rb)
				Me.tableStatistics = (CType(Me.Table, StatisticsDataTable))
			End Sub

			Public Property ID() As Integer
				Get
					Return (CInt(Me(Me.tableStatistics.IDColumn)))
				End Get
				Set
					Me(Me.tableStatistics.IDColumn) = Value
				End Set
			End Property

			Public Property losses() As Integer
				Get
					Try
						Return (CInt(Me(Me.tableStatistics.lossesColumn)))
					Catch e As InvalidCastException
						Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableStatistics.lossesColumn) = Value
				End Set
			End Property

			Public Property School() As String
				Get
					Try
						Return (CStr(Me(Me.tableStatistics.SchoolColumn)))
					Catch e As InvalidCastException
						Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableStatistics.SchoolColumn) = Value
				End Set
			End Property

			Public Property Sport() As String
				Get
					Try
						Return (CStr(Me(Me.tableStatistics.SportColumn)))
					Catch e As InvalidCastException
						Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableStatistics.SportColumn) = Value
				End Set
			End Property

			Public Property ties() As Integer
				Get
					Try
						Return (CInt(Me(Me.tableStatistics.tiesColumn)))
					Catch e As InvalidCastException
						Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableStatistics.tiesColumn) = Value
				End Set
			End Property

			Public Property wins() As Integer
				Get
					Try
						Return (CInt(Me(Me.tableStatistics.winsColumn)))
					Catch e As InvalidCastException
						Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableStatistics.winsColumn) = Value
				End Set
			End Property

			Public Property year() As Integer
				Get
					Try
						Return (CInt(Me(Me.tableStatistics.yearColumn)))
					Catch e As InvalidCastException
						Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableStatistics.yearColumn) = Value
				End Set
			End Property

			Public Function IslossesNull() As Boolean
				Return Me.IsNull(Me.tableStatistics.lossesColumn)
			End Function

			Public Sub SetlossesNull()
				Me(Me.tableStatistics.lossesColumn) = System.Convert.DBNull
			End Sub

			Public Function IsSchoolNull() As Boolean
				Return Me.IsNull(Me.tableStatistics.SchoolColumn)
			End Function

			Public Sub SetSchoolNull()
				Me(Me.tableStatistics.SchoolColumn) = System.Convert.DBNull
			End Sub

			Public Function IsSportNull() As Boolean
				Return Me.IsNull(Me.tableStatistics.SportColumn)
			End Function

			Public Sub SetSportNull()
				Me(Me.tableStatistics.SportColumn) = System.Convert.DBNull
			End Sub

			Public Function IstiesNull() As Boolean
				Return Me.IsNull(Me.tableStatistics.tiesColumn)
			End Function

			Public Sub SettiesNull()
				Me(Me.tableStatistics.tiesColumn) = System.Convert.DBNull
			End Sub

			Public Function IswinsNull() As Boolean
				Return Me.IsNull(Me.tableStatistics.winsColumn)
			End Function

			Public Sub SetwinsNull()
				Me(Me.tableStatistics.winsColumn) = System.Convert.DBNull
			End Sub

			Public Function IsyearNull() As Boolean
				Return Me.IsNull(Me.tableStatistics.yearColumn)
			End Function

			Public Sub SetyearNull()
				Me(Me.tableStatistics.yearColumn) = System.Convert.DBNull
			End Sub
		End Class

		<System.Diagnostics.DebuggerStepThrough()> _
		Public Class StatisticsRowChangeEvent : Inherits EventArgs

			Private eventRow As StatisticsRow

			Private eventAction As DataRowAction

'INSTANT VB NOTE: The parameter row was renamed since Visual Basic will not uniquely identify class members when parameters have the same name:
'INSTANT VB NOTE: The parameter action was renamed since Visual Basic will not uniquely identify class members when parameters have the same name:
			Public Sub New(ByVal row_Renamed As StatisticsRow, ByVal action_Renamed As DataRowAction)
				Me.eventRow = row_Renamed
				Me.eventAction = action_Renamed
			End Sub

			Public ReadOnly Property Row() As StatisticsRow
				Get
					Return Me.eventRow
				End Get
			End Property

			Public ReadOnly Property Action() As DataRowAction
				Get
					Return Me.eventAction
				End Get
			End Property
		End Class
	End Class
End Namespace
