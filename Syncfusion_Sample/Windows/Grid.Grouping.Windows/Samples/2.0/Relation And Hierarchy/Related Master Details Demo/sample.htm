<html><h1>Related Master Details Demo</h1>

<p><p>This sample demonstrates the manual specifications of the master-detail relations between three separate tables that have primary-key and foreign-key columns in common. </p></p>

<p><p><h2>Features:</h2></p></p>

<p><p>You can manually specify relations in the grouping engine. The 
data set does not need to have any data relations. This is the same approach that should be used if you want to set 
up relationships between independent <strong>IList </strong>collections.
</p></p>

<p>This is how the sample looks.</p>

<p><p align=center><img src="images/sample.png" alt="ManualRelations" title="ManualRelations" /></p>

<p>The following code shows registering the <strong>DataTable/IList</strong> with the <strong>SourceListSet</strong> so that the 
<strong>RelationDescriptor</strong> can resolve the name.</p>

<p><font color="#8D2E1C"><pre>
    		this.gridGroupingControl1.Engine.SourceListSet.Add("MyParentTable",parentTable);
    		this.gridGroupingControl1.Engine.SourceListSet.Add("MyChildTable",childTable);
    		this.gridGroupingControl1.Engine.SourceListSet.Add("MyGrandChildTable", grandChildTable);  </pre></font></p>

<p>The  following code illustrates how to manually specify a relation without using the 
data set.</p>

<p><font color="#8D2E1C"><pre>
    		GridRelationDescriptor parentToChildRelationDescriptor = new GridRelationDescriptor();
    		parentToChildRelationDescriptor.ChildTableName = "MyChildTable";    // should be same as SourceListSetEntry.Name. 
    		parentToChildRelationDescriptor.RelationKind = RelationKind.RelatedMasterDetails;
    		parentToChildRelationDescriptor.RelationKeys.Add("parentID", "ParentID");</p>

<p><font color="#8D2E1C"><pre>
    		// Adding the above relation to ParentTable.
    		gridGroupingControl1.TableDescriptor.Relations.Add(parentToChildRelationDescriptor);  </pre></font></pre></font></p>

<p><p>The code below illustrates subscribing to <strong>CurrentCellActivatingEvent</strong> in order to select the entire row. In this event, the current cell is moved to
<strong>colindex()</strong> so the rest of the cells in the row are selected irrespective of the cell that is clicked.</p>
<p><br />
<font color="#8D2E1C"><pre>
    		private void gridGroupingControl1_TableControlCurrentCellActivating
    		(object sender, Syncfusion.Windows.Forms.Grid.Grouping.GridTableControlCurrentCellActivatingEventArgs e)
    		{
    			GridTableCellStyleInfo style = e.TableControl.Model[e.Inner.RowIndex, e.Inner.ColIndex];
    			if (style.TableCellIdentity.TableCellType == GridTableCellType.NestedTableCell)
    			{
                				 Console.WriteLine("NestedTable");
    				return;
    			}
    			 else
    				e.Inner.ColIndex = 0;
    		}  </pre></font></p>
</html>