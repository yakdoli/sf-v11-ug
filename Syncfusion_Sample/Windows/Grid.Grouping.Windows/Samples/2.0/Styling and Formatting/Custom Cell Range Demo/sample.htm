<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML>
<HEAD>
	<META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset=windows-1252">
	<TITLE></TITLE>
	<META NAME="GENERATOR" CONTENT="OpenOffice.org 2.3  (Win32)">
	<META NAME="CREATED" CONTENT="0;0">
	<META NAME="CHANGED" CONTENT="20090103;3264840">
	<STYLE TYPE="text/css">
	<!--
		@page { size: 8.5in 11in }
	-->
	</STYLE>
</HEAD>
<BODY LANG="en-US" DIR="LTR">
<H1>Custom Cell Range Demo</H1>
<P>This sample demonstrates covered ranges, bannered ranges, and
drawing background images.</P>
<P><FONT SIZE=4><B>Features:</B></FONT></P>
<UL>
	<LI><P><FONT SIZE=3><B>Covered Range:</B></FONT></P>
	<UL>
		<LI><P>Covered ranges are cells that span multiple columns and rows.</P>
		<LI><P>Bannered ranges are cells that let you span only the background
		of a single cell across multiple columns and rows.</P>
		<LI><P>This sample also demonstrates the customization of a grid appearance
		through events at run time.</P>
		<LI><P>Customize the drawing of a cell's background at run-time with
		the <STRONG>TableControlDrawCellBackground</STRONG> event.</P>
		<LI><P>Customize style information of individual cells at run time
		with the <STRONG>TableControlPrepareViewStyleInfo</STRONG> event.</P>
		<LI><P>Covered ranges can be specified at run time by subscribing
		to the <STRONG>QueryCoveredRange</STRONG> event.</P>
		<LI><P>This event is raised for each cell when the grid renders the
		current visible cells.</P>
		<LI><P>In this event, you can allocate the number of rows and
		columns that a covered range should span.</P>
		<LI><P>Check whether the queried row is a record and if it has a
		parent group.</P>
		<LI><P>Also check to see if the column of the cell is a picture. In
		which case, you can get the number of rows in the group and return a
		range covering all rows in the column.</P>
	</UL>
</UL>
<P ALIGN=CENTER><img src="images/sample.png" NAME="graphics1" ALT="CustomCellRanges screenshot" ALIGN=BOTTOM  BORDER=0></P>
<UL>
	<LI><P><B>Bannered Range:</B></P>
	<UL>
		<LI><P>Bannered ranges can be specified at run time by subscribing
		to the <STRONG>QueryBanneredRange</STRONG> event.</P>
		<LI><P>This event is raised for each cell when the grid renders
		current visible cells.</P>
		<LI><P>In this event, you can allocate the number of rows and
		columns that a bannered range should span.</P>
		<LI><P>In the method given below, you can check whether the queried
		row is a record and  has a parent group.</P>
		<LI><P>Also check whether the column of the cell is <STRONG>ProductName</STRONG>,
		in which case, you can get the number of rows in the group and
		return a range that covers all rows in the column.</P>
		<LI><P>This example also demonstrates customizing the drawing of
		individual cells and drawing your own background image.</P>
		<LI><P>An event is called before the cell text and borders are drawn, allowing you to render a bitmap behind multiple cells.</P>
		<LI><P>Using the<STRONG>
		TableControlDrawCellBackground</STRONG> event handler, get the
		image value from the first record in the group and draw to the
		specified cell area.</P>
		<LI><P>This example also demonstrates the easy adjustment of style
		settings for individual cells at run time.</P>
		<LI><P>This event is called for each cell before the cell is drawn.</P>
		<LI><P>In the event handler, get the first record of the group and
		retrieve the category name.</P>
		<LI><P>The name is then assigned to the cell value of the indent cell, 
		and also, the font, color, and other style settings for this call will 
		change.</P>
	</UL>
</UL>
<PRE><FONT COLOR="#8d2e1c">                </FONT>
<FONT COLOR="#8d2e1c">                private void TableModel_QueryCoveredRange(object sender, GridQueryCoveredRangeEventArgs e)</FONT>
<FONT COLOR="#8d2e1c">                {</FONT>
<FONT COLOR="#8d2e1c">                        GridTableModel model = (GridTableModel) sender;</FONT>
<FONT COLOR="#8d2e1c">                        GridTable table = model.Table;</FONT>
<FONT COLOR="#8d2e1c">                        if (e.RowIndex &lt; table.DisplayElements.Count)</FONT>
<FONT COLOR="#8d2e1c">                        {</FONT>
<FONT COLOR="#8d2e1c">                                // Get the element displayed at the row.</FONT>
<FONT COLOR="#8d2e1c">                                Element el = table.DisplayElements[e.RowIndex];</FONT>

<FONT COLOR="#8d2e1c">                                // Check if element is a record (could also be a column header or group caption ...).</FONT>
<FONT COLOR="#8d2e1c">                                if (Element.IsRecord(el) &amp;&amp; el.ParentGroup != null)</FONT>
<FONT COLOR="#8d2e1c">                                {</FONT>
<FONT COLOR="#8d2e1c">                                        GridTableCellStyleInfo style = model[e.RowIndex, e.ColIndex];</FONT>
<FONT COLOR="#8d2e1c">                                        GridTableCellStyleInfoIdentity id = style.TableCellIdentity;</FONT>

<FONT COLOR="#8d2e1c">                </FONT>
<FONT COLOR="#8d2e1c">                                        // The cell identity contains column information. We check if the column is ProductName.</FONT>
<FONT COLOR="#8d2e1c">                                        if (id.Column != null &amp;&amp; id.Column.MappingName == Categories_Picture)</FONT>
<FONT COLOR="#8d2e1c">                                        {</FONT>
<FONT COLOR="#8d2e1c">                                                Group group = el.ParentGroup;</FONT>

<FONT COLOR="#8d2e1c">                                                // Grouped by Categories_CategoryName? - Do not cover cells if not grouped by Category...</FONT>
<FONT COLOR="#8d2e1c">                                                if (group != null &amp;&amp; group.CategoryColumns.Count &gt; 0 &amp;&amp; group.CategoryColumns[0].Name == Categories_CategoryName)</FONT>
<FONT COLOR="#8d2e1c">                                                {</FONT>
<FONT COLOR="#8d2e1c">                                                        int tablePos = table.DisplayElements.IndexOf(group);</FONT>
<FONT COLOR="#8d2e1c">                                                        int firstRow = tablePos+1;</FONT>
<FONT COLOR="#8d2e1c">                                                        int lastRow = tablePos+group.GetVisibleCount()-1;</FONT>
<FONT COLOR="#8d2e1c">                                                        e.Range = GridRangeInfo.Cells(firstRow, e.ColIndex, lastRow,  e.ColIndex);</FONT>
<FONT COLOR="#8d2e1c">                                                                e.Handled = true;</FONT>
<FONT COLOR="#8d2e1c">                                                }</FONT>
<FONT COLOR="#8d2e1c">                                         }</FONT>
<FONT COLOR="#8d2e1c">                                 }</FONT>
<FONT COLOR="#8d2e1c">                         }</FONT>
<FONT COLOR="#8d2e1c">                 }  </FONT></PRE><P>
The cell contents are rendered in the <STRONG>TableControlCellDrawn</STRONG>
event, which is omitted here. You can check the code in the example. 
</P>
<P>Bannered ranges can be specified at run time by subscribing to the
<STRONG>QueryBanneredRange</STRONG> event. This event is raised for
each cell at the time when the grid renders the current visible
cells. In this event you can allocate the number of rows and columns
that a bannered range should span. In the method given below, you can
check whether the queried row is a record and if it has a parent
group.&nbsp; You can also check whether the column of the cell is
<STRONG>ProductName</STRONG>. In that case, you can get the number of
rows in the group and return a range that covers all the rows in the
column.</P>
<P><BR><BR>
</P>
<PRE><FONT COLOR="#8d2e1c">                private void TableModel_QueryBanneredRange(object sender, GridQueryBanneredRangeEventArgs e)</FONT>
<FONT COLOR="#8d2e1c">                {</FONT>
<FONT COLOR="#8d2e1c">                        GridTableModel model = (GridTableModel) sender;</FONT>
<FONT COLOR="#8d2e1c">                        GridTable table = model.Table;</FONT>

<FONT COLOR="#8d2e1c">                        // Get the element displayed at the row.</FONT>
<FONT COLOR="#8d2e1c">                        Element el = table.DisplayElements[e.RowIndex];</FONT>

<FONT COLOR="#8d2e1c">                        // Check if element is a record (could also be a column header or group caption ...).</FONT>
<FONT COLOR="#8d2e1c">                        if (Element.IsRecord(el) &amp;&amp; el.ParentGroup != null)</FONT>
<FONT COLOR="#8d2e1c">                        {</FONT>
<FONT COLOR="#8d2e1c">                                GridTableCellStyleInfo style = model[e.RowIndex, e.ColIndex];</FONT>
<FONT COLOR="#8d2e1c">                                GridTableCellStyleInfoIdentity id = style.TableCellIdentity;</FONT>

<FONT COLOR="#8d2e1c">                                // The cell identity contains column information. We check if the column is ProductName.</FONT>
<FONT COLOR="#8d2e1c">                                if (id.Column != null &amp;&amp; id.Column.MappingName == &quot;ProductName&quot;)</FONT>
<FONT COLOR="#8d2e1c">                                {</FONT>
<FONT COLOR="#8d2e1c">                                        Group group = el.ParentGroup;</FONT>

<FONT COLOR="#8d2e1c">                                        // Now we get the number of rows in the group and return a range that covers all rows in the column.</FONT>
<FONT COLOR="#8d2e1c">                                                if (group != null &amp;&amp; group.CategoryColumns.Count &gt; 0 &amp;&amp; group.CategoryColumns[0].Name == Categories_CategoryName)</FONT>
<FONT COLOR="#8d2e1c">                                        {</FONT>
<FONT COLOR="#8d2e1c">                                                int tablePos = table.DisplayElements.IndexOf(group);</FONT>
<FONT COLOR="#8d2e1c">                                                int firstRow = tablePos+1;</FONT>
<FONT COLOR="#8d2e1c">                                                int lastRow = tablePos+group.GetVisibleCount()-1;</FONT>
<FONT COLOR="#8d2e1c">                                                e.Range = GridRangeInfo.Cells(firstRow, e.ColIndex, lastRow,  e.ColIndex);</FONT>
<FONT COLOR="#8d2e1c">                                                e.Handled = true;</FONT>
<FONT COLOR="#8d2e1c">                                         }</FONT>
<FONT COLOR="#8d2e1c">                                 }</FONT>
<FONT COLOR="#8d2e1c">                         }</FONT>
<FONT COLOR="#8d2e1c">                 }  </FONT></PRE><P>
This example also shows you how to customize the drawing of
individual cells and how to draw your own background image. The event
is called before the cell text and borders are drawn. This allows you
to render a bitmap behind multiple cells. 
</P>
<P>In the <STRONG>TableControlDrawCellBackground</STRONG> event
handler, you can get the image value from the first record in the
group and draw it to the specified cell area.</P>
<P><BR><BR>
</P>
<PRE><FONT COLOR="#8d2e1c">                private void gridGroupingControl1_TableControlDrawCellBackground(object sender, GridTableControlDrawCellBackgroundEventArgs e)</FONT>
<FONT COLOR="#8d2e1c">                {</FONT>
<FONT COLOR="#8d2e1c">                        GridTableCellStyleInfo style = (GridTableCellStyleInfo) e.Inner.Style;</FONT>
<FONT COLOR="#8d2e1c">                        GridTableCellStyleInfoIdentity id = style.TableCellIdentity;</FONT>

<FONT COLOR="#8d2e1c">                        // Categories_Picture column.</FONT>
<FONT COLOR="#8d2e1c">                        if (id.Column != null &amp;&amp; id.Column.MappingName == &quot;ProductName&quot;)</FONT>
<FONT COLOR="#8d2e1c">                        {</FONT>
<FONT COLOR="#8d2e1c">                                Group group = id.DisplayElement.ParentGroup;</FONT>

<FONT COLOR="#8d2e1c">                                // Grouped by Categories_CategoryName? - Do not draw if not grouped by Category...      </FONT>
<FONT COLOR="#8d2e1c">                                if (group != null &amp;&amp; group.CategoryColumns.Count &gt; 0 &amp;&amp; group.CategoryColumns[0].Name == Categories_CategoryName)</FONT>
<FONT COLOR="#8d2e1c">                                {</FONT>
<FONT COLOR="#8d2e1c">                                        if (group.Records.Count &gt; 0)</FONT>
<FONT COLOR="#8d2e1c">                                        {</FONT>
<FONT COLOR="#8d2e1c">                                                // Get image from first Picture column in first record of the group</FONT>
<FONT COLOR="#8d2e1c">                                                Record r = group.Records[0];</FONT>
<FONT COLOR="#8d2e1c">                                                object value = r.GetValue(Categories_Picture);</FONT>

<FONT COLOR="#8d2e1c">                                                </FONT>
<FONT COLOR="#8d2e1c">                                                // Should be byte[] (image stream ...).</FONT>
<FONT COLOR="#8d2e1c">                                                byte[] byteStream = value as byte[];</FONT>
<FONT COLOR="#8d2e1c">                                                if (byteStream != null)</FONT>
<FONT COLOR="#8d2e1c">                                                {</FONT>
<FONT COLOR="#8d2e1c">                                                        Graphics graphics = e.Inner.Graphics;</FONT>
<FONT COLOR="#8d2e1c">                                                        Rectangle bounds = e.Inner.TargetBounds;</FONT>
<FONT COLOR="#8d2e1c">                                                        bounds = GridMargins.RemoveMargins(bounds, style.TextMargins.ToMargins());</FONT>
<FONT COLOR="#8d2e1c">                                                        bounds = GridMargins.RemoveMargins(bounds, style.BorderMargins.ToMargins());</FONT>
<FONT COLOR="#8d2e1c">                                                        // Convert byte stream to image and draw it.</FONT>
<FONT COLOR="#8d2e1c">                                                        Image image = GridImageUtil.ConvertToImage(byteStream);</FONT>
<FONT COLOR="#8d2e1c">                                                        DrawBackgroundImage(graphics, image, bounds);</FONT>
<FONT COLOR="#8d2e1c">                                                        e.Inner.Cancel = true; // signals you did your own drawing</FONT>
<FONT COLOR="#8d2e1c">                                                 }</FONT>
<FONT COLOR="#8d2e1c">                                          }</FONT>
<FONT COLOR="#8d2e1c">                                  }</FONT>
<FONT COLOR="#8d2e1c">                           }</FONT>
<FONT COLOR="#8d2e1c">                    }  </FONT></PRE><P>
This example also demonstrates how you can easily adjust the style
settings for individual cells at run time. If you look at the
screenshot for the example, you will notice that the category name
that is displayed is rotated vertically in the indent area of the
group. This is achieved by handling the <STRONG>TableControlPrepareViewStyle</STRONG>
event. 
</P>
<P>The event is called for each cell before the cell is drawn. In the
event handler, you can get the first record of the group and retrieve
the category name. The name is then assigned to the cell value of the
indent cell, and also, the font, color, and other style settings are
changed for this cell.</P>
<P><BR><BR>
</P>
<PRE><FONT COLOR="#8d2e1c">                private void gridGroupingControl1_TableControlPrepareViewStyleInfo(object sender, GridTableControlPrepareViewStyleInfoEventArgs e)</FONT>
<FONT COLOR="#8d2e1c">                {</FONT>
<FONT COLOR="#8d2e1c">                        GridTableCellStyleInfo style = (GridTableCellStyleInfo) e.Inner.Style;</FONT>
<FONT COLOR="#8d2e1c">                        GridTableCellStyleInfoIdentity id = style.TableCellIdentity;</FONT>

<FONT COLOR="#8d2e1c">                </FONT>
<FONT COLOR="#8d2e1c">                        // Cell identity contains information about the cell (element, column etc.,).</FONT>
<FONT COLOR="#8d2e1c">                        // Check if this is a indent cell.</FONT>
<FONT COLOR="#8d2e1c">                        if (id.TableCellType == GridTableCellType.GroupIndentCell)</FONT>
<FONT COLOR="#8d2e1c">                        {</FONT>
<FONT COLOR="#8d2e1c">                                Group group = id.DisplayElement.ParentGroup;</FONT>

<FONT COLOR="#8d2e1c">                                // Check if this is the indent of a Categories_CategoryName group.</FONT>
<FONT COLOR="#8d2e1c">                                if (group != null &amp;&amp; group.CategoryColumns.Count &gt; 0 &amp;&amp; group.CategoryColumns[0].Name == Categories_CategoryName)</FONT>
<FONT COLOR="#8d2e1c">                                {</FONT>
<FONT COLOR="#8d2e1c">                                        // And if the group is not empty ...</FONT>
<FONT COLOR="#8d2e1c">                                        if (group.Records.Count &gt; 0)</FONT>
<FONT COLOR="#8d2e1c">                                        {</FONT>
<FONT COLOR="#8d2e1c">                                                // Get the category name from the first record.</FONT>
<FONT COLOR="#8d2e1c">                                                Record r = group.Records[0];</FONT>
<FONT COLOR="#8d2e1c">                                                object value = r.GetValue(Categories_CategoryName)</FONT>

<FONT COLOR="#8d2e1c">                                                // Should be a string.</FONT>
<FONT COLOR="#8d2e1c">                                                string categoryName = value as string;</FONT>

<FONT COLOR="#8d2e1c">                                                // Assign the name to the 'CellValue' of the Indent cell and also adjust the font, color and other style settings.</FONT>
<FONT COLOR="#8d2e1c">                                                if (categoryName != null)</FONT>
<FONT COLOR="#8d2e1c">                                                {</FONT>
<FONT COLOR="#8d2e1c">                                                        style.Interior = new BrushInfo(GradientStyle.Vertical, Color.FromArgb( 219, 226, 242 ), Color.FromArgb( 255, 187, 111 ));</FONT>
<FONT COLOR="#8d2e1c">                                                        style.CellValue = categoryName;</FONT>
<FONT COLOR="#8d2e1c">                                                        style.CellType = &quot;Static&quot;;</FONT>
<FONT COLOR="#8d2e1c">                                                        style.HorizontalAlignment = GridHorizontalAlignment.Center;</FONT>
<FONT COLOR="#8d2e1c">                                                        style.VerticalAlignment = GridVerticalAlignment.Middle;</FONT>
<FONT COLOR="#8d2e1c">                                                        style.Trimming = StringTrimming.EllipsisCharacter;</FONT>
<FONT COLOR="#8d2e1c">                                                        style.Font.Bold = true;</FONT>
<FONT COLOR="#8d2e1c">                                                        style.Font.Italic = true;</FONT>
<FONT COLOR="#8d2e1c">                                                        style.Font.Orientation = 270;</FONT>
<FONT COLOR="#8d2e1c">                                                 }</FONT>
<FONT COLOR="#8d2e1c">                                          }</FONT>
<FONT COLOR="#8d2e1c">                                  }</FONT>
<FONT COLOR="#8d2e1c">                          }</FONT>
<FONT COLOR="#8d2e1c">                  }  </FONT></PRE>
</BODY>
</HTML>