
<HTML>
<HEAD>
	<META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset=windows-1252">
	<TITLE></TITLE>
	<META NAME="GENERATOR" CONTENT="OpenOffice.org 2.3  (Win32)">
	<META NAME="CREATED" CONTENT="0;0">
	<META NAME="CHANGED" CONTENT="20090103;2354203">
	<STYLE TYPE="text/css">
	<!--
		@page { size: 8.5in 11in }
	-->
	</STYLE>
</HEAD>
<BODY LANG="en-US" DIR="LTR">
<H1>Sort by Summary Demo</H1>
<P>This samples demonstrates how to sort groups by the value of a
summary. 
</P>
<P ALIGN=CENTER><img src="images/sample.png" NAME="graphics1" ALT="SortBySummaryInCaption" ALIGN=BOTTOM  BORDER=0></P>
<P ALIGN=CENTER><BR><BR>
</P>
<h3><FONT SIZE=4><B>Features:</B></FONT></h3>
<UL>
	<LI><P>Showing summaries in group caption cells</P>
	<LI><P>Sorting by caption summaries</P>
</UL>
<BR>
<P><FONT SIZE=4><B>Implementation</B></FONT></P>
<UL>
<LI><P>This code declares the <STRONG>SummaryRowDescriptor</STRONG> and sets its 
properties.</P>
<PRE><FONT COLOR="#8d2e1c">                GridSummaryRowDescriptor summaryRow1 = new GridSummaryRowDescriptor();</FONT>
<FONT COLOR="#8d2e1c">                summaryRow1.Name = &quot;Caption&quot;;</FONT>
<FONT COLOR="#8d2e1c">                summaryRow1.Visible = false;  </FONT></PRE><P>
<LI>Adding <STRONG>SummaryCoulmnDescriptor</STRONG> to <STRONG>SummaryRowDescritpor</STRONG>:</P>
<PRE STYLE="margin-bottom: 0.2in"><FONT COLOR="#8d2e1c">                summaryRow1.SummaryColumns.Add(summaryColumn1);  </FONT></PRE><P>
<LI>Defining the<STRONG> SummaryRow</STRONG> that should be used to display the 
summaries in the caption bar:</P>
<PRE><FONT COLOR="#8d2e1c">                GridTableDescriptor ordersDescriptor = this.gridGroupingControl1.TableDescriptor;</FONT>
<FONT COLOR="#8d2e1c">                ordersDescriptor.ChildGroupOptions.ShowCaptionSummaryCells = true;</FONT>
<FONT COLOR="#8d2e1c">                ordersDescriptor.ChildGroupOptions.CaptionSummaryRow = &quot;Caption&quot;;</FONT>

<FONT COLOR="#8d2e1c">                // Let's see you hide / show the second row in childgroups.</FONT>
<FONT COLOR="#8d2e1c">                ordersDescriptor.ChildGroupOptions.ShowSummaries = false;  </FONT></PRE><P>
<LI>Setting properties for the <STRONG>GroupCaptionCell</STRONG>:</P>
<PRE><FONT COLOR="#8d2e1c">                this.gridGroupingControl1.Appearance.GroupCaptionCell.BackColor = this.gridGroupingControl1.Appearance.RecordFieldCell.BackColor;</FONT>
<FONT COLOR="#8d2e1c">                this.gridGroupingControl1.Appearance.GroupCaptionCell.Borders.Top = new GridBorder(GridBorderStyle.Standard);</FONT>
<FONT COLOR="#8d2e1c">                this.gridGroupingControl1.Appearance.GroupCaptionCell.CellType = &quot;Static&quot;;</FONT>
<FONT COLOR="#8d2e1c">                this.gridGroupingControl1.TableOptions.CaptionRowHeight = this.gridGroupingControl1.TableOptions.RecordRowHeight;  </FONT></PRE><P>
<LI>The following code must always be set to <EM>true</EM> since the
changing of one record can cause the whole group to move to a
different position.</P>
<P><BR><BR>
</P>
<PRE><FONT COLOR="#8d2e1c">                this.gridGroupingControl1.InvalidateAllWhenListChanged = true;</FONT>

<FONT COLOR="#8d2e1c">                // Specify the group sort order behaviour when adding SortColumnDescriptor to GroupedColumns.</FONT>
<FONT COLOR="#8d2e1c">                this.gridGroupingControl1.TableDescriptor.GroupedColumns.Clear();</FONT>
<FONT COLOR="#8d2e1c">                SortColumnDescriptor gsd = new SortColumnDescriptor(&quot;ShipCountry&quot;);</FONT>

<FONT COLOR="#8d2e1c">                // Code  to specify our own Comparer.</FONT>
<FONT COLOR="#8d2e1c">                gsd.GroupSortOrderComparer = new ShipViaComparer(summaryColumn1.GetSummaryDescriptorName(), &quot;Average&quot;);</FONT>
<FONT COLOR="#8d2e1c">                </FONT>
<FONT COLOR="#8d2e1c">                // or specify a summary name and the property (values will be determined using reflection)</FONT>
<FONT COLOR="#8d2e1c">                gsd.SetGroupSummarySortOrder(summaryColumn1.GetSummaryDescriptorName(), &quot;Average&quot;);</FONT>

<FONT COLOR="#8d2e1c">                this.gridGroupingControl1.TableDescriptor.GroupedColumns.Add(gsd);  </FONT></PRE><P>
<LI>Subscribe to the <STRONG>QueryCoveredRange</STRONG> event to set the covered 
range:</P>
<PRE><FONT COLOR="#8d2e1c">                private void TableModel_QueryCoveredRange(object sender, GridQueryCoveredRangeEventArgs e)</FONT>
<FONT COLOR="#8d2e1c">                {</FONT>
<FONT COLOR="#8d2e1c">                        GridTable thisTable = this.gridGroupingControl1.Table;</FONT>
<FONT COLOR="#8d2e1c">                        if (e.RowIndex &lt; thisTable.DisplayElements.Count)</FONT>
<FONT COLOR="#8d2e1c">                        {</FONT>
<FONT COLOR="#8d2e1c">                                Element el = thisTable.DisplayElements[e.RowIndex];</FONT>
<FONT COLOR="#8d2e1c">                                switch (el.Kind)</FONT>
<FONT COLOR="#8d2e1c">                                {</FONT>
<FONT COLOR="#8d2e1c">                                        case DisplayElementKind.Caption:</FONT>
<FONT COLOR="#8d2e1c">                                        {</FONT>
<FONT COLOR="#8d2e1c">                                                // Cover some cells of the caption bar (specified with captionCover).</FONT>
<FONT COLOR="#8d2e1c">                                                IGridGroupOptionsSource gs = el.ParentGroup as IGridGroupOptionsSource;</FONT>
<FONT COLOR="#8d2e1c">                                                if (gs != null &amp;&amp; gs.GroupOptions.ShowCaptionSummaryCells)</FONT>
<FONT COLOR="#8d2e1c">                                                {</FONT>
<FONT COLOR="#8d2e1c">                                                        int startCol = el.GroupLevel+1;</FONT>
<FONT COLOR="#8d2e1c">                                                        if (!gs.GroupOptions.ShowCaptionPlusMinus)</FONT>
<FONT COLOR="#8d2e1c">                                                startCol--;</FONT>
<FONT COLOR="#8d2e1c">                                                        if (e.ColIndex &gt;= startCol &amp;&amp; e.ColIndex &lt;= startCol+this.captionCoverCols)</FONT>
<FONT COLOR="#8d2e1c">                                                        {</FONT>
<FONT COLOR="#8d2e1c">                                                                e.Range = GridRangeInfo.Cells(e.RowIndex, startCol, e.RowIndex, startCol+this.captionCoverCols);</FONT>
<FONT COLOR="#8d2e1c">                                                                e.Handled = true;</FONT>
<FONT COLOR="#8d2e1c">                                                        }</FONT>
<FONT COLOR="#8d2e1c">                                                 }</FONT>
<FONT COLOR="#8d2e1c">                                                break;</FONT>
<FONT COLOR="#8d2e1c">                                         }</FONT>
<FONT COLOR="#8d2e1c">                                 }</FONT>
<FONT COLOR="#8d2e1c">                          }</FONT>
<FONT COLOR="#8d2e1c">                   }    </FONT></PRE><P>
<LI>Class to implement a comparer by inheriting the <STRONG>IComparer:</STRONG></P>
<PRE><FONT COLOR="#8d2e1c">                public class ShipViaComparer : IComparer</FONT>
<FONT COLOR="#8d2e1c">                {</FONT>
<FONT COLOR="#8d2e1c">                        string summaryDescriptorName;</FONT>
<FONT COLOR="#8d2e1c">                        string propertyName;</FONT>
<FONT COLOR="#8d2e1c">                        public ShipViaComparer(string summaryDescriptorName, string propertyName)</FONT>
<FONT COLOR="#8d2e1c">                        {</FONT>
<FONT COLOR="#8d2e1c">                                this.summaryDescriptorName = summaryDescriptorName;</FONT>
<FONT COLOR="#8d2e1c">                                this.propertyName = propertyName;</FONT>
<FONT COLOR="#8d2e1c">                        }</FONT>
<FONT COLOR="#8d2e1c">                        </FONT>
<FONT COLOR="#8d2e1c">                        #region IComparer Members</FONT>
<FONT COLOR="#8d2e1c">                        public int Compare(object x, object y)</FONT>
<FONT COLOR="#8d2e1c">                        {</FONT>
<FONT COLOR="#8d2e1c">                                Group gx = (Group) x;</FONT>
<FONT COLOR="#8d2e1c">                                Group gy = (Group) y;</FONT>
<FONT COLOR="#8d2e1c">                                bool strongTyped = false;</FONT>
<FONT COLOR="#8d2e1c">                                if (strongTyped)</FONT>
<FONT COLOR="#8d2e1c">                                {</FONT>
<FONT COLOR="#8d2e1c">                                        // strong typed   (propertyName is ignored ...)</FONT>
<FONT COLOR="#8d2e1c">                                        DoubleAggregateSummary dasx = (DoubleAggregateSummary) gx.GetSummary(summaryDescriptorName);</FONT>
<FONT COLOR="#8d2e1c">                                        DoubleAggregateSummary dasy = (DoubleAggregateSummary) gy.GetSummary(summaryDescriptorName);</FONT>
<FONT COLOR="#8d2e1c">                                        int v = dasx.Average.CompareTo(dasy.Average);</FONT>
<FONT COLOR="#8d2e1c">                                        // Console.WriteLine(&quot;Compare {0} to {1}: {2}&quot;, dasx.Average, dasy.Average, v);</FONT>
<FONT COLOR="#8d2e1c">                                        return v;</FONT>
<FONT COLOR="#8d2e1c">                                }</FONT>
<FONT COLOR="#8d2e1c">                                else </FONT>
<FONT COLOR="#8d2e1c">                                {</FONT>
<FONT COLOR="#8d2e1c">                                        // using reflection (slower but more flexible using propertyName) </FONT>
<FONT COLOR="#8d2e1c">                                        object vx = gx.GetSummaryProperty(summaryDescriptorName, propertyName);</FONT>
<FONT COLOR="#8d2e1c">                                        object vy = gy.GetSummaryProperty(summaryDescriptorName, propertyName);</FONT>
<FONT COLOR="#8d2e1c">                                        return ((IComparable) vx).CompareTo(vy);</FONT>
<FONT COLOR="#8d2e1c">                                }</FONT>
<FONT COLOR="#8d2e1c">                         }</FONT>
<FONT COLOR="#8d2e1c">                                #endregion</FONT>
<FONT COLOR="#8d2e1c">                   }  </FONT></PRE>
</UL>
<BR>
<h3><FONT SIZE=4><B>Interactive Features</B></FONT></h3>
<UL>
	<LI><P>This sample displays the summaries in group captions. Click the grouped column header to get the records sorted by the summary values.</P>
</UL>
</BODY>
</HTML>