#Region "Copyright Syncfusion Inc. 2001 - 2013"
' Copyright Syncfusion Inc. 2001 - 2013. All rights reserved.
' Use of this code is subject to the terms of our license.
' A copy of the current license can be obtained at any time by e-mailing
' licensing@syncfusion.com. Any infringement will be prosecuted under
' applicable laws. 
#End Region

'------------------------------------------------------------------------------
' <autogenerated>
'	 This code was generated by a tool.
'	 Runtime Version: 1.0.3705.0
'
'	 Changes to this file may cause incorrect behavior and will be lost if 
'	 the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

	Imports System
	Imports System.Data
	Imports System.Xml
	Imports System.Runtime.Serialization
Namespace DataBinding10_GGC


	<Serializable(), System.ComponentModel.DesignerCategoryAttribute("code"), System.Diagnostics.DebuggerStepThrough(), System.ComponentModel.ToolboxItem(True)> _
	Public Class Dataset1 : Inherits DataSet

		Private tableSuppliers As SuppliersDataTable

		Public Sub New()
			Me.InitClass()
			Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = New System.ComponentModel.CollectionChangeEventHandler(AddressOf Me.SchemaChanged)
			AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
			AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
		End Sub

		Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
			Dim strSchema As String = (CStr(info.GetValue("XmlSchema", GetType(String))))
			If (Not strSchema Is Nothing) Then
				Dim ds As DataSet = New DataSet()
				ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
				If (Not ds.Tables("Suppliers") Is Nothing) Then
					Me.Tables.Add(New SuppliersDataTable(ds.Tables("Suppliers")))
				End If
				Me.DataSetName = ds.DataSetName
				Me.Prefix = ds.Prefix
				Me.Namespace = ds.Namespace
				Me.Locale = ds.Locale
				Me.CaseSensitive = ds.CaseSensitive
				Me.EnforceConstraints = ds.EnforceConstraints
				Me.Merge(ds, False, System.Data.MissingSchemaAction.Add)
				Me.InitVars()
			Else
				Me.InitClass()
			End If
			Me.GetSerializationData(info, context)
			Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = New System.ComponentModel.CollectionChangeEventHandler(AddressOf Me.SchemaChanged)
			AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
			AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
		End Sub

		<System.ComponentModel.Browsable(False), System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)> _
		Public ReadOnly Property Suppliers() As SuppliersDataTable
			Get
				Return Me.tableSuppliers
			End Get
		End Property

		Public Overrides Function Clone() As DataSet
			Dim cln As Dataset1 = (CType(MyBase.Clone(), Dataset1))
			cln.InitVars()
			Return cln
		End Function

		Protected Overrides Function ShouldSerializeTables() As Boolean
			Return False
		End Function

		Protected Overrides Function ShouldSerializeRelations() As Boolean
			Return False
		End Function

		Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
			Me.Reset()
			Dim ds As DataSet = New DataSet()
			ds.ReadXml(reader)
			If (Not ds.Tables("Suppliers") Is Nothing) Then
				Me.Tables.Add(New SuppliersDataTable(ds.Tables("Suppliers")))
			End If
			Me.DataSetName = ds.DataSetName
			Me.Prefix = ds.Prefix
			Me.Namespace = ds.Namespace
			Me.Locale = ds.Locale
			Me.CaseSensitive = ds.CaseSensitive
			Me.EnforceConstraints = ds.EnforceConstraints
			Me.Merge(ds, False, System.Data.MissingSchemaAction.Add)
			Me.InitVars()
		End Sub

		Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
			Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream()
			Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
			stream.Position = 0
			Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
		End Function

		Friend Sub InitVars()
			Me.tableSuppliers = (CType(Me.Tables("Suppliers"), SuppliersDataTable))
			If (Not Me.tableSuppliers Is Nothing) Then
				Me.tableSuppliers.InitVars()
			End If
		End Sub

		Private Sub InitClass()
			Me.DataSetName = "Dataset1"
			Me.Prefix = ""
			Me.Namespace = "http://tempuri.org/Dataset1.xsd"
			Me.Locale = New System.Globalization.CultureInfo("en-US")
			Me.CaseSensitive = False
			Me.EnforceConstraints = True
			Me.tableSuppliers = New SuppliersDataTable()
			Me.Tables.Add(Me.tableSuppliers)
		End Sub

		Private Function ShouldSerializeSuppliers() As Boolean
			Return False
		End Function

		Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
			If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
				Me.InitVars()
			End If
		End Sub

		Public Delegate Sub SuppliersRowChangeEventHandler(ByVal sender As Object, ByVal e As SuppliersRowChangeEvent)

		<System.Diagnostics.DebuggerStepThrough()> _
		Public Class SuppliersDataTable : Inherits DataTable : Implements System.Collections.IEnumerable

			Private columnSupplierID As DataColumn

			Private columnCompanyName As DataColumn

			Private columnContactName As DataColumn

			Private columnContactTitle As DataColumn

			Private columnAddress As DataColumn

			Private columnCity As DataColumn

			Private columnRegion As DataColumn

			Private columnPostalCode As DataColumn

			Private columnCountry As DataColumn

			Private columnPhone As DataColumn

			Private columnFax As DataColumn

			Private columnHomePage As DataColumn

			Friend Sub New()
				MyBase.New("Suppliers")
				Me.InitClass()
			End Sub

			Friend Sub New(ByVal table As DataTable)
				MyBase.New(table.TableName)
				If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
					Me.CaseSensitive = table.CaseSensitive
				End If
				If (table.Locale.ToString() <> table.DataSet.Locale.ToString()) Then
					Me.Locale = table.Locale
				End If
				If (table.Namespace <> table.DataSet.Namespace) Then
					Me.Namespace = table.Namespace
				End If
				Me.Prefix = table.Prefix
				Me.MinimumCapacity = table.MinimumCapacity
				Me.DisplayExpression = table.DisplayExpression
			End Sub

			<System.ComponentModel.Browsable(False)> _
			Public ReadOnly Property Count() As Integer
				Get
					Return Me.Rows.Count
				End Get
			End Property

			Friend ReadOnly Property SupplierIDColumn() As DataColumn
				Get
					Return Me.columnSupplierID
				End Get
			End Property

			Friend ReadOnly Property CompanyNameColumn() As DataColumn
				Get
					Return Me.columnCompanyName
				End Get
			End Property

			Friend ReadOnly Property ContactNameColumn() As DataColumn
				Get
					Return Me.columnContactName
				End Get
			End Property

			Friend ReadOnly Property ContactTitleColumn() As DataColumn
				Get
					Return Me.columnContactTitle
				End Get
			End Property

			Friend ReadOnly Property AddressColumn() As DataColumn
				Get
					Return Me.columnAddress
				End Get
			End Property

			Friend ReadOnly Property CityColumn() As DataColumn
				Get
					Return Me.columnCity
				End Get
			End Property

			Friend ReadOnly Property RegionColumn() As DataColumn
				Get
					Return Me.columnRegion
				End Get
			End Property

			Friend ReadOnly Property PostalCodeColumn() As DataColumn
				Get
					Return Me.columnPostalCode
				End Get
			End Property

			Friend ReadOnly Property CountryColumn() As DataColumn
				Get
					Return Me.columnCountry
				End Get
			End Property

			Friend ReadOnly Property PhoneColumn() As DataColumn
				Get
					Return Me.columnPhone
				End Get
			End Property

			Friend ReadOnly Property FaxColumn() As DataColumn
				Get
					Return Me.columnFax
				End Get
			End Property

			Friend ReadOnly Property HomePageColumn() As DataColumn
				Get
					Return Me.columnHomePage
				End Get
			End Property

			Public ReadOnly Default Property Item(ByVal index As Integer) As SuppliersRow
				Get
					Return (CType(Me.Rows(index), SuppliersRow))
				End Get
			End Property

			Public Event SuppliersRowChanged As SuppliersRowChangeEventHandler

			Public Event SuppliersRowChanging As SuppliersRowChangeEventHandler

			Public Event SuppliersRowDeleted As SuppliersRowChangeEventHandler

			Public Event SuppliersRowDeleting As SuppliersRowChangeEventHandler

			Public Sub AddSuppliersRow(ByVal row As SuppliersRow)
				Me.Rows.Add(row)
			End Sub

			Public Function AddSuppliersRow(ByVal CompanyName As String, ByVal ContactName As String, ByVal ContactTitle As String, ByVal Address As String, ByVal City As String, ByVal Region As String, ByVal PostalCode As String, ByVal Country As String, ByVal Phone As String, ByVal Fax As String, ByVal HomePage As String) As SuppliersRow
				Dim rowSuppliersRow As SuppliersRow = (CType(Me.NewRow(), SuppliersRow))
				rowSuppliersRow.ItemArray = New Object() { Nothing, CompanyName, ContactName, ContactTitle, Address, City, Region, PostalCode, Country, Phone, Fax, HomePage}
				Me.Rows.Add(rowSuppliersRow)
				Return rowSuppliersRow
			End Function

			Public Function FindBySupplierID(ByVal SupplierID As Integer) As SuppliersRow
				Return (CType(Me.Rows.Find(New Object() { SupplierID}), SuppliersRow))
			End Function

			Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
				Return Me.Rows.GetEnumerator()
			End Function

			Public Overrides Function Clone() As DataTable
				Dim cln As SuppliersDataTable = (CType(MyBase.Clone(), SuppliersDataTable))
				cln.InitVars()
				Return cln
			End Function

			Protected Overrides Function CreateInstance() As DataTable
				Return New SuppliersDataTable()
			End Function

			Friend Sub InitVars()
				Me.columnSupplierID = Me.Columns("SupplierID")
				Me.columnCompanyName = Me.Columns("CompanyName")
				Me.columnContactName = Me.Columns("ContactName")
				Me.columnContactTitle = Me.Columns("ContactTitle")
				Me.columnAddress = Me.Columns("Address")
				Me.columnCity = Me.Columns("City")
				Me.columnRegion = Me.Columns("Region")
				Me.columnPostalCode = Me.Columns("PostalCode")
				Me.columnCountry = Me.Columns("Country")
				Me.columnPhone = Me.Columns("Phone")
				Me.columnFax = Me.Columns("Fax")
				Me.columnHomePage = Me.Columns("HomePage")
			End Sub

			Private Sub InitClass()
				Me.columnSupplierID = New DataColumn("SupplierID", GetType(Integer), Nothing, System.Data.MappingType.Element)
				Me.Columns.Add(Me.columnSupplierID)
				Me.columnCompanyName = New DataColumn("CompanyName", GetType(String), Nothing, System.Data.MappingType.Element)
				Me.Columns.Add(Me.columnCompanyName)
				Me.columnContactName = New DataColumn("ContactName", GetType(String), Nothing, System.Data.MappingType.Element)
				Me.Columns.Add(Me.columnContactName)
				Me.columnContactTitle = New DataColumn("ContactTitle", GetType(String), Nothing, System.Data.MappingType.Element)
				Me.Columns.Add(Me.columnContactTitle)
				Me.columnAddress = New DataColumn("Address", GetType(String), Nothing, System.Data.MappingType.Element)
				Me.Columns.Add(Me.columnAddress)
				Me.columnCity = New DataColumn("City", GetType(String), Nothing, System.Data.MappingType.Element)
				Me.Columns.Add(Me.columnCity)
				Me.columnRegion = New DataColumn("Region", GetType(String), Nothing, System.Data.MappingType.Element)
				Me.Columns.Add(Me.columnRegion)
				Me.columnPostalCode = New DataColumn("PostalCode", GetType(String), Nothing, System.Data.MappingType.Element)
				Me.Columns.Add(Me.columnPostalCode)
				Me.columnCountry = New DataColumn("Country", GetType(String), Nothing, System.Data.MappingType.Element)
				Me.Columns.Add(Me.columnCountry)
				Me.columnPhone = New DataColumn("Phone", GetType(String), Nothing, System.Data.MappingType.Element)
				Me.Columns.Add(Me.columnPhone)
				Me.columnFax = New DataColumn("Fax", GetType(String), Nothing, System.Data.MappingType.Element)
				Me.Columns.Add(Me.columnFax)
				Me.columnHomePage = New DataColumn("HomePage", GetType(String), Nothing, System.Data.MappingType.Element)
				Me.Columns.Add(Me.columnHomePage)
				Me.Constraints.Add(New UniqueConstraint("Dataset1Key1", New DataColumn() { Me.columnSupplierID}, True))
				Me.columnSupplierID.AutoIncrement = True
				Me.columnSupplierID.AllowDBNull = False
				Me.columnSupplierID.ReadOnly = True
				Me.columnSupplierID.Unique = True
				Me.columnCompanyName.AllowDBNull = False
			End Sub

			Public Function NewSuppliersRow() As SuppliersRow
				Return (CType(Me.NewRow(), SuppliersRow))
			End Function

			Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
				Return New SuppliersRow(builder)
			End Function

			Protected Overrides Function GetRowType() As System.Type
				Return GetType(SuppliersRow)
			End Function

			Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
				MyBase.OnRowChanged(e)
				If (Not Me.SuppliersRowChangedEvent Is Nothing) Then
					RaiseEvent SuppliersRowChanged(Me, New SuppliersRowChangeEvent((CType(e.Row, SuppliersRow)), e.Action))
				End If
			End Sub

			Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
				MyBase.OnRowChanging(e)
				If (Not Me.SuppliersRowChangingEvent Is Nothing) Then
					RaiseEvent SuppliersRowChanging(Me, New SuppliersRowChangeEvent((CType(e.Row, SuppliersRow)), e.Action))
				End If
			End Sub

			Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
				MyBase.OnRowDeleted(e)
				If (Not Me.SuppliersRowDeletedEvent Is Nothing) Then
					RaiseEvent SuppliersRowDeleted(Me, New SuppliersRowChangeEvent((CType(e.Row, SuppliersRow)), e.Action))
				End If
			End Sub

			Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
				MyBase.OnRowDeleting(e)
				If (Not Me.SuppliersRowDeletingEvent Is Nothing) Then
					RaiseEvent SuppliersRowDeleting(Me, New SuppliersRowChangeEvent((CType(e.Row, SuppliersRow)), e.Action))
				End If
			End Sub

			Public Sub RemoveSuppliersRow(ByVal row As SuppliersRow)
				Me.Rows.Remove(row)
			End Sub
		End Class

		<System.Diagnostics.DebuggerStepThrough()> _
		Public Class SuppliersRow : Inherits DataRow

			Private tableSuppliers As SuppliersDataTable

			Friend Sub New(ByVal rb As DataRowBuilder)
				MyBase.New(rb)
				Me.tableSuppliers = (CType(Me.Table, SuppliersDataTable))
			End Sub

			Public Property SupplierID() As Integer
				Get
					Return (CInt(Me(Me.tableSuppliers.SupplierIDColumn)))
				End Get
				Set
					Me(Me.tableSuppliers.SupplierIDColumn) = Value
				End Set
			End Property

			Public Property CompanyName() As String
				Get
					Return (CStr(Me(Me.tableSuppliers.CompanyNameColumn)))
				End Get
				Set
					Me(Me.tableSuppliers.CompanyNameColumn) = Value
				End Set
			End Property

			Public Property ContactName() As String
				Get
					Try
						Return (CStr(Me(Me.tableSuppliers.ContactNameColumn)))
					Catch e As InvalidCastException
						Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableSuppliers.ContactNameColumn) = Value
				End Set
			End Property

			Public Property ContactTitle() As String
				Get
					Try
						Return (CStr(Me(Me.tableSuppliers.ContactTitleColumn)))
					Catch e As InvalidCastException
						Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableSuppliers.ContactTitleColumn) = Value
				End Set
			End Property

			Public Property Address() As String
				Get
					Try
						Return (CStr(Me(Me.tableSuppliers.AddressColumn)))
					Catch e As InvalidCastException
						Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableSuppliers.AddressColumn) = Value
				End Set
			End Property

			Public Property City() As String
				Get
					Try
						Return (CStr(Me(Me.tableSuppliers.CityColumn)))
					Catch e As InvalidCastException
						Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableSuppliers.CityColumn) = Value
				End Set
			End Property

			Public Property Region() As String
				Get
					Try
						Return (CStr(Me(Me.tableSuppliers.RegionColumn)))
					Catch e As InvalidCastException
						Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableSuppliers.RegionColumn) = Value
				End Set
			End Property

			Public Property PostalCode() As String
				Get
					Try
						Return (CStr(Me(Me.tableSuppliers.PostalCodeColumn)))
					Catch e As InvalidCastException
						Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableSuppliers.PostalCodeColumn) = Value
				End Set
			End Property

			Public Property Country() As String
				Get
					Try
						Return (CStr(Me(Me.tableSuppliers.CountryColumn)))
					Catch e As InvalidCastException
						Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableSuppliers.CountryColumn) = Value
				End Set
			End Property

			Public Property Phone() As String
				Get
					Try
						Return (CStr(Me(Me.tableSuppliers.PhoneColumn)))
					Catch e As InvalidCastException
						Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableSuppliers.PhoneColumn) = Value
				End Set
			End Property

			Public Property Fax() As String
				Get
					Try
						Return (CStr(Me(Me.tableSuppliers.FaxColumn)))
					Catch e As InvalidCastException
						Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableSuppliers.FaxColumn) = Value
				End Set
			End Property

			Public Property HomePage() As String
				Get
					Try
						Return (CStr(Me(Me.tableSuppliers.HomePageColumn)))
					Catch e As InvalidCastException
						Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableSuppliers.HomePageColumn) = Value
				End Set
			End Property

			Public Function IsContactNameNull() As Boolean
				Return Me.IsNull(Me.tableSuppliers.ContactNameColumn)
			End Function

			Public Sub SetContactNameNull()
				Me(Me.tableSuppliers.ContactNameColumn) = System.Convert.DBNull
			End Sub

			Public Function IsContactTitleNull() As Boolean
				Return Me.IsNull(Me.tableSuppliers.ContactTitleColumn)
			End Function

			Public Sub SetContactTitleNull()
				Me(Me.tableSuppliers.ContactTitleColumn) = System.Convert.DBNull
			End Sub

			Public Function IsAddressNull() As Boolean
				Return Me.IsNull(Me.tableSuppliers.AddressColumn)
			End Function

			Public Sub SetAddressNull()
				Me(Me.tableSuppliers.AddressColumn) = System.Convert.DBNull
			End Sub

			Public Function IsCityNull() As Boolean
				Return Me.IsNull(Me.tableSuppliers.CityColumn)
			End Function

			Public Sub SetCityNull()
				Me(Me.tableSuppliers.CityColumn) = System.Convert.DBNull
			End Sub

			Public Function IsRegionNull() As Boolean
				Return Me.IsNull(Me.tableSuppliers.RegionColumn)
			End Function

			Public Sub SetRegionNull()
				Me(Me.tableSuppliers.RegionColumn) = System.Convert.DBNull
			End Sub

			Public Function IsPostalCodeNull() As Boolean
				Return Me.IsNull(Me.tableSuppliers.PostalCodeColumn)
			End Function

			Public Sub SetPostalCodeNull()
				Me(Me.tableSuppliers.PostalCodeColumn) = System.Convert.DBNull
			End Sub

			Public Function IsCountryNull() As Boolean
				Return Me.IsNull(Me.tableSuppliers.CountryColumn)
			End Function

			Public Sub SetCountryNull()
				Me(Me.tableSuppliers.CountryColumn) = System.Convert.DBNull
			End Sub

			Public Function IsPhoneNull() As Boolean
				Return Me.IsNull(Me.tableSuppliers.PhoneColumn)
			End Function

			Public Sub SetPhoneNull()
				Me(Me.tableSuppliers.PhoneColumn) = System.Convert.DBNull
			End Sub

			Public Function IsFaxNull() As Boolean
				Return Me.IsNull(Me.tableSuppliers.FaxColumn)
			End Function

			Public Sub SetFaxNull()
				Me(Me.tableSuppliers.FaxColumn) = System.Convert.DBNull
			End Sub

			Public Function IsHomePageNull() As Boolean
				Return Me.IsNull(Me.tableSuppliers.HomePageColumn)
			End Function

			Public Sub SetHomePageNull()
				Me(Me.tableSuppliers.HomePageColumn) = System.Convert.DBNull
			End Sub
		End Class

		<System.Diagnostics.DebuggerStepThrough()> _
		Public Class SuppliersRowChangeEvent : Inherits EventArgs

			Private eventRow As SuppliersRow

			Private eventAction As DataRowAction

'INSTANT VB NOTE: The parameter row was renamed since Visual Basic will not uniquely identify class members when parameters have the same name:
'INSTANT VB NOTE: The parameter action was renamed since Visual Basic will not uniquely identify class members when parameters have the same name:
			Public Sub New(ByVal row_Renamed As SuppliersRow, ByVal action_Renamed As DataRowAction)
				Me.eventRow = row_Renamed
				Me.eventAction = action_Renamed
			End Sub

			Public ReadOnly Property Row() As SuppliersRow
				Get
					Return Me.eventRow
				End Get
			End Property

			Public ReadOnly Property Action() As DataRowAction
				Get
					Return Me.eventAction
				End Get
			End Property
		End Class
	End Class
End Namespace
