<html><h1>LINQ Group-by Demo</h1>
<p>
    This sample implements the LINQ Group-by feature with the Essential Grouping 
    grid control.</p>
<p>&nbsp;<strong>LINQ Group-by</strong></p>
<p>&nbsp;</p>

<div align=center><img src="images/sample.png" alt="Word 2007 Image" title="" /></div>

<p/>

<p>&nbsp;</p>
<h3><FONT SIZE=4><strong>Features</strong></FONT></h3>
<UL>
	<LI><p>Now the grouping engine supports <B>IEnumerable</B> as a data source and a nested collection. Before, there always had to be an
<B>IList</B>.  </p>

<LI><p>The grouping-engine data source can also be a <B>Syncfusion.Grouping.IPassThroughGroupingResult</B>, with the default implementation of this interface being the 
<B>Syncfusion.Grouping.PassThroughGroupingResult </B>class. The 
<B>PassThroughGroupingResult </B>class can be used for LINQ queries. </p>

<LI><p>There is also support for getting summaries from a LINQ query. All you have to do is set the
<B>SummaryType</B> to be <B>SummaryType.Custom</B> in the 
<B>GridSummaryColumnDescriptor</B> and the engine will retrieve summaries from matching property names in the
<B>Group.PassThroughItem</B> object, which can be a LINQ group with summaries.</p>
</UL>

<P><FONT SIZE=4><strong>Implementation</strong></FONT></P>
<font color="#8D2E1C">
<pre>            PassThroughGroupingResult productQueryResults = new PassThroughGroupingResult(
                    "Product",
                    productQuery,
                    typeof(Product),
                    productTotals,
                    productSampleQuery.Take(10),
                    "Supplier"
                    );

            grid.DataSource = productQueryResults;

</pre>
</font>
<p>
    If the data source is a pass-through-grouping result, then <B>Group.PassThroughItem</B> will be set by the engine, and it will contain the aggregates for the 
LINQ groups. For other data sources, you can set this manually.</p>
<p>
&nbsp;The engine can create new items when the list-item type is specified for the 
pass-through-grouping resultant 
CTOR where the list-item type needs to have a default CTOR with no arguments.  
</p>
<p>
    With <B>UniformChildListRelation</B>, a new <B>UseLazyUniformChildListRelation</B> property 
has been added to speed up load time of the grid and reduce memory usage when 
all records are not expanded. This should work with any regular nested-collection setup. 
</p>
<font color="#8D2E1C"><pre>
            grid.UseLazyUniformChildListRelation = true;
</pre></font>
