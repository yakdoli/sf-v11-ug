#Region "Copyright Syncfusion Inc. 2001 - 2013"
' Copyright Syncfusion Inc. 2001 - 2013. All rights reserved.
' Use of this code is subject to the terms of our license.
' A copy of the current license can be obtained at any time by e-mailing
' licensing@syncfusion.com. Any infringement will be prosecuted under
' applicable laws. 
#End Region

'INSTANT VB TODO TASK: There is no equivalent to #pragma directives in VB.NET:
'#pragma warning disable 1591
'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.1433
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------


Imports Microsoft.VisualBasic
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Data
Imports System.Collections.Generic
Imports System.Reflection
Imports System.Linq
Imports System.Linq.Expressions
Imports System.ComponentModel
Imports System

Namespace LinqGroupBy


	Partial Public Class NorthwindwithImage
		Inherits System.Data.Linq.DataContext

		Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()

	#Region "Extensibility Method Definitions"
	Partial Private Sub OnCreated()
	End Sub
	#End Region

		Public Sub New(ByVal connection As String)
			MyBase.New(connection, mappingSource)
			OnCreated()
		End Sub

		Public Sub New(ByVal connection As System.Data.IDbConnection)
			MyBase.New(connection, mappingSource)
			OnCreated()
		End Sub

		Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
			MyBase.New(connection, mappingSource)
			OnCreated()
		End Sub

		Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
			MyBase.New(connection, mappingSource)
			OnCreated()
		End Sub

		Public ReadOnly Property Categories() As System.Data.Linq.Table(Of Categories)
			Get
				Return Me.GetTable(Of Categories)()
			End Get
		End Property

		Public ReadOnly Property CategorySalesFor1995() As System.Data.Linq.Table(Of CategorySalesFor1995)
			Get
				Return Me.GetTable(Of CategorySalesFor1995)()
			End Get
		End Property

		Public ReadOnly Property CurrentProductList() As System.Data.Linq.Table(Of CurrentProductList)
			Get
				Return Me.GetTable(Of CurrentProductList)()
			End Get
		End Property

		Public ReadOnly Property Customers() As System.Data.Linq.Table(Of Customers)
			Get
				Return Me.GetTable(Of Customers)()
			End Get
		End Property

		Public ReadOnly Property Employees() As System.Data.Linq.Table(Of Employees)
			Get
				Return Me.GetTable(Of Employees)()
			End Get
		End Property

		Public ReadOnly Property Invoices() As System.Data.Linq.Table(Of Invoices)
			Get
				Return Me.GetTable(Of Invoices)()
			End Get
		End Property

		Public ReadOnly Property OrderDetails() As System.Data.Linq.Table(Of OrderDetails)
			Get
				Return Me.GetTable(Of OrderDetails)()
			End Get
		End Property

		Public ReadOnly Property OrderDetailsExtended() As System.Data.Linq.Table(Of OrderDetailsExtended)
			Get
				Return Me.GetTable(Of OrderDetailsExtended)()
			End Get
		End Property

		Public ReadOnly Property OrderSubtotals() As System.Data.Linq.Table(Of OrderSubtotals)
			Get
				Return Me.GetTable(Of OrderSubtotals)()
			End Get
		End Property

		Public ReadOnly Property Orders() As System.Data.Linq.Table(Of Orders)
			Get
				Return Me.GetTable(Of Orders)()
			End Get
		End Property

		Public ReadOnly Property ProductSalesFor1995() As System.Data.Linq.Table(Of ProductSalesFor1995)
			Get
				Return Me.GetTable(Of ProductSalesFor1995)()
			End Get
		End Property

		Public ReadOnly Property Products() As System.Data.Linq.Table(Of Products)
			Get
				Return Me.GetTable(Of Products)()
			End Get
		End Property

		Public ReadOnly Property ProductsAboveAveragePrice() As System.Data.Linq.Table(Of ProductsAboveAveragePrice)
			Get
				Return Me.GetTable(Of ProductsAboveAveragePrice)()
			End Get
		End Property

		Public ReadOnly Property QuarterlyOrders() As System.Data.Linq.Table(Of QuarterlyOrders)
			Get
				Return Me.GetTable(Of QuarterlyOrders)()
			End Get
		End Property

		Public ReadOnly Property SalesByCategory() As System.Data.Linq.Table(Of SalesByCategory)
			Get
				Return Me.GetTable(Of SalesByCategory)()
			End Get
		End Property

		Public ReadOnly Property Shippers() As System.Data.Linq.Table(Of Shippers)
			Get
				Return Me.GetTable(Of Shippers)()
			End Get
		End Property

		Public ReadOnly Property Suppliers() As System.Data.Linq.Table(Of Suppliers)
			Get
				Return Me.GetTable(Of Suppliers)()
			End Get
		End Property

		Public ReadOnly Property TenMostExpensiveProducts() As System.Data.Linq.Table(Of TenMostExpensiveProducts)
			Get
				Return Me.GetTable(Of TenMostExpensiveProducts)()
			End Get
		End Property
	End Class

	<Table()> _
	Partial Public Class Categories

		Private _CategoryID As Integer

		Private _CategoryName As String

		Private _Description As String

		Private _Picture As System.Data.Linq.Binary

		Public Sub New()
		End Sub

		<Column(Storage:="_CategoryID", DbType:="Int NOT NULL")> _
		Public Property CategoryID() As Integer
			Get
				Return Me._CategoryID
			End Get
			Set(ByVal value As Integer)
				If (Me._CategoryID <> value) Then
					Me._CategoryID = value
				End If
			End Set
		End Property

		<Column(Storage:="_CategoryName", DbType:="NVarChar(15) NOT NULL", CanBeNull:=False)> _
		Public Property CategoryName() As String
			Get
				Return Me._CategoryName
			End Get
			Set(ByVal value As String)
				If (Me._CategoryName <> value) Then
					Me._CategoryName = value
				End If
			End Set
		End Property

		<Column(Storage:="_Description", DbType:="NText", UpdateCheck:=UpdateCheck.Never)> _
		Public Property Description() As String
			Get
				Return Me._Description
			End Get
			Set(ByVal value As String)
				If (Me._Description <> value) Then
					Me._Description = value
				End If
			End Set
		End Property

		<Column(Storage:="_Picture", DbType:="Image", UpdateCheck:=UpdateCheck.Never)> _
		Public Property Picture() As System.Data.Linq.Binary
			Get
				Return Me._Picture
			End Get
			Set(ByVal value As System.Data.Linq.Binary)
				If (Me._Picture IsNot value) Then
					Me._Picture = value
				End If
			End Set
		End Property
	End Class

	<Table(Name:="Category Sales for 1995")> _
	Partial Public Class CategorySalesFor1995

		Private _CategoryName As String

		Private _CategorySales? As Decimal

		Public Sub New()
		End Sub

		<Column(Storage:="_CategoryName", DbType:="NVarChar(15)")> _
		Public Property CategoryName() As String
			Get
				Return Me._CategoryName
			End Get
			Set(ByVal value As String)
				If (Me._CategoryName <> value) Then
					Me._CategoryName = value
				End If
			End Set
		End Property

		<Column(Storage:="_CategorySales", DbType:="Money")> _
		Public Property CategorySales() As Decimal?
			Get
				Return Me._CategorySales
			End Get
			Set(ByVal value? As Decimal)
				If (Not Me._CategorySales.Equals(value)) Then
					Me._CategorySales = value
				End If
			End Set
		End Property
	End Class

	<Table(Name:="Current Product List")> _
	Partial Public Class CurrentProductList

		Private _ProductID As Integer

		Private _ProductName As String

		Public Sub New()
		End Sub

		<Column(Storage:="_ProductID", DbType:="Int NOT NULL")> _
		Public Property ProductID() As Integer
			Get
				Return Me._ProductID
			End Get
			Set(ByVal value As Integer)
				If (Me._ProductID <> value) Then
					Me._ProductID = value
				End If
			End Set
		End Property

		<Column(Storage:="_ProductName", DbType:="NVarChar(40)")> _
		Public Property ProductName() As String
			Get
				Return Me._ProductName
			End Get
			Set(ByVal value As String)
				If (Me._ProductName <> value) Then
					Me._ProductName = value
				End If
			End Set
		End Property
	End Class

	<Table()> _
	Partial Public Class Customers

		Private _CustomerID As String

		Private _CompanyName As String

		Private _ContactName As String

		Private _ContactTitle As String

		Private _Address As String

		Private _City As String

		Private _Region As String

		Private _PostalCode As String

		Private _Country As String

		Private _Phone As String

		Private _Fax As String

		Public Sub New()
		End Sub

		<Column(Storage:="_CustomerID", DbType:="NVarChar(5)")> _
		Public Property CustomerID() As String
			Get
				Return Me._CustomerID
			End Get
			Set(ByVal value As String)
				If (Me._CustomerID <> value) Then
					Me._CustomerID = value
				End If
			End Set
		End Property

		<Column(Storage:="_CompanyName", DbType:="NVarChar(40) NOT NULL", CanBeNull:=False)> _
		Public Property CompanyName() As String
			Get
				Return Me._CompanyName
			End Get
			Set(ByVal value As String)
				If (Me._CompanyName <> value) Then
					Me._CompanyName = value
				End If
			End Set
		End Property

		<Column(Storage:="_ContactName", DbType:="NVarChar(30)")> _
		Public Property ContactName() As String
			Get
				Return Me._ContactName
			End Get
			Set(ByVal value As String)
				If (Me._ContactName <> value) Then
					Me._ContactName = value
				End If
			End Set
		End Property

		<Column(Storage:="_ContactTitle", DbType:="NVarChar(30)")> _
		Public Property ContactTitle() As String
			Get
				Return Me._ContactTitle
			End Get
			Set(ByVal value As String)
				If (Me._ContactTitle <> value) Then
					Me._ContactTitle = value
				End If
			End Set
		End Property

		<Column(Storage:="_Address", DbType:="NVarChar(60)")> _
		Public Property Address() As String
			Get
				Return Me._Address
			End Get
			Set(ByVal value As String)
				If (Me._Address <> value) Then
					Me._Address = value
				End If
			End Set
		End Property

		<Column(Storage:="_City", DbType:="NVarChar(15)")> _
		Public Property City() As String
			Get
				Return Me._City
			End Get
			Set(ByVal value As String)
				If (Me._City <> value) Then
					Me._City = value
				End If
			End Set
		End Property

		<Column(Storage:="_Region", DbType:="NVarChar(15)")> _
		Public Property Region() As String
			Get
				Return Me._Region
			End Get
			Set(ByVal value As String)
				If (Me._Region <> value) Then
					Me._Region = value
				End If
			End Set
		End Property

		<Column(Storage:="_PostalCode", DbType:="NVarChar(10)")> _
		Public Property PostalCode() As String
			Get
				Return Me._PostalCode
			End Get
			Set(ByVal value As String)
				If (Me._PostalCode <> value) Then
					Me._PostalCode = value
				End If
			End Set
		End Property

		<Column(Storage:="_Country", DbType:="NVarChar(15)")> _
		Public Property Country() As String
			Get
				Return Me._Country
			End Get
			Set(ByVal value As String)
				If (Me._Country <> value) Then
					Me._Country = value
				End If
			End Set
		End Property

		<Column(Storage:="_Phone", DbType:="NVarChar(24)")> _
		Public Property Phone() As String
			Get
				Return Me._Phone
			End Get
			Set(ByVal value As String)
				If (Me._Phone <> value) Then
					Me._Phone = value
				End If
			End Set
		End Property

		<Column(Storage:="_Fax", DbType:="NVarChar(24)")> _
		Public Property Fax() As String
			Get
				Return Me._Fax
			End Get
			Set(ByVal value As String)
				If (Me._Fax <> value) Then
					Me._Fax = value
				End If
			End Set
		End Property
	End Class

	<Table()> _
	Partial Public Class Employees

		Private _EmployeeID As Integer

		Private _LastName As String

		Private _FirstName As String

		Private _Title As String

		Private _TitleOfCourtesy As String

		Private _BirthDate? As System.DateTime

		Private _HireDate? As System.DateTime

		Private _Address As String

		Private _City As String

		Private _Region As String

		Private _PostalCode As String

		Private _Country As String

		Private _HomePhone As String

		Private _Extension As String

		Private _Photo As System.Data.Linq.Binary

		Private _SmallPhoto As System.Data.Linq.Binary

		Private _Notes As String

		Private _ReportsTo? As Integer

		Public Sub New()
		End Sub

		<Column(Storage:="_EmployeeID", DbType:="Int NOT NULL")> _
		Public Property EmployeeID() As Integer
			Get
				Return Me._EmployeeID
			End Get
			Set(ByVal value As Integer)
				If (Me._EmployeeID <> value) Then
					Me._EmployeeID = value
				End If
			End Set
		End Property

		<Column(Storage:="_LastName", DbType:="NVarChar(20) NOT NULL", CanBeNull:=False)> _
		Public Property LastName() As String
			Get
				Return Me._LastName
			End Get
			Set(ByVal value As String)
				If (Me._LastName <> value) Then
					Me._LastName = value
				End If
			End Set
		End Property

		<Column(Storage:="_FirstName", DbType:="NVarChar(10) NOT NULL", CanBeNull:=False)> _
		Public Property FirstName() As String
			Get
				Return Me._FirstName
			End Get
			Set(ByVal value As String)
				If (Me._FirstName <> value) Then
					Me._FirstName = value
				End If
			End Set
		End Property

		<Column(Storage:="_Title", DbType:="NVarChar(30)")> _
		Public Property Title() As String
			Get
				Return Me._Title
			End Get
			Set(ByVal value As String)
				If (Me._Title <> value) Then
					Me._Title = value
				End If
			End Set
		End Property

		<Column(Storage:="_TitleOfCourtesy", DbType:="NVarChar(25)")> _
		Public Property TitleOfCourtesy() As String
			Get
				Return Me._TitleOfCourtesy
			End Get
			Set(ByVal value As String)
				If (Me._TitleOfCourtesy <> value) Then
					Me._TitleOfCourtesy = value
				End If
			End Set
		End Property

		<Column(Storage:="_BirthDate", DbType:="DateTime")> _
		Public Property BirthDate() As System.DateTime?
			Get
				Return Me._BirthDate
			End Get
			Set(ByVal value? As System.DateTime)
				If (Not Me._BirthDate.Equals(value)) Then
					Me._BirthDate = value
				End If
			End Set
		End Property

		<Column(Storage:="_HireDate", DbType:="DateTime")> _
		Public Property HireDate() As System.DateTime?
			Get
				Return Me._HireDate
			End Get
			Set(ByVal value? As System.DateTime)
				If (Not Me._HireDate.Equals(value)) Then
					Me._HireDate = value
				End If
			End Set
		End Property

		<Column(Storage:="_Address", DbType:="NVarChar(60)")> _
		Public Property Address() As String
			Get
				Return Me._Address
			End Get
			Set(ByVal value As String)
				If (Me._Address <> value) Then
					Me._Address = value
				End If
			End Set
		End Property

		<Column(Storage:="_City", DbType:="NVarChar(15)")> _
		Public Property City() As String
			Get
				Return Me._City
			End Get
			Set(ByVal value As String)
				If (Me._City <> value) Then
					Me._City = value
				End If
			End Set
		End Property

		<Column(Storage:="_Region", DbType:="NVarChar(15)")> _
		Public Property Region() As String
			Get
				Return Me._Region
			End Get
			Set(ByVal value As String)
				If (Me._Region <> value) Then
					Me._Region = value
				End If
			End Set
		End Property

		<Column(Storage:="_PostalCode", DbType:="NVarChar(10)")> _
		Public Property PostalCode() As String
			Get
				Return Me._PostalCode
			End Get
			Set(ByVal value As String)
				If (Me._PostalCode <> value) Then
					Me._PostalCode = value
				End If
			End Set
		End Property

		<Column(Storage:="_Country", DbType:="NVarChar(15)")> _
		Public Property Country() As String
			Get
				Return Me._Country
			End Get
			Set(ByVal value As String)
				If (Me._Country <> value) Then
					Me._Country = value
				End If
			End Set
		End Property

		<Column(Storage:="_HomePhone", DbType:="NVarChar(24)")> _
		Public Property HomePhone() As String
			Get
				Return Me._HomePhone
			End Get
			Set(ByVal value As String)
				If (Me._HomePhone <> value) Then
					Me._HomePhone = value
				End If
			End Set
		End Property

		<Column(Storage:="_Extension", DbType:="NVarChar(4)")> _
		Public Property Extension() As String
			Get
				Return Me._Extension
			End Get
			Set(ByVal value As String)
				If (Me._Extension <> value) Then
					Me._Extension = value
				End If
			End Set
		End Property

		<Column(Storage:="_Photo", DbType:="Image", UpdateCheck:=UpdateCheck.Never)> _
		Public Property Photo() As System.Data.Linq.Binary
			Get
				Return Me._Photo
			End Get
			Set(ByVal value As System.Data.Linq.Binary)
				If (Me._Photo IsNot value) Then
					Me._Photo = value
				End If
			End Set
		End Property

		<Column(Storage:="_SmallPhoto", DbType:="Image", UpdateCheck:=UpdateCheck.Never)> _
		Public Property SmallPhoto() As System.Data.Linq.Binary
			Get
				Return Me._SmallPhoto
			End Get
			Set(ByVal value As System.Data.Linq.Binary)
				If (Me._SmallPhoto IsNot value) Then
					Me._SmallPhoto = value
				End If
			End Set
		End Property

		<Column(Storage:="_Notes", DbType:="NText", UpdateCheck:=UpdateCheck.Never)> _
		Public Property Notes() As String
			Get
				Return Me._Notes
			End Get
			Set(ByVal value As String)
				If (Me._Notes <> value) Then
					Me._Notes = value
				End If
			End Set
		End Property

		<Column(Storage:="_ReportsTo", DbType:="Int")> _
		Public Property ReportsTo() As Integer?
			Get
				Return Me._ReportsTo
			End Get
			Set(ByVal value? As Integer)
				If (Not Me._ReportsTo.Equals(value)) Then
					Me._ReportsTo = value
				End If
			End Set
		End Property
	End Class

	<Table()> _
	Partial Public Class Invoices

		Private _ShipName As String

		Private _ShipAddress As String

		Private _ShipCity As String

		Private _ShipRegion As String

		Private _ShipPostalCode As String

		Private _ShipCountry As String

		Private _CustomerID As String

		Private _Customers_CompanyName As String

		Private _Address As String

		Private _City As String

		Private _Region As String

		Private _PostalCode As String

		Private _Country As String

		Private _Salesperson As String

		Private _OrderID As Integer

		Private _OrderDate? As System.DateTime

		Private _RequiredDate? As System.DateTime

		Private _ShippedDate? As System.DateTime

		Private _Shippers_CompanyName As String

		Private _ProductID? As Integer

		Private _ProductName As String

		Private _UnitPrice? As Decimal

		Private _Quantity? As Short

		Private _Discount? As Single

		Private _ExtendedPrice? As Decimal

		Private _Freight? As Decimal

		Public Sub New()
		End Sub

		<Column(Storage:="_ShipName", DbType:="NVarChar(40)")> _
		Public Property ShipName() As String
			Get
				Return Me._ShipName
			End Get
			Set(ByVal value As String)
				If (Me._ShipName <> value) Then
					Me._ShipName = value
				End If
			End Set
		End Property

		<Column(Storage:="_ShipAddress", DbType:="NVarChar(60)")> _
		Public Property ShipAddress() As String
			Get
				Return Me._ShipAddress
			End Get
			Set(ByVal value As String)
				If (Me._ShipAddress <> value) Then
					Me._ShipAddress = value
				End If
			End Set
		End Property

		<Column(Storage:="_ShipCity", DbType:="NVarChar(15)")> _
		Public Property ShipCity() As String
			Get
				Return Me._ShipCity
			End Get
			Set(ByVal value As String)
				If (Me._ShipCity <> value) Then
					Me._ShipCity = value
				End If
			End Set
		End Property

		<Column(Storage:="_ShipRegion", DbType:="NVarChar(15)")> _
		Public Property ShipRegion() As String
			Get
				Return Me._ShipRegion
			End Get
			Set(ByVal value As String)
				If (Me._ShipRegion <> value) Then
					Me._ShipRegion = value
				End If
			End Set
		End Property

		<Column(Storage:="_ShipPostalCode", DbType:="NVarChar(10)")> _
		Public Property ShipPostalCode() As String
			Get
				Return Me._ShipPostalCode
			End Get
			Set(ByVal value As String)
				If (Me._ShipPostalCode <> value) Then
					Me._ShipPostalCode = value
				End If
			End Set
		End Property

		<Column(Storage:="_ShipCountry", DbType:="NVarChar(15)")> _
		Public Property ShipCountry() As String
			Get
				Return Me._ShipCountry
			End Get
			Set(ByVal value As String)
				If (Me._ShipCountry <> value) Then
					Me._ShipCountry = value
				End If
			End Set
		End Property

		<Column(Storage:="_CustomerID", DbType:="NVarChar(5)")> _
		Public Property CustomerID() As String
			Get
				Return Me._CustomerID
			End Get
			Set(ByVal value As String)
				If (Me._CustomerID <> value) Then
					Me._CustomerID = value
				End If
			End Set
		End Property

		<Column(Name:="[Customers.CompanyName]", Storage:="_Customers_CompanyName", DbType:="NVarChar(40)")> _
		Public Property Customers_CompanyName() As String
			Get
				Return Me._Customers_CompanyName
			End Get
			Set(ByVal value As String)
				If (Me._Customers_CompanyName <> value) Then
					Me._Customers_CompanyName = value
				End If
			End Set
		End Property

		<Column(Storage:="_Address", DbType:="NVarChar(60)")> _
		Public Property Address() As String
			Get
				Return Me._Address
			End Get
			Set(ByVal value As String)
				If (Me._Address <> value) Then
					Me._Address = value
				End If
			End Set
		End Property

		<Column(Storage:="_City", DbType:="NVarChar(15)")> _
		Public Property City() As String
			Get
				Return Me._City
			End Get
			Set(ByVal value As String)
				If (Me._City <> value) Then
					Me._City = value
				End If
			End Set
		End Property

		<Column(Storage:="_Region", DbType:="NVarChar(15)")> _
		Public Property Region() As String
			Get
				Return Me._Region
			End Get
			Set(ByVal value As String)
				If (Me._Region <> value) Then
					Me._Region = value
				End If
			End Set
		End Property

		<Column(Storage:="_PostalCode", DbType:="NVarChar(10)")> _
		Public Property PostalCode() As String
			Get
				Return Me._PostalCode
			End Get
			Set(ByVal value As String)
				If (Me._PostalCode <> value) Then
					Me._PostalCode = value
				End If
			End Set
		End Property

		<Column(Storage:="_Country", DbType:="NVarChar(15)")> _
		Public Property Country() As String
			Get
				Return Me._Country
			End Get
			Set(ByVal value As String)
				If (Me._Country <> value) Then
					Me._Country = value
				End If
			End Set
		End Property

		<Column(Storage:="_Salesperson", DbType:="NVarChar(255)")> _
		Public Property Salesperson() As String
			Get
				Return Me._Salesperson
			End Get
			Set(ByVal value As String)
				If (Me._Salesperson <> value) Then
					Me._Salesperson = value
				End If
			End Set
		End Property

		<Column(Storage:="_OrderID", DbType:="Int NOT NULL")> _
		Public Property OrderID() As Integer
			Get
				Return Me._OrderID
			End Get
			Set(ByVal value As Integer)
				If (Me._OrderID <> value) Then
					Me._OrderID = value
				End If
			End Set
		End Property

		<Column(Storage:="_OrderDate", DbType:="DateTime")> _
		Public Property OrderDate() As System.DateTime?
			Get
				Return Me._OrderDate
			End Get
			Set(ByVal value? As System.DateTime)
				If (Not Me._OrderDate.Equals(value)) Then
					Me._OrderDate = value
				End If
			End Set
		End Property

		<Column(Storage:="_RequiredDate", DbType:="DateTime")> _
		Public Property RequiredDate() As System.DateTime?
			Get
				Return Me._RequiredDate
			End Get
			Set(ByVal value? As System.DateTime)
				If (Not Me._RequiredDate.Equals(value)) Then
					Me._RequiredDate = value
				End If
			End Set
		End Property

		<Column(Storage:="_ShippedDate", DbType:="DateTime")> _
		Public Property ShippedDate() As System.DateTime?
			Get
				Return Me._ShippedDate
			End Get
			Set(ByVal value? As System.DateTime)
				If (Not Me._ShippedDate.Equals(value)) Then
					Me._ShippedDate = value
				End If
			End Set
		End Property

		<Column(Name:="[Shippers.CompanyName]", Storage:="_Shippers_CompanyName", DbType:="NVarChar(40)")> _
		Public Property Shippers_CompanyName() As String
			Get
				Return Me._Shippers_CompanyName
			End Get
			Set(ByVal value As String)
				If (Me._Shippers_CompanyName <> value) Then
					Me._Shippers_CompanyName = value
				End If
			End Set
		End Property

		<Column(Storage:="_ProductID", DbType:="Int")> _
		Public Property ProductID() As Integer?
			Get
				Return Me._ProductID
			End Get
			Set(ByVal value? As Integer)
				If (Not Me._ProductID.Equals(value)) Then
					Me._ProductID = value
				End If
			End Set
		End Property

		<Column(Storage:="_ProductName", DbType:="NVarChar(40)")> _
		Public Property ProductName() As String
			Get
				Return Me._ProductName
			End Get
			Set(ByVal value As String)
				If (Me._ProductName <> value) Then
					Me._ProductName = value
				End If
			End Set
		End Property

		<Column(Storage:="_UnitPrice", DbType:="Money")> _
		Public Property UnitPrice() As Decimal?
			Get
				Return Me._UnitPrice
			End Get
			Set(ByVal value? As Decimal)
				If (Not Me._UnitPrice.Equals(value)) Then
					Me._UnitPrice = value
				End If
			End Set
		End Property

		<Column(Storage:="_Quantity", DbType:="SmallInt")> _
		Public Property Quantity() As Short?
			Get
				Return Me._Quantity
			End Get
			Set(ByVal value? As Short)
				If (Not Me._Quantity.Equals(value)) Then
					Me._Quantity = value
				End If
			End Set
		End Property

		<Column(Storage:="_Discount", DbType:="Real")> _
		Public Property Discount() As Single?
			Get
				Return Me._Discount
			End Get
			Set(ByVal value? As Single)
				If (Not Me._Discount.Equals(value)) Then
					Me._Discount = value
				End If
			End Set
		End Property

		<Column(Storage:="_ExtendedPrice", DbType:="Money")> _
		Public Property ExtendedPrice() As Decimal?
			Get
				Return Me._ExtendedPrice
			End Get
			Set(ByVal value? As Decimal)
				If (Not Me._ExtendedPrice.Equals(value)) Then
					Me._ExtendedPrice = value
				End If
			End Set
		End Property

		<Column(Storage:="_Freight", DbType:="Money")> _
		Public Property Freight() As Decimal?
			Get
				Return Me._Freight
			End Get
			Set(ByVal value? As Decimal)
				If (Not Me._Freight.Equals(value)) Then
					Me._Freight = value
				End If
			End Set
		End Property
	End Class

	<Table(Name:="Order Details")> _
	Partial Public Class OrderDetails

		Private _OrderID? As Integer

		Private _ProductID As Integer

		Private _UnitPrice As Decimal

		Private _Quantity As Short

		Private _Discount As Single

		Public Sub New()
		End Sub

		<Column(Storage:="_OrderID", DbType:="Int")> _
		Public Property OrderID() As Integer?
			Get
				Return Me._OrderID
			End Get
			Set(ByVal value? As Integer)
				If (Not Me._OrderID.Equals(value)) Then
					Me._OrderID = value
				End If
			End Set
		End Property

		<Column(Storage:="_ProductID", DbType:="Int NOT NULL")> _
		Public Property ProductID() As Integer
			Get
				Return Me._ProductID
			End Get
			Set(ByVal value As Integer)
				If (Me._ProductID <> value) Then
					Me._ProductID = value
				End If
			End Set
		End Property

		<Column(Storage:="_UnitPrice", DbType:="Money NOT NULL")> _
		Public Property UnitPrice() As Decimal
			Get
				Return Me._UnitPrice
			End Get
			Set(ByVal value As Decimal)
				If (Me._UnitPrice <> value) Then
					Me._UnitPrice = value
				End If
			End Set
		End Property

		<Column(Storage:="_Quantity", DbType:="SmallInt NOT NULL")> _
		Public Property Quantity() As Short
			Get
				Return Me._Quantity
			End Get
			Set(ByVal value As Short)
				If (Me._Quantity <> value) Then
					Me._Quantity = value
				End If
			End Set
		End Property

		<Column(Storage:="_Discount", DbType:="Real NOT NULL")> _
		Public Property Discount() As Single
			Get
				Return Me._Discount
			End Get
			Set(ByVal value As Single)
				If (Me._Discount <> value) Then
					Me._Discount = value
				End If
			End Set
		End Property
	End Class

	<Table(Name:="Order Details Extended")> _
	Partial Public Class OrderDetailsExtended

		Private _OrderID? As Integer

		Private _ProductID? As Integer

		Private _ProductName As String

		Private _UnitPrice? As Decimal

		Private _Quantity? As Short

		Private _Discount? As Single

		Private _ExtendedPrice? As Decimal

		Public Sub New()
		End Sub

		<Column(Storage:="_OrderID", DbType:="Int")> _
		Public Property OrderID() As Integer?
			Get
				Return Me._OrderID
			End Get
			Set(ByVal value? As Integer)
				If (Not Me._OrderID.Equals(value)) Then
					Me._OrderID = value
				End If
			End Set
		End Property

		<Column(Storage:="_ProductID", DbType:="Int")> _
		Public Property ProductID() As Integer?
			Get
				Return Me._ProductID
			End Get
			Set(ByVal value? As Integer)
				If (Not Me._ProductID.Equals(value)) Then
					Me._ProductID = value
				End If
			End Set
		End Property

		<Column(Storage:="_ProductName", DbType:="NVarChar(40)")> _
		Public Property ProductName() As String
			Get
				Return Me._ProductName
			End Get
			Set(ByVal value As String)
				If (Me._ProductName <> value) Then
					Me._ProductName = value
				End If
			End Set
		End Property

		<Column(Storage:="_UnitPrice", DbType:="Money")> _
		Public Property UnitPrice() As Decimal?
			Get
				Return Me._UnitPrice
			End Get
			Set(ByVal value? As Decimal)
				If (Not Me._UnitPrice.Equals(value)) Then
					Me._UnitPrice = value
				End If
			End Set
		End Property

		<Column(Storage:="_Quantity", DbType:="SmallInt")> _
		Public Property Quantity() As Short?
			Get
				Return Me._Quantity
			End Get
			Set(ByVal value? As Short)
				If (Not Me._Quantity.Equals(value)) Then
					Me._Quantity = value
				End If
			End Set
		End Property

		<Column(Storage:="_Discount", DbType:="Real")> _
		Public Property Discount() As Single?
			Get
				Return Me._Discount
			End Get
			Set(ByVal value? As Single)
				If (Not Me._Discount.Equals(value)) Then
					Me._Discount = value
				End If
			End Set
		End Property

		<Column(Storage:="_ExtendedPrice", DbType:="Money")> _
		Public Property ExtendedPrice() As Decimal?
			Get
				Return Me._ExtendedPrice
			End Get
			Set(ByVal value? As Decimal)
				If (Not Me._ExtendedPrice.Equals(value)) Then
					Me._ExtendedPrice = value
				End If
			End Set
		End Property
	End Class

	<Table(Name:="Order Subtotals")> _
	Partial Public Class OrderSubtotals

		Private _OrderID? As Integer

		Private _Subtotal? As Decimal

		Public Sub New()
		End Sub

		<Column(Storage:="_OrderID", DbType:="Int")> _
		Public Property OrderID() As Integer?
			Get
				Return Me._OrderID
			End Get
			Set(ByVal value? As Integer)
				If (Not Me._OrderID.Equals(value)) Then
					Me._OrderID = value
				End If
			End Set
		End Property

		<Column(Storage:="_Subtotal", DbType:="Money")> _
		Public Property Subtotal() As Decimal?
			Get
				Return Me._Subtotal
			End Get
			Set(ByVal value? As Decimal)
				If (Not Me._Subtotal.Equals(value)) Then
					Me._Subtotal = value
				End If
			End Set
		End Property
	End Class

	<Table()> _
	Partial Public Class Orders

		Private _OrderID As Integer

		Private _CustomerID As String

		Private _EmployeeID? As Integer

		Private _OrderDate? As System.DateTime

		Private _RequiredDate? As System.DateTime

		Private _ShippedDate? As System.DateTime

		Private _ShipVia? As Integer

		Private _Freight? As Decimal

		Private _ShipName As String

		Private _ShipAddress As String

		Private _ShipCity As String

		Private _ShipRegion As String

		Private _ShipPostalCode As String

		Private _ShipCountry As String

		Public Sub New()
		End Sub

		<Column(Storage:="_OrderID", DbType:="Int NOT NULL")> _
		Public Property OrderID() As Integer
			Get
				Return Me._OrderID
			End Get
			Set(ByVal value As Integer)
				If (Me._OrderID <> value) Then
					Me._OrderID = value
				End If
			End Set
		End Property

		<Column(Storage:="_CustomerID", DbType:="NVarChar(5)")> _
		Public Property CustomerID() As String
			Get
				Return Me._CustomerID
			End Get
			Set(ByVal value As String)
				If (Me._CustomerID <> value) Then
					Me._CustomerID = value
				End If
			End Set
		End Property

		<Column(Storage:="_EmployeeID", DbType:="Int")> _
		Public Property EmployeeID() As Integer?
			Get
				Return Me._EmployeeID
			End Get
			Set(ByVal value? As Integer)
				If (Not Me._EmployeeID.Equals(value)) Then
					Me._EmployeeID = value
				End If
			End Set
		End Property

		<Column(Storage:="_OrderDate", DbType:="DateTime")> _
		Public Property OrderDate() As System.DateTime?
			Get
				Return Me._OrderDate
			End Get
			Set(ByVal value? As System.DateTime)
				If (Not Me._OrderDate.Equals(value)) Then
					Me._OrderDate = value
				End If
			End Set
		End Property

		<Column(Storage:="_RequiredDate", DbType:="DateTime")> _
		Public Property RequiredDate() As System.DateTime?
			Get
				Return Me._RequiredDate
			End Get
			Set(ByVal value? As System.DateTime)
				If (Not Me._RequiredDate.Equals(value)) Then
					Me._RequiredDate = value
				End If
			End Set
		End Property

		<Column(Storage:="_ShippedDate", DbType:="DateTime")> _
		Public Property ShippedDate() As System.DateTime?
			Get
				Return Me._ShippedDate
			End Get
			Set(ByVal value? As System.DateTime)
				If (Not Me._ShippedDate.Equals(value)) Then
					Me._ShippedDate = value
				End If
			End Set
		End Property

		<Column(Storage:="_ShipVia", DbType:="Int")> _
		Public Property ShipVia() As Integer?
			Get
				Return Me._ShipVia
			End Get
			Set(ByVal value? As Integer)
				If (Not Me._ShipVia.Equals(value)) Then
					Me._ShipVia = value
				End If
			End Set
		End Property

		<Column(Storage:="_Freight", DbType:="Money")> _
		Public Property Freight() As Decimal?
			Get
				Return Me._Freight
			End Get
			Set(ByVal value? As Decimal)
				If (Not Me._Freight.Equals(value)) Then
					Me._Freight = value
				End If
			End Set
		End Property

		<Column(Storage:="_ShipName", DbType:="NVarChar(40)")> _
		Public Property ShipName() As String
			Get
				Return Me._ShipName
			End Get
			Set(ByVal value As String)
				If (Me._ShipName <> value) Then
					Me._ShipName = value
				End If
			End Set
		End Property

		<Column(Storage:="_ShipAddress", DbType:="NVarChar(60)")> _
		Public Property ShipAddress() As String
			Get
				Return Me._ShipAddress
			End Get
			Set(ByVal value As String)
				If (Me._ShipAddress <> value) Then
					Me._ShipAddress = value
				End If
			End Set
		End Property

		<Column(Storage:="_ShipCity", DbType:="NVarChar(15)")> _
		Public Property ShipCity() As String
			Get
				Return Me._ShipCity
			End Get
			Set(ByVal value As String)
				If (Me._ShipCity <> value) Then
					Me._ShipCity = value
				End If
			End Set
		End Property

		<Column(Storage:="_ShipRegion", DbType:="NVarChar(15)")> _
		Public Property ShipRegion() As String
			Get
				Return Me._ShipRegion
			End Get
			Set(ByVal value As String)
				If (Me._ShipRegion <> value) Then
					Me._ShipRegion = value
				End If
			End Set
		End Property

		<Column(Storage:="_ShipPostalCode", DbType:="NVarChar(10)")> _
		Public Property ShipPostalCode() As String
			Get
				Return Me._ShipPostalCode
			End Get
			Set(ByVal value As String)
				If (Me._ShipPostalCode <> value) Then
					Me._ShipPostalCode = value
				End If
			End Set
		End Property

		<Column(Storage:="_ShipCountry", DbType:="NVarChar(15)")> _
		Public Property ShipCountry() As String
			Get
				Return Me._ShipCountry
			End Get
			Set(ByVal value As String)
				If (Me._ShipCountry <> value) Then
					Me._ShipCountry = value
				End If
			End Set
		End Property
	End Class

	<Table(Name:="Product Sales for 1995")> _
	Partial Public Class ProductSalesFor1995

		Private _CategoryName As String

		Private _ProductName As String

		Private _ProductSales? As Decimal

		Public Sub New()
		End Sub

		<Column(Storage:="_CategoryName", DbType:="NVarChar(15)")> _
		Public Property CategoryName() As String
			Get
				Return Me._CategoryName
			End Get
			Set(ByVal value As String)
				If (Me._CategoryName <> value) Then
					Me._CategoryName = value
				End If
			End Set
		End Property

		<Column(Storage:="_ProductName", DbType:="NVarChar(40)")> _
		Public Property ProductName() As String
			Get
				Return Me._ProductName
			End Get
			Set(ByVal value As String)
				If (Me._ProductName <> value) Then
					Me._ProductName = value
				End If
			End Set
		End Property

		<Column(Storage:="_ProductSales", DbType:="Money")> _
		Public Property ProductSales() As Decimal?
			Get
				Return Me._ProductSales
			End Get
			Set(ByVal value? As Decimal)
				If (Not Me._ProductSales.Equals(value)) Then
					Me._ProductSales = value
				End If
			End Set
		End Property
	End Class

	<Table()> _
	Partial Public Class Products

		Private _ProductID As Integer

		Private _ProductName As String

		Private _SupplierID? As Integer

		Private _CategoryID? As Integer

		Private _QuantityPerUnit As String

		Private _UnitPrice? As Decimal

		Private _UnitsInStock? As Short

		Private _UnitsOnOrder? As Short

		Private _ReorderLevel? As Short

		Private _Discontinued As Boolean

		Public Sub New()
		End Sub

		<Column(Storage:="_ProductID", DbType:="Int NOT NULL")> _
		Public Property ProductID() As Integer
			Get
				Return Me._ProductID
			End Get
			Set(ByVal value As Integer)
				If (Me._ProductID <> value) Then
					Me._ProductID = value
				End If
			End Set
		End Property

		<Column(Storage:="_ProductName", DbType:="NVarChar(40) NOT NULL", CanBeNull:=False)> _
		Public Property ProductName() As String
			Get
				Return Me._ProductName
			End Get
			Set(ByVal value As String)
				If (Me._ProductName <> value) Then
					Me._ProductName = value
				End If
			End Set
		End Property

		<Column(Storage:="_SupplierID", DbType:="Int")> _
		Public Property SupplierID() As Integer?
			Get
				Return Me._SupplierID
			End Get
			Set(ByVal value? As Integer)
				If (Not Me._SupplierID.Equals(value)) Then
					Me._SupplierID = value
				End If
			End Set
		End Property

		<Column(Storage:="_CategoryID", DbType:="Int")> _
		Public Property CategoryID() As Integer?
			Get
				Return Me._CategoryID
			End Get
			Set(ByVal value? As Integer)
				If (Not Me._CategoryID.Equals(value)) Then
					Me._CategoryID = value
				End If
			End Set
		End Property

		<Column(Storage:="_QuantityPerUnit", DbType:="NVarChar(20)")> _
		Public Property QuantityPerUnit() As String
			Get
				Return Me._QuantityPerUnit
			End Get
			Set(ByVal value As String)
				If (Me._QuantityPerUnit <> value) Then
					Me._QuantityPerUnit = value
				End If
			End Set
		End Property

		<Column(Storage:="_UnitPrice", DbType:="Money")> _
		Public Property UnitPrice() As Decimal?
			Get
				Return Me._UnitPrice
			End Get
			Set(ByVal value? As Decimal)
				If (Not Me._UnitPrice.Equals(value)) Then
					Me._UnitPrice = value
				End If
			End Set
		End Property

		<Column(Storage:="_UnitsInStock", DbType:="SmallInt")> _
		Public Property UnitsInStock() As Short?
			Get
				Return Me._UnitsInStock
			End Get
			Set(ByVal value? As Short)
				If (Not Me._UnitsInStock.Equals(value)) Then
					Me._UnitsInStock = value
				End If
			End Set
		End Property

		<Column(Storage:="_UnitsOnOrder", DbType:="SmallInt")> _
		Public Property UnitsOnOrder() As Short?
			Get
				Return Me._UnitsOnOrder
			End Get
			Set(ByVal value? As Short)
				If (Not Me._UnitsOnOrder.Equals(value)) Then
					Me._UnitsOnOrder = value
				End If
			End Set
		End Property

		<Column(Storage:="_ReorderLevel", DbType:="SmallInt")> _
		Public Property ReorderLevel() As Short?
			Get
				Return Me._ReorderLevel
			End Get
			Set(ByVal value? As Short)
				If (Not Me._ReorderLevel.Equals(value)) Then
					Me._ReorderLevel = value
				End If
			End Set
		End Property

		<Column(Storage:="_Discontinued", DbType:="Bit NOT NULL")> _
		Public Property Discontinued() As Boolean
			Get
				Return Me._Discontinued
			End Get
			Set(ByVal value As Boolean)
				If (Me._Discontinued <> value) Then
					Me._Discontinued = value
				End If
			End Set
		End Property
	End Class

	<Table(Name:="Products Above Average Price")> _
	Partial Public Class ProductsAboveAveragePrice

		Private _ProductName As String

		Private _UnitPrice? As Decimal

		Public Sub New()
		End Sub

		<Column(Storage:="_ProductName", DbType:="NVarChar(40)")> _
		Public Property ProductName() As String
			Get
				Return Me._ProductName
			End Get
			Set(ByVal value As String)
				If (Me._ProductName <> value) Then
					Me._ProductName = value
				End If
			End Set
		End Property

		<Column(Storage:="_UnitPrice", DbType:="Money")> _
		Public Property UnitPrice() As Decimal?
			Get
				Return Me._UnitPrice
			End Get
			Set(ByVal value? As Decimal)
				If (Not Me._UnitPrice.Equals(value)) Then
					Me._UnitPrice = value
				End If
			End Set
		End Property
	End Class

	<Table(Name:="Quarterly Orders")> _
	Partial Public Class QuarterlyOrders

		Private _CustomerID As String

		Private _CompanyName As String

		Private _City As String

		Private _Country As String

		Public Sub New()
		End Sub

		<Column(Storage:="_CustomerID", DbType:="NVarChar(5)")> _
		Public Property CustomerID() As String
			Get
				Return Me._CustomerID
			End Get
			Set(ByVal value As String)
				If (Me._CustomerID <> value) Then
					Me._CustomerID = value
				End If
			End Set
		End Property

		<Column(Storage:="_CompanyName", DbType:="NVarChar(40)")> _
		Public Property CompanyName() As String
			Get
				Return Me._CompanyName
			End Get
			Set(ByVal value As String)
				If (Me._CompanyName <> value) Then
					Me._CompanyName = value
				End If
			End Set
		End Property

		<Column(Storage:="_City", DbType:="NVarChar(15)")> _
		Public Property City() As String
			Get
				Return Me._City
			End Get
			Set(ByVal value As String)
				If (Me._City <> value) Then
					Me._City = value
				End If
			End Set
		End Property

		<Column(Storage:="_Country", DbType:="NVarChar(15)")> _
		Public Property Country() As String
			Get
				Return Me._Country
			End Get
			Set(ByVal value As String)
				If (Me._Country <> value) Then
					Me._Country = value
				End If
			End Set
		End Property
	End Class

	<Table(Name:="Sales by Category")> _
	Partial Public Class SalesByCategory

		Private _CategoryID As Integer

		Private _CategoryName As String

		Private _ProductName As String

		Private _ProductSales? As Decimal

		Public Sub New()
		End Sub

		<Column(Storage:="_CategoryID", DbType:="Int NOT NULL")> _
		Public Property CategoryID() As Integer
			Get
				Return Me._CategoryID
			End Get
			Set(ByVal value As Integer)
				If (Me._CategoryID <> value) Then
					Me._CategoryID = value
				End If
			End Set
		End Property

		<Column(Storage:="_CategoryName", DbType:="NVarChar(15)")> _
		Public Property CategoryName() As String
			Get
				Return Me._CategoryName
			End Get
			Set(ByVal value As String)
				If (Me._CategoryName <> value) Then
					Me._CategoryName = value
				End If
			End Set
		End Property

		<Column(Storage:="_ProductName", DbType:="NVarChar(40)")> _
		Public Property ProductName() As String
			Get
				Return Me._ProductName
			End Get
			Set(ByVal value As String)
				If (Me._ProductName <> value) Then
					Me._ProductName = value
				End If
			End Set
		End Property

		<Column(Storage:="_ProductSales", DbType:="Money")> _
		Public Property ProductSales() As Decimal?
			Get
				Return Me._ProductSales
			End Get
			Set(ByVal value? As Decimal)
				If (Not Me._ProductSales.Equals(value)) Then
					Me._ProductSales = value
				End If
			End Set
		End Property
	End Class

	<Table()> _
	Partial Public Class Shippers

		Private _ShipperID As Integer

		Private _CompanyName As String

		Private _Phone As String

		Public Sub New()
		End Sub

		<Column(Storage:="_ShipperID", DbType:="Int NOT NULL")> _
		Public Property ShipperID() As Integer
			Get
				Return Me._ShipperID
			End Get
			Set(ByVal value As Integer)
				If (Me._ShipperID <> value) Then
					Me._ShipperID = value
				End If
			End Set
		End Property

		<Column(Storage:="_CompanyName", DbType:="NVarChar(40) NOT NULL", CanBeNull:=False)> _
		Public Property CompanyName() As String
			Get
				Return Me._CompanyName
			End Get
			Set(ByVal value As String)
				If (Me._CompanyName <> value) Then
					Me._CompanyName = value
				End If
			End Set
		End Property

		<Column(Storage:="_Phone", DbType:="NVarChar(24)")> _
		Public Property Phone() As String
			Get
				Return Me._Phone
			End Get
			Set(ByVal value As String)
				If (Me._Phone <> value) Then
					Me._Phone = value
				End If
			End Set
		End Property
	End Class

	<Table()> _
	Partial Public Class Suppliers

		Private _SupplierID As Integer

		Private _CompanyName As String

		Private _ContactName As String

		Private _ContactTitle As String

		Private _Address As String

		Private _City As String

		Private _Region As String

		Private _PostalCode As String

		Private _Country As String

		Private _Phone As String

		Private _Fax As String

		Private _HomePage As String

		Public Sub New()
		End Sub

		<Column(Storage:="_SupplierID", DbType:="Int NOT NULL")> _
		Public Property SupplierID() As Integer
			Get
				Return Me._SupplierID
			End Get
			Set(ByVal value As Integer)
				If (Me._SupplierID <> value) Then
					Me._SupplierID = value
				End If
			End Set
		End Property

		<Column(Storage:="_CompanyName", DbType:="NVarChar(40) NOT NULL", CanBeNull:=False)> _
		Public Property CompanyName() As String
			Get
				Return Me._CompanyName
			End Get
			Set(ByVal value As String)
				If (Me._CompanyName <> value) Then
					Me._CompanyName = value
				End If
			End Set
		End Property

		<Column(Storage:="_ContactName", DbType:="NVarChar(30)")> _
		Public Property ContactName() As String
			Get
				Return Me._ContactName
			End Get
			Set(ByVal value As String)
				If (Me._ContactName <> value) Then
					Me._ContactName = value
				End If
			End Set
		End Property

		<Column(Storage:="_ContactTitle", DbType:="NVarChar(30)")> _
		Public Property ContactTitle() As String
			Get
				Return Me._ContactTitle
			End Get
			Set(ByVal value As String)
				If (Me._ContactTitle <> value) Then
					Me._ContactTitle = value
				End If
			End Set
		End Property

		<Column(Storage:="_Address", DbType:="NVarChar(60)")> _
		Public Property Address() As String
			Get
				Return Me._Address
			End Get
			Set(ByVal value As String)
				If (Me._Address <> value) Then
					Me._Address = value
				End If
			End Set
		End Property

		<Column(Storage:="_City", DbType:="NVarChar(15)")> _
		Public Property City() As String
			Get
				Return Me._City
			End Get
			Set(ByVal value As String)
				If (Me._City <> value) Then
					Me._City = value
				End If
			End Set
		End Property

		<Column(Storage:="_Region", DbType:="NVarChar(15)")> _
		Public Property Region() As String
			Get
				Return Me._Region
			End Get
			Set(ByVal value As String)
				If (Me._Region <> value) Then
					Me._Region = value
				End If
			End Set
		End Property

		<Column(Storage:="_PostalCode", DbType:="NVarChar(10)")> _
		Public Property PostalCode() As String
			Get
				Return Me._PostalCode
			End Get
			Set(ByVal value As String)
				If (Me._PostalCode <> value) Then
					Me._PostalCode = value
				End If
			End Set
		End Property

		<Column(Storage:="_Country", DbType:="NVarChar(15)")> _
		Public Property Country() As String
			Get
				Return Me._Country
			End Get
			Set(ByVal value As String)
				If (Me._Country <> value) Then
					Me._Country = value
				End If
			End Set
		End Property

		<Column(Storage:="_Phone", DbType:="NVarChar(24)")> _
		Public Property Phone() As String
			Get
				Return Me._Phone
			End Get
			Set(ByVal value As String)
				If (Me._Phone <> value) Then
					Me._Phone = value
				End If
			End Set
		End Property

		<Column(Storage:="_Fax", DbType:="NVarChar(24)")> _
		Public Property Fax() As String
			Get
				Return Me._Fax
			End Get
			Set(ByVal value As String)
				If (Me._Fax <> value) Then
					Me._Fax = value
				End If
			End Set
		End Property

		<Column(Storage:="_HomePage", DbType:="NText", UpdateCheck:=UpdateCheck.Never)> _
		Public Property HomePage() As String
			Get
				Return Me._HomePage
			End Get
			Set(ByVal value As String)
				If (Me._HomePage <> value) Then
					Me._HomePage = value
				End If
			End Set
		End Property
	End Class

	<Table(Name:="Ten Most Expensive Products")> _
	Partial Public Class TenMostExpensiveProducts

		Private _TenMostExpensiveProducts1 As String

		Private _UnitPrice? As Decimal

		Public Sub New()
		End Sub

		<Column(Name:="TenMostExpensiveProducts", Storage:="_TenMostExpensiveProducts1", DbType:="NVarChar(40)")> _
		Public Property TenMostExpensiveProducts1() As String
			Get
				Return Me._TenMostExpensiveProducts1
			End Get
			Set(ByVal value As String)
				If (Me._TenMostExpensiveProducts1 <> value) Then
					Me._TenMostExpensiveProducts1 = value
				End If
			End Set
		End Property

		<Column(Storage:="_UnitPrice", DbType:="Money")> _
		Public Property UnitPrice() As Decimal?
			Get
				Return Me._UnitPrice
			End Get
			Set(ByVal value? As Decimal)
				If (Not Me._UnitPrice.Equals(value)) Then
					Me._UnitPrice = value
				End If
			End Set
		End Property
	End Class
End Namespace
'INSTANT VB TODO TASK: There is no equivalent to #pragma directives in VB.NET:
'#pragma warning restore 1591
