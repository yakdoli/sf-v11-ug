#Region "Copyright Syncfusion Inc. 2001 - 2013"
' Copyright Syncfusion Inc. 2001 - 2013. All rights reserved.
' Use of this code is subject to the terms of our license.
' A copy of the current license can be obtained at any time by e-mailing
' licensing@syncfusion.com. Any infringement will be prosecuted under
' applicable laws. 
#End Region

'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.42
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

'INSTANT VB TODO TASK: There is no equivalent to #pragma directives in VB.NET:
'#pragma warning disable 1591


Imports Microsoft.VisualBasic
Imports System

Namespace SummaryInCaption



	Partial Public Class DataSet1
		Inherits System.Data.DataSet

		Private tableOrders As OrdersDataTable

		Private _schemaSerializationMode As System.Data.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema


		Public Sub New()
			Me.BeginInit()
			Me.InitClass()
			Dim schemaChangedHandler As New System.ComponentModel.CollectionChangeEventHandler(AddressOf Me.SchemaChanged)
			AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
			AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
			Me.EndInit()
		End Sub


		Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
			MyBase.New(info, context, False)
			If (Me.IsBinarySerialized(info, context) = True) Then
				Me.InitVars(False)
				Dim schemaChangedHandler1 As New System.ComponentModel.CollectionChangeEventHandler(AddressOf Me.SchemaChanged)
				AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
				AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
				Return
			End If
			Dim strSchema As String = (CStr(info.GetValue("XmlSchema", GetType(String))))
			If (Me.DetermineSchemaSerializationMode(info, context) = System.Data.SchemaSerializationMode.IncludeSchema) Then
				Dim ds As New System.Data.DataSet()
				ds.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
				If (ds.Tables("Orders") IsNot Nothing) Then
					MyBase.Tables.Add(New OrdersDataTable(ds.Tables("Orders")))
				End If
				Me.DataSetName = ds.DataSetName
				Me.Prefix = ds.Prefix
				Me.Namespace = ds.Namespace
				Me.Locale = ds.Locale
				Me.CaseSensitive = ds.CaseSensitive
				Me.EnforceConstraints = ds.EnforceConstraints
				Me.Merge(ds, False, System.Data.MissingSchemaAction.Add)
				Me.InitVars()
			Else
				Me.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
			End If
			Me.GetSerializationData(info, context)
			Dim schemaChangedHandler As New System.ComponentModel.CollectionChangeEventHandler(AddressOf Me.SchemaChanged)
			AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
			AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
		End Sub


		Public ReadOnly Property Orders() As OrdersDataTable
			Get
				Return Me.tableOrders
			End Get
		End Property


		Public Overrides Property SchemaSerializationMode() As System.Data.SchemaSerializationMode
			Get
				Return Me._schemaSerializationMode
			End Get
			Set(ByVal value As System.Data.SchemaSerializationMode)
				Me._schemaSerializationMode = value
			End Set
		End Property

		Public Shadows ReadOnly Property Tables() As System.Data.DataTableCollection
			Get
				Return MyBase.Tables
			End Get
		End Property


		Public Shadows ReadOnly Property Relations() As System.Data.DataRelationCollection
			Get
				Return MyBase.Relations
			End Get
		End Property


		Protected Overrides Sub InitializeDerivedDataSet()
			Me.BeginInit()
			Me.InitClass()
			Me.EndInit()
		End Sub


		Public Overrides Function Clone() As System.Data.DataSet
			Dim cln As DataSet1 = (CType(MyBase.Clone(), DataSet1))
			cln.InitVars()
			cln.SchemaSerializationMode = Me.SchemaSerializationMode
			Return cln
		End Function

		Protected Overrides Function ShouldSerializeTables() As Boolean
			Return False
		End Function


		Protected Overrides Function ShouldSerializeRelations() As Boolean
			Return False
		End Function


		Protected Overrides Sub ReadXmlSerializable(ByVal reader As System.Xml.XmlReader)
			If (Me.DetermineSchemaSerializationMode(reader) = System.Data.SchemaSerializationMode.IncludeSchema) Then
				Me.Reset()
				Dim ds As New System.Data.DataSet()
				ds.ReadXml(reader)
				If (ds.Tables("Orders") IsNot Nothing) Then
					MyBase.Tables.Add(New OrdersDataTable(ds.Tables("Orders")))
				End If
				Me.DataSetName = ds.DataSetName
				Me.Prefix = ds.Prefix
				Me.Namespace = ds.Namespace
				Me.Locale = ds.Locale
				Me.CaseSensitive = ds.CaseSensitive
				Me.EnforceConstraints = ds.EnforceConstraints
				Me.Merge(ds, False, System.Data.MissingSchemaAction.Add)
				Me.InitVars()
			Else
				Me.ReadXml(reader)
				Me.InitVars()
			End If
		End Sub


		Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
			Dim stream As New System.IO.MemoryStream()
			Me.WriteXmlSchema(New System.Xml.XmlTextWriter(stream, Nothing))
			stream.Position = 0
			Return System.Xml.Schema.XmlSchema.Read(New System.Xml.XmlTextReader(stream), Nothing)
		End Function


		Friend Sub InitVars()
			Me.InitVars(True)
		End Sub


		Friend Sub InitVars(ByVal initTable As Boolean)
			Me.tableOrders = (CType(MyBase.Tables("Orders"), OrdersDataTable))
			If (initTable = True) Then
				If (Me.tableOrders IsNot Nothing) Then
					Me.tableOrders.InitVars()
				End If
			End If
		End Sub


		Private Sub InitClass()
			Me.DataSetName = "DataSet1"
			Me.Prefix = ""
			Me.Namespace = "http://www.tempuri.org/DataSet1.xsd"
			Me.EnforceConstraints = True
			Me.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
			Me.tableOrders = New OrdersDataTable()
			MyBase.Tables.Add(Me.tableOrders)
		End Sub


		Private Function ShouldSerializeOrders() As Boolean
			Return False
		End Function


		Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
			If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
				Me.InitVars()
			End If
		End Sub


		Public Shared Function GetTypedDataSetSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
			Dim ds As New DataSet1()
			Dim type As New System.Xml.Schema.XmlSchemaComplexType()
			Dim sequence As New System.Xml.Schema.XmlSchemaSequence()
			xs.Add(ds.GetSchemaSerializable())
			Dim any As New System.Xml.Schema.XmlSchemaAny()
			any.Namespace = ds.Namespace
			sequence.Items.Add(any)
			type.Particle = sequence
			Return type
		End Function

		Public Delegate Sub OrdersRowChangeEventHandler(ByVal sender As Object, ByVal e As OrdersRowChangeEvent)


		Partial Public Class OrdersDataTable
			Inherits System.Data.DataTable
			Implements System.Collections.IEnumerable

			Private columnOrderID As System.Data.DataColumn

			Private columnCustomerID As System.Data.DataColumn

			Private columnEmployeeID As System.Data.DataColumn

			Private columnOrderDate As System.Data.DataColumn

			Private columnRequiredDate As System.Data.DataColumn

			Private columnShippedDate As System.Data.DataColumn

			Private columnShipVia As System.Data.DataColumn

			Private columnFreight As System.Data.DataColumn

			Private columnShipName As System.Data.DataColumn

			Private columnShipAddress As System.Data.DataColumn

			Private columnShipCity As System.Data.DataColumn

			Private columnShipRegion As System.Data.DataColumn

			Private columnShipPostalCode As System.Data.DataColumn

			Private columnShipCountry As System.Data.DataColumn


			Public Sub New()
				Me.TableName = "Orders"
				Me.BeginInit()
				Me.InitClass()
				Me.EndInit()
			End Sub


			Friend Sub New(ByVal table As System.Data.DataTable)
				Me.TableName = table.TableName
				If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
					Me.CaseSensitive = table.CaseSensitive
				End If
				If (table.Locale.ToString() <> table.DataSet.Locale.ToString()) Then
					Me.Locale = table.Locale
				End If
				If (table.Namespace <> table.DataSet.Namespace) Then
					Me.Namespace = table.Namespace
				End If
				Me.Prefix = table.Prefix
				Me.MinimumCapacity = table.MinimumCapacity
			End Sub


			Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
				MyBase.New(info, context)
				Me.InitVars()
			End Sub


			Public ReadOnly Property OrderIDColumn() As System.Data.DataColumn
				Get
					Return Me.columnOrderID
				End Get
			End Property


			Public ReadOnly Property CustomerIDColumn() As System.Data.DataColumn
				Get
					Return Me.columnCustomerID
				End Get
			End Property


			Public ReadOnly Property EmployeeIDColumn() As System.Data.DataColumn
				Get
					Return Me.columnEmployeeID
				End Get
			End Property


			Public ReadOnly Property OrderDateColumn() As System.Data.DataColumn
				Get
					Return Me.columnOrderDate
				End Get
			End Property


			Public ReadOnly Property RequiredDateColumn() As System.Data.DataColumn
				Get
					Return Me.columnRequiredDate
				End Get
			End Property


			Public ReadOnly Property ShippedDateColumn() As System.Data.DataColumn
				Get
					Return Me.columnShippedDate
				End Get
			End Property


			Public ReadOnly Property ShipViaColumn() As System.Data.DataColumn
				Get
					Return Me.columnShipVia
				End Get
			End Property


			Public ReadOnly Property FreightColumn() As System.Data.DataColumn
				Get
					Return Me.columnFreight
				End Get
			End Property


			Public ReadOnly Property ShipNameColumn() As System.Data.DataColumn
				Get
					Return Me.columnShipName
				End Get
			End Property


			Public ReadOnly Property ShipAddressColumn() As System.Data.DataColumn
				Get
					Return Me.columnShipAddress
				End Get
			End Property


			Public ReadOnly Property ShipCityColumn() As System.Data.DataColumn
				Get
					Return Me.columnShipCity
				End Get
			End Property


			Public ReadOnly Property ShipRegionColumn() As System.Data.DataColumn
				Get
					Return Me.columnShipRegion
				End Get
			End Property


			Public ReadOnly Property ShipPostalCodeColumn() As System.Data.DataColumn
				Get
					Return Me.columnShipPostalCode
				End Get
			End Property

            Public ReadOnly Property ShipCountryColumn() As System.Data.DataColumn
                Get
                    Return Me.columnShipCountry
                End Get
            End Property


			Public ReadOnly Property Count() As Integer
				Get
					Return Me.Rows.Count
				End Get
			End Property


			Default Public ReadOnly Property Item(ByVal index As Integer) As OrdersRow
				Get
					Return (CType(Me.Rows(index), OrdersRow))
				End Get
			End Property

			Public Event OrdersRowChanging As OrdersRowChangeEventHandler

			Public Event OrdersRowChanged As OrdersRowChangeEventHandler

			Public Event OrdersRowDeleting As OrdersRowChangeEventHandler

			Public Event OrdersRowDeleted As OrdersRowChangeEventHandler


			Public Sub AddOrdersRow(ByVal row As OrdersRow)
				Me.Rows.Add(row)
			End Sub

            Public Function AddOrdersRow(ByVal CustomerID As String, ByVal EmployeeID As Integer, ByVal OrderDate As System.DateTime, ByVal RequiredDate As System.DateTime, ByVal ShippedDate As System.DateTime, ByVal ShipVia As Integer, ByVal Freight As Decimal, ByVal ShipName As String, ByVal ShipAddress As String, ByVal ShipCity As String, ByVal ShipRegion As String, ByVal ShipPostalCode As String, ByVal ShipCountry As String) As OrdersRow
                Dim rowOrdersRow As OrdersRow = (CType(Me.NewRow(), OrdersRow))
                rowOrdersRow.ItemArray = New Object() {Nothing, CustomerID, EmployeeID, OrderDate, RequiredDate, ShippedDate, ShipVia, Freight, ShipName, ShipAddress, ShipCity, ShipRegion, ShipPostalCode, ShipCountry}
                Me.Rows.Add(rowOrdersRow)
                Return rowOrdersRow
            End Function


			Public Function FindByOrderID(ByVal OrderID As Integer) As OrdersRow
				Return (CType(Me.Rows.Find(New Object() { OrderID}), OrdersRow))
			End Function


			Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
				Return Me.Rows.GetEnumerator()
			End Function


			Public Overrides Function Clone() As System.Data.DataTable
				Dim cln As OrdersDataTable = (CType(MyBase.Clone(), OrdersDataTable))
				cln.InitVars()
				Return cln
			End Function


			Protected Overrides Function CreateInstance() As System.Data.DataTable
				Return New OrdersDataTable()
			End Function


			Friend Sub InitVars()
				Me.columnOrderID = MyBase.Columns("OrderID")
				Me.columnCustomerID = MyBase.Columns("CustomerID")
				Me.columnEmployeeID = MyBase.Columns("EmployeeID")
				Me.columnOrderDate = MyBase.Columns("OrderDate")
				Me.columnRequiredDate = MyBase.Columns("RequiredDate")
				Me.columnShippedDate = MyBase.Columns("ShippedDate")
				Me.columnShipVia = MyBase.Columns("ShipVia")
				Me.columnFreight = MyBase.Columns("Freight")
				Me.columnShipName = MyBase.Columns("ShipName")
				Me.columnShipAddress = MyBase.Columns("ShipAddress")
				Me.columnShipCity = MyBase.Columns("ShipCity")
				Me.columnShipRegion = MyBase.Columns("ShipRegion")
				Me.columnShipPostalCode = MyBase.Columns("ShipPostalCode")
				Me.columnShipCountry = MyBase.Columns("ShipCountry")
			End Sub


			Private Sub InitClass()
				Me.columnOrderID = New System.Data.DataColumn("OrderID", GetType(Integer), Nothing, System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnOrderID)
				Me.columnCustomerID = New System.Data.DataColumn("CustomerID", GetType(String), Nothing, System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnCustomerID)
				Me.columnEmployeeID = New System.Data.DataColumn("EmployeeID", GetType(Integer), Nothing, System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnEmployeeID)
				Me.columnOrderDate = New System.Data.DataColumn("OrderDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnOrderDate)
				Me.columnRequiredDate = New System.Data.DataColumn("RequiredDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnRequiredDate)
				Me.columnShippedDate = New System.Data.DataColumn("ShippedDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnShippedDate)
				Me.columnShipVia = New System.Data.DataColumn("ShipVia", GetType(Integer), Nothing, System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnShipVia)
				Me.columnFreight = New System.Data.DataColumn("Freight", GetType(Decimal), Nothing, System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnFreight)
				Me.columnShipName = New System.Data.DataColumn("ShipName", GetType(String), Nothing, System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnShipName)
				Me.columnShipAddress = New System.Data.DataColumn("ShipAddress", GetType(String), Nothing, System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnShipAddress)
				Me.columnShipCity = New System.Data.DataColumn("ShipCity", GetType(String), Nothing, System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnShipCity)
				Me.columnShipRegion = New System.Data.DataColumn("ShipRegion", GetType(String), Nothing, System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnShipRegion)
				Me.columnShipPostalCode = New System.Data.DataColumn("ShipPostalCode", GetType(String), Nothing, System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnShipPostalCode)
				Me.columnShipCountry = New System.Data.DataColumn("ShipCountry", GetType(String), Nothing, System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnShipCountry)
				Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() { Me.columnOrderID}, True))
				Me.columnOrderID.AutoIncrement = True
				Me.columnOrderID.AllowDBNull = False
				Me.columnOrderID.ReadOnly = True
				Me.columnOrderID.Unique = True
			End Sub


			Public Function NewOrdersRow() As OrdersRow
				Return (CType(Me.NewRow(), OrdersRow))
			End Function


			Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
				Return New OrdersRow(builder)
			End Function


			Protected Overrides Function GetRowType() As System.Type
				Return GetType(OrdersRow)
			End Function


			Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
				MyBase.OnRowChanged(e)
				If (Me.OrdersRowChangedEvent IsNot Nothing) Then
					RaiseEvent OrdersRowChanged(Me, New OrdersRowChangeEvent((CType(e.Row, OrdersRow)), e.Action))
				End If
			End Sub


			Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
				MyBase.OnRowChanging(e)
				If (Me.OrdersRowChangingEvent IsNot Nothing) Then
					RaiseEvent OrdersRowChanging(Me, New OrdersRowChangeEvent((CType(e.Row, OrdersRow)), e.Action))
				End If
			End Sub


			Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
				MyBase.OnRowDeleted(e)
				If (Me.OrdersRowDeletedEvent IsNot Nothing) Then
					RaiseEvent OrdersRowDeleted(Me, New OrdersRowChangeEvent((CType(e.Row, OrdersRow)), e.Action))
				End If
			End Sub


			Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
				MyBase.OnRowDeleting(e)
				If (Me.OrdersRowDeletingEvent IsNot Nothing) Then
					RaiseEvent OrdersRowDeleting(Me, New OrdersRowChangeEvent((CType(e.Row, OrdersRow)), e.Action))
				End If
			End Sub


			Public Sub RemoveOrdersRow(ByVal row As OrdersRow)
				Me.Rows.Remove(row)
			End Sub


			Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
				Dim type As New System.Xml.Schema.XmlSchemaComplexType()
				Dim sequence As New System.Xml.Schema.XmlSchemaSequence()
				Dim ds As New DataSet1()
				xs.Add(ds.GetSchemaSerializable())
				Dim any1 As New System.Xml.Schema.XmlSchemaAny()
				any1.Namespace = "http://www.w3.org/2001/XMLSchema"
				any1.MinOccurs = New Decimal(0)
				any1.MaxOccurs = Decimal.MaxValue
				any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
				sequence.Items.Add(any1)
				Dim any2 As New System.Xml.Schema.XmlSchemaAny()
				any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
				any2.MinOccurs = New Decimal(1)
				any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
				sequence.Items.Add(any2)
				Dim attribute1 As New System.Xml.Schema.XmlSchemaAttribute()
				attribute1.Name = "namespace"
				attribute1.FixedValue = ds.Namespace
				type.Attributes.Add(attribute1)
				Dim attribute2 As New System.Xml.Schema.XmlSchemaAttribute()
				attribute2.Name = "tableTypeName"
				attribute2.FixedValue = "OrdersDataTable"
				type.Attributes.Add(attribute2)
				type.Particle = sequence
				Return type
			End Function
		End Class


		Partial Public Class OrdersRow
			Inherits System.Data.DataRow

			Private tableOrders As OrdersDataTable


			Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
				MyBase.New(rb)
				Me.tableOrders = (CType(Me.Table, OrdersDataTable))
			End Sub


			Public Property OrderID() As Integer
				Get
					Return (CInt(Fix(Me(Me.tableOrders.OrderIDColumn))))
				End Get
				Set(ByVal value As Integer)
					Me(Me.tableOrders.OrderIDColumn) = value
				End Set
			End Property


			Public Property CustomerID() As String
				Get
					Try
						Return (CStr(Me(Me.tableOrders.CustomerIDColumn)))
					Catch e As System.InvalidCastException
						Throw New System.Data.StrongTypingException("The value for column 'CustomerID' in table 'Orders' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As String)
					Me(Me.tableOrders.CustomerIDColumn) = value
				End Set
			End Property

			Public Property EmployeeID() As Integer
				Get
					Try
						Return (CInt(Fix(Me(Me.tableOrders.EmployeeIDColumn))))
					Catch e As System.InvalidCastException
						Throw New System.Data.StrongTypingException("The value for column 'EmployeeID' in table 'Orders' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As Integer)
					Me(Me.tableOrders.EmployeeIDColumn) = value
				End Set
			End Property


			Public Property OrderDate() As System.DateTime
				Get
					Try
						Return (CDate(Me(Me.tableOrders.OrderDateColumn)))
					Catch e As System.InvalidCastException
						Throw New System.Data.StrongTypingException("The value for column 'OrderDate' in table 'Orders' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As System.DateTime)
					Me(Me.tableOrders.OrderDateColumn) = value
				End Set
			End Property


			Public Property RequiredDate() As System.DateTime
				Get
					Try
						Return (CDate(Me(Me.tableOrders.RequiredDateColumn)))
					Catch e As System.InvalidCastException
						Throw New System.Data.StrongTypingException("The value for column 'RequiredDate' in table 'Orders' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As System.DateTime)
					Me(Me.tableOrders.RequiredDateColumn) = value
				End Set
			End Property


			Public Property ShippedDate() As System.DateTime
				Get
					Try
						Return (CDate(Me(Me.tableOrders.ShippedDateColumn)))
					Catch e As System.InvalidCastException
						Throw New System.Data.StrongTypingException("The value for column 'ShippedDate' in table 'Orders' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As System.DateTime)
					Me(Me.tableOrders.ShippedDateColumn) = value
				End Set
			End Property


			Public Property ShipVia() As Integer
				Get
					Try
						Return (CInt(Fix(Me(Me.tableOrders.ShipViaColumn))))
					Catch e As System.InvalidCastException
						Throw New System.Data.StrongTypingException("The value for column 'ShipVia' in table 'Orders' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As Integer)
					Me(Me.tableOrders.ShipViaColumn) = value
				End Set
			End Property


			Public Property Freight() As Decimal
				Get
					Try
						Return (CDec(Me(Me.tableOrders.FreightColumn)))
					Catch e As System.InvalidCastException
						Throw New System.Data.StrongTypingException("The value for column 'Freight' in table 'Orders' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As Decimal)
					Me(Me.tableOrders.FreightColumn) = value
				End Set
			End Property


			Public Property ShipName() As String
				Get
					Try
						Return (CStr(Me(Me.tableOrders.ShipNameColumn)))
					Catch e As System.InvalidCastException
						Throw New System.Data.StrongTypingException("The value for column 'ShipName' in table 'Orders' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As String)
					Me(Me.tableOrders.ShipNameColumn) = value
				End Set
			End Property


			Public Property ShipAddress() As String
				Get
					Try
						Return (CStr(Me(Me.tableOrders.ShipAddressColumn)))
					Catch e As System.InvalidCastException
						Throw New System.Data.StrongTypingException("The value for column 'ShipAddress' in table 'Orders' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As String)
					Me(Me.tableOrders.ShipAddressColumn) = value
				End Set
			End Property


			Public Property ShipCity() As String
				Get
					Try
						Return (CStr(Me(Me.tableOrders.ShipCityColumn)))
					Catch e As System.InvalidCastException
						Throw New System.Data.StrongTypingException("The value for column 'ShipCity' in table 'Orders' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As String)
					Me(Me.tableOrders.ShipCityColumn) = value
				End Set
			End Property


			Public Property ShipRegion() As String
				Get
					Try
						Return (CStr(Me(Me.tableOrders.ShipRegionColumn)))
					Catch e As System.InvalidCastException
						Throw New System.Data.StrongTypingException("The value for column 'ShipRegion' in table 'Orders' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As String)
					Me(Me.tableOrders.ShipRegionColumn) = value
				End Set
			End Property


			Public Property ShipPostalCode() As String
				Get
					Try
						Return (CStr(Me(Me.tableOrders.ShipPostalCodeColumn)))
					Catch e As System.InvalidCastException
						Throw New System.Data.StrongTypingException("The value for column 'ShipPostalCode' in table 'Orders' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As String)
					Me(Me.tableOrders.ShipPostalCodeColumn) = value
				End Set
			End Property


			Public Property ShipCountry() As String
				Get
					Try
						Return (CStr(Me(Me.tableOrders.ShipCountryColumn)))
					Catch e As System.InvalidCastException
						Throw New System.Data.StrongTypingException("The value for column 'ShipCountry' in table 'Orders' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As String)
					Me(Me.tableOrders.ShipCountryColumn) = value
				End Set
			End Property


			Public Function IsCustomerIDNull() As Boolean
				Return Me.IsNull(Me.tableOrders.CustomerIDColumn)
			End Function


			Public Sub SetCustomerIDNull()
				Me(Me.tableOrders.CustomerIDColumn) = System.Convert.DBNull
			End Sub


			Public Function IsEmployeeIDNull() As Boolean
				Return Me.IsNull(Me.tableOrders.EmployeeIDColumn)
			End Function


			Public Sub SetEmployeeIDNull()
				Me(Me.tableOrders.EmployeeIDColumn) = System.Convert.DBNull
			End Sub


			Public Function IsOrderDateNull() As Boolean
				Return Me.IsNull(Me.tableOrders.OrderDateColumn)
			End Function

			Public Sub SetOrderDateNull()
				Me(Me.tableOrders.OrderDateColumn) = System.Convert.DBNull
			End Sub


			Public Function IsRequiredDateNull() As Boolean
				Return Me.IsNull(Me.tableOrders.RequiredDateColumn)
			End Function


			Public Sub SetRequiredDateNull()
				Me(Me.tableOrders.RequiredDateColumn) = System.Convert.DBNull
			End Sub


			Public Function IsShippedDateNull() As Boolean
				Return Me.IsNull(Me.tableOrders.ShippedDateColumn)
			End Function


			Public Sub SetShippedDateNull()
				Me(Me.tableOrders.ShippedDateColumn) = System.Convert.DBNull
			End Sub


			Public Function IsShipViaNull() As Boolean
				Return Me.IsNull(Me.tableOrders.ShipViaColumn)
			End Function


			Public Sub SetShipViaNull()
				Me(Me.tableOrders.ShipViaColumn) = System.Convert.DBNull
			End Sub


			Public Function IsFreightNull() As Boolean
				Return Me.IsNull(Me.tableOrders.FreightColumn)
			End Function


			Public Sub SetFreightNull()
				Me(Me.tableOrders.FreightColumn) = System.Convert.DBNull
			End Sub


			Public Function IsShipNameNull() As Boolean
				Return Me.IsNull(Me.tableOrders.ShipNameColumn)
			End Function


			Public Sub SetShipNameNull()
				Me(Me.tableOrders.ShipNameColumn) = System.Convert.DBNull
			End Sub


			Public Function IsShipAddressNull() As Boolean
				Return Me.IsNull(Me.tableOrders.ShipAddressColumn)
			End Function


			Public Sub SetShipAddressNull()
				Me(Me.tableOrders.ShipAddressColumn) = System.Convert.DBNull
			End Sub


			Public Function IsShipCityNull() As Boolean
				Return Me.IsNull(Me.tableOrders.ShipCityColumn)
			End Function


			Public Sub SetShipCityNull()
				Me(Me.tableOrders.ShipCityColumn) = System.Convert.DBNull
			End Sub


			Public Function IsShipRegionNull() As Boolean
				Return Me.IsNull(Me.tableOrders.ShipRegionColumn)
			End Function


			Public Sub SetShipRegionNull()
				Me(Me.tableOrders.ShipRegionColumn) = System.Convert.DBNull
			End Sub


			Public Function IsShipPostalCodeNull() As Boolean
				Return Me.IsNull(Me.tableOrders.ShipPostalCodeColumn)
			End Function


			Public Sub SetShipPostalCodeNull()
				Me(Me.tableOrders.ShipPostalCodeColumn) = System.Convert.DBNull
			End Sub


			Public Function IsShipCountryNull() As Boolean
				Return Me.IsNull(Me.tableOrders.ShipCountryColumn)
			End Function


			Public Sub SetShipCountryNull()
				Me(Me.tableOrders.ShipCountryColumn) = System.Convert.DBNull
			End Sub
		End Class


		Public Class OrdersRowChangeEvent
			Inherits System.EventArgs

			Private eventRow As OrdersRow

			Private eventAction As System.Data.DataRowAction

			Public Sub New(ByVal row As OrdersRow, ByVal action As System.Data.DataRowAction)
				Me.eventRow = row
				Me.eventAction = action
			End Sub


			Public ReadOnly Property Row() As OrdersRow
				Get
					Return Me.eventRow
				End Get
			End Property


			Public ReadOnly Property Action() As System.Data.DataRowAction
				Get
					Return Me.eventAction
				End Get
			End Property
		End Class
	End Class
End Namespace

'INSTANT VB TODO TASK: There is no equivalent to #pragma directives in VB.NET:
'#pragma warning restore 1591