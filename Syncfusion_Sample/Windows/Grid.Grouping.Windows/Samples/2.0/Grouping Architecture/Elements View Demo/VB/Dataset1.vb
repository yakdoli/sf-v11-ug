#Region "Copyright Syncfusion Inc. 2001 - 2013"
' Copyright Syncfusion Inc. 2001 - 2013. All rights reserved.
' Use of this code is subject to the terms of our license.
' A copy of the current license can be obtained at any time by e-mailing
' licensing@syncfusion.com. Any infringement will be prosecuted under
' applicable laws. 
#End Region

'------------------------------------------------------------------------------
' <autogenerated>
'	 This code was generated by a tool.
'	 Runtime Version: 1.1.4322.2032
'
'	 Changes to this file may cause incorrect behavior and will be lost if 
'	 the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

	Imports System
	Imports System.Data
	Imports System.Xml
	Imports System.Runtime.Serialization
Namespace GroupingEngineEventsTracer


	<Serializable(), System.ComponentModel.DesignerCategoryAttribute("code"), System.Diagnostics.DebuggerStepThrough(), System.ComponentModel.ToolboxItem(True)> _
	Public Class Dataset1 : Inherits DataSet

		Private tableEmployees As EmployeesDataTable

		Private tableOrders As OrdersDataTable

		Private relationEmployeesOrders As DataRelation

		Public Sub New()
			Me.InitClass()
			Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = New System.ComponentModel.CollectionChangeEventHandler(AddressOf Me.SchemaChanged)
			AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
			AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
		End Sub

		Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
			Dim strSchema As String = (CStr(info.GetValue("XmlSchema", GetType(String))))
			If (Not strSchema Is Nothing) Then
				Dim ds As DataSet = New DataSet()
				ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
				If (Not ds.Tables("Employees") Is Nothing) Then
					Me.Tables.Add(New EmployeesDataTable(ds.Tables("Employees")))
				End If
				If (Not ds.Tables("Orders") Is Nothing) Then
					Me.Tables.Add(New OrdersDataTable(ds.Tables("Orders")))
				End If
				Me.DataSetName = ds.DataSetName
				Me.Prefix = ds.Prefix
				Me.Namespace = ds.Namespace
				Me.Locale = ds.Locale
				Me.CaseSensitive = ds.CaseSensitive
				Me.EnforceConstraints = ds.EnforceConstraints
				Me.Merge(ds, False, System.Data.MissingSchemaAction.Add)
				Me.InitVars()
			Else
				Me.InitClass()
			End If
			Me.GetSerializationData(info, context)
			Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = New System.ComponentModel.CollectionChangeEventHandler(AddressOf Me.SchemaChanged)
			AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
			AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
		End Sub

		<System.ComponentModel.Browsable(False), System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)> _
		Public ReadOnly Property Employees() As EmployeesDataTable
			Get
				Return Me.tableEmployees
			End Get
		End Property

		<System.ComponentModel.Browsable(False), System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)> _
		Public ReadOnly Property Orders() As OrdersDataTable
			Get
				Return Me.tableOrders
			End Get
		End Property

		Public Overrides Function Clone() As DataSet
			Dim cln As Dataset1 = (CType(MyBase.Clone(), Dataset1))
			cln.InitVars()
			Return cln
		End Function

		Protected Overrides Function ShouldSerializeTables() As Boolean
			Return False
		End Function

		Protected Overrides Function ShouldSerializeRelations() As Boolean
			Return False
		End Function

		Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
			Me.Reset()
			Dim ds As DataSet = New DataSet()
			ds.ReadXml(reader)
			If (Not ds.Tables("Employees") Is Nothing) Then
				Me.Tables.Add(New EmployeesDataTable(ds.Tables("Employees")))
			End If
			If (Not ds.Tables("Orders") Is Nothing) Then
				Me.Tables.Add(New OrdersDataTable(ds.Tables("Orders")))
			End If
			Me.DataSetName = ds.DataSetName
			Me.Prefix = ds.Prefix
			Me.Namespace = ds.Namespace
			Me.Locale = ds.Locale
			Me.CaseSensitive = ds.CaseSensitive
			Me.EnforceConstraints = ds.EnforceConstraints
			Me.Merge(ds, False, System.Data.MissingSchemaAction.Add)
			Me.InitVars()
		End Sub

		Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
			Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream()
			Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
			stream.Position = 0
			Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
		End Function

		Friend Sub InitVars()
			Me.tableEmployees = (CType(Me.Tables("Employees"), EmployeesDataTable))
			If (Not Me.tableEmployees Is Nothing) Then
				Me.tableEmployees.InitVars()
			End If
			Me.tableOrders = (CType(Me.Tables("Orders"), OrdersDataTable))
			If (Not Me.tableOrders Is Nothing) Then
				Me.tableOrders.InitVars()
			End If
			Me.relationEmployeesOrders = Me.Relations("EmployeesOrders")
		End Sub

		Private Sub InitClass()
			Me.DataSetName = "Dataset1"
			Me.Prefix = ""
			Me.Namespace = "http://tempuri.org/Dataset1.xsd"
			Me.Locale = New System.Globalization.CultureInfo("en-US")
			Me.CaseSensitive = False
			Me.EnforceConstraints = True
			Me.tableEmployees = New EmployeesDataTable()
			Me.Tables.Add(Me.tableEmployees)
			Me.tableOrders = New OrdersDataTable()
			Me.Tables.Add(Me.tableOrders)
			Dim fkc As ForeignKeyConstraint
			fkc = New ForeignKeyConstraint("EmployeesOrders", New DataColumn() { Me.tableEmployees.EmployeeIDColumn}, New DataColumn() { Me.tableOrders.EmployeeIDColumn})
			Me.tableOrders.Constraints.Add(fkc)
			fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
			fkc.DeleteRule = System.Data.Rule.Cascade
			fkc.UpdateRule = System.Data.Rule.Cascade
			Me.relationEmployeesOrders = New DataRelation("EmployeesOrders", New DataColumn() { Me.tableEmployees.EmployeeIDColumn}, New DataColumn() { Me.tableOrders.EmployeeIDColumn}, False)
			Me.Relations.Add(Me.relationEmployeesOrders)
		End Sub

		Private Function ShouldSerializeEmployees() As Boolean
			Return False
		End Function

		Private Function ShouldSerializeOrders() As Boolean
			Return False
		End Function

		Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
			If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
				Me.InitVars()
			End If
		End Sub

		Public Delegate Sub EmployeesRowChangeEventHandler(ByVal sender As Object, ByVal e As EmployeesRowChangeEvent)

		Public Delegate Sub OrdersRowChangeEventHandler(ByVal sender As Object, ByVal e As OrdersRowChangeEvent)

		<System.Diagnostics.DebuggerStepThrough()> _
		Public Class EmployeesDataTable : Inherits DataTable : Implements System.Collections.IEnumerable

			Private columnEmployeeID As DataColumn

			Private columnLastName As DataColumn

			Private columnFirstName As DataColumn

			Private columnTitle As DataColumn

			Private columnTitleOfCourtesy As DataColumn

			Private columnBirthDate As DataColumn

			Private columnHireDate As DataColumn

			Private columnAddress As DataColumn

			Private columnCity As DataColumn

			Private columnRegion As DataColumn

			Private columnPostalCode As DataColumn

			Private columnCountry As DataColumn

			Private columnHomePhone As DataColumn

			Private columnExtension As DataColumn

			Private columnPhoto As DataColumn

			Private columnNotes As DataColumn

			Private columnReportsTo As DataColumn

			Private columnPhotoPath As DataColumn

			Friend Sub New()
				MyBase.New("Employees")
				Me.InitClass()
			End Sub

			Friend Sub New(ByVal table As DataTable)
				MyBase.New(table.TableName)
				If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
					Me.CaseSensitive = table.CaseSensitive
				End If
				If (table.Locale.ToString() <> table.DataSet.Locale.ToString()) Then
					Me.Locale = table.Locale
				End If
				If (table.Namespace <> table.DataSet.Namespace) Then
					Me.Namespace = table.Namespace
				End If
				Me.Prefix = table.Prefix
				Me.MinimumCapacity = table.MinimumCapacity
				Me.DisplayExpression = table.DisplayExpression
			End Sub

			<System.ComponentModel.Browsable(False)> _
			Public ReadOnly Property Count() As Integer
				Get
					Return Me.Rows.Count
				End Get
			End Property

			Friend ReadOnly Property EmployeeIDColumn() As DataColumn
				Get
					Return Me.columnEmployeeID
				End Get
			End Property

			Friend ReadOnly Property LastNameColumn() As DataColumn
				Get
					Return Me.columnLastName
				End Get
			End Property

			Friend ReadOnly Property FirstNameColumn() As DataColumn
				Get
					Return Me.columnFirstName
				End Get
			End Property

			Friend ReadOnly Property TitleColumn() As DataColumn
				Get
					Return Me.columnTitle
				End Get
			End Property

			Friend ReadOnly Property TitleOfCourtesyColumn() As DataColumn
				Get
					Return Me.columnTitleOfCourtesy
				End Get
			End Property

			Friend ReadOnly Property BirthDateColumn() As DataColumn
				Get
					Return Me.columnBirthDate
				End Get
			End Property

			Friend ReadOnly Property HireDateColumn() As DataColumn
				Get
					Return Me.columnHireDate
				End Get
			End Property

			Friend ReadOnly Property AddressColumn() As DataColumn
				Get
					Return Me.columnAddress
				End Get
			End Property

			Friend ReadOnly Property CityColumn() As DataColumn
				Get
					Return Me.columnCity
				End Get
			End Property

			Friend ReadOnly Property RegionColumn() As DataColumn
				Get
					Return Me.columnRegion
				End Get
			End Property

			Friend ReadOnly Property PostalCodeColumn() As DataColumn
				Get
					Return Me.columnPostalCode
				End Get
			End Property

			Friend ReadOnly Property CountryColumn() As DataColumn
				Get
					Return Me.columnCountry
				End Get
			End Property

			Friend ReadOnly Property HomePhoneColumn() As DataColumn
				Get
					Return Me.columnHomePhone
				End Get
			End Property

			Friend ReadOnly Property ExtensionColumn() As DataColumn
				Get
					Return Me.columnExtension
				End Get
			End Property

			Friend ReadOnly Property PhotoColumn() As DataColumn
				Get
					Return Me.columnPhoto
				End Get
			End Property

			Friend ReadOnly Property NotesColumn() As DataColumn
				Get
					Return Me.columnNotes
				End Get
			End Property

			Friend ReadOnly Property ReportsToColumn() As DataColumn
				Get
					Return Me.columnReportsTo
				End Get
			End Property

			Friend ReadOnly Property PhotoPathColumn() As DataColumn
				Get
					Return Me.columnPhotoPath
				End Get
			End Property

			Public ReadOnly Default Property Item(ByVal index As Integer) As EmployeesRow
				Get
					Return (CType(Me.Rows(index), EmployeesRow))
				End Get
			End Property

			Public Event EmployeesRowChanged As EmployeesRowChangeEventHandler

			Public Event EmployeesRowChanging As EmployeesRowChangeEventHandler

			Public Event EmployeesRowDeleted As EmployeesRowChangeEventHandler

			Public Event EmployeesRowDeleting As EmployeesRowChangeEventHandler

			Public Sub AddEmployeesRow(ByVal row As EmployeesRow)
				Me.Rows.Add(row)
			End Sub

			Public Function AddEmployeesRow(ByVal LastName As String, ByVal FirstName As String, ByVal Title As String, ByVal TitleOfCourtesy As String, ByVal BirthDate As System.DateTime, ByVal HireDate As System.DateTime, ByVal Address As String, ByVal City As String, ByVal Region As String, ByVal PostalCode As String, ByVal Country As String, ByVal HomePhone As String, ByVal Extension As String, ByVal Photo As System.Byte(), ByVal Notes As String, ByVal ReportsTo As Integer, ByVal PhotoPath As String) As EmployeesRow
				Dim rowEmployeesRow As EmployeesRow = (CType(Me.NewRow(), EmployeesRow))
				rowEmployeesRow.ItemArray = New Object() { Nothing, LastName, FirstName, Title, TitleOfCourtesy, BirthDate, HireDate, Address, City, Region, PostalCode, Country, HomePhone, Extension, Photo, Notes, ReportsTo, PhotoPath}
				Me.Rows.Add(rowEmployeesRow)
				Return rowEmployeesRow
			End Function

			Public Function FindByEmployeeID(ByVal EmployeeID As Integer) As EmployeesRow
				Return (CType(Me.Rows.Find(New Object() { EmployeeID}), EmployeesRow))
			End Function

			Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
				Return Me.Rows.GetEnumerator()
			End Function

			Public Overrides Function Clone() As DataTable
				Dim cln As EmployeesDataTable = (CType(MyBase.Clone(), EmployeesDataTable))
				cln.InitVars()
				Return cln
			End Function

			Protected Overrides Function CreateInstance() As DataTable
				Return New EmployeesDataTable()
			End Function

			Friend Sub InitVars()
				Me.columnEmployeeID = Me.Columns("EmployeeID")
				Me.columnLastName = Me.Columns("LastName")
				Me.columnFirstName = Me.Columns("FirstName")
				Me.columnTitle = Me.Columns("Title")
				Me.columnTitleOfCourtesy = Me.Columns("TitleOfCourtesy")
				Me.columnBirthDate = Me.Columns("BirthDate")
				Me.columnHireDate = Me.Columns("HireDate")
				Me.columnAddress = Me.Columns("Address")
				Me.columnCity = Me.Columns("City")
				Me.columnRegion = Me.Columns("Region")
				Me.columnPostalCode = Me.Columns("PostalCode")
				Me.columnCountry = Me.Columns("Country")
				Me.columnHomePhone = Me.Columns("HomePhone")
				Me.columnExtension = Me.Columns("Extension")
				Me.columnPhoto = Me.Columns("Photo")
				Me.columnNotes = Me.Columns("Notes")
				Me.columnReportsTo = Me.Columns("ReportsTo")
				Me.columnPhotoPath = Me.Columns("PhotoPath")
			End Sub

			Private Sub InitClass()
				Me.columnEmployeeID = New DataColumn("EmployeeID", GetType(Integer), Nothing, System.Data.MappingType.Element)
				Me.Columns.Add(Me.columnEmployeeID)
				Me.columnLastName = New DataColumn("LastName", GetType(String), Nothing, System.Data.MappingType.Element)
				Me.Columns.Add(Me.columnLastName)
				Me.columnFirstName = New DataColumn("FirstName", GetType(String), Nothing, System.Data.MappingType.Element)
				Me.Columns.Add(Me.columnFirstName)
				Me.columnTitle = New DataColumn("Title", GetType(String), Nothing, System.Data.MappingType.Element)
				Me.Columns.Add(Me.columnTitle)
				Me.columnTitleOfCourtesy = New DataColumn("TitleOfCourtesy", GetType(String), Nothing, System.Data.MappingType.Element)
				Me.Columns.Add(Me.columnTitleOfCourtesy)
				Me.columnBirthDate = New DataColumn("BirthDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
				Me.Columns.Add(Me.columnBirthDate)
				Me.columnHireDate = New DataColumn("HireDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
				Me.Columns.Add(Me.columnHireDate)
				Me.columnAddress = New DataColumn("Address", GetType(String), Nothing, System.Data.MappingType.Element)
				Me.Columns.Add(Me.columnAddress)
				Me.columnCity = New DataColumn("City", GetType(String), Nothing, System.Data.MappingType.Element)
				Me.Columns.Add(Me.columnCity)
				Me.columnRegion = New DataColumn("Region", GetType(String), Nothing, System.Data.MappingType.Element)
				Me.Columns.Add(Me.columnRegion)
				Me.columnPostalCode = New DataColumn("PostalCode", GetType(String), Nothing, System.Data.MappingType.Element)
				Me.Columns.Add(Me.columnPostalCode)
				Me.columnCountry = New DataColumn("Country", GetType(String), Nothing, System.Data.MappingType.Element)
				Me.Columns.Add(Me.columnCountry)
				Me.columnHomePhone = New DataColumn("HomePhone", GetType(String), Nothing, System.Data.MappingType.Element)
				Me.Columns.Add(Me.columnHomePhone)
				Me.columnExtension = New DataColumn("Extension", GetType(String), Nothing, System.Data.MappingType.Element)
				Me.Columns.Add(Me.columnExtension)
				Me.columnPhoto = New DataColumn("Photo", GetType(System.Byte() ), Nothing, System.Data.MappingType.Element)
				Me.Columns.Add(Me.columnPhoto)
				Me.columnNotes = New DataColumn("Notes", GetType(String), Nothing, System.Data.MappingType.Element)
				Me.Columns.Add(Me.columnNotes)
				Me.columnReportsTo = New DataColumn("ReportsTo", GetType(Integer), Nothing, System.Data.MappingType.Element)
				Me.Columns.Add(Me.columnReportsTo)
				Me.columnPhotoPath = New DataColumn("PhotoPath", GetType(String), Nothing, System.Data.MappingType.Element)
				Me.Columns.Add(Me.columnPhotoPath)
				Me.Constraints.Add(New UniqueConstraint("Dataset1Key1", New DataColumn() { Me.columnEmployeeID}, True))
				Me.columnEmployeeID.AutoIncrement = True
				Me.columnEmployeeID.AllowDBNull = False
				Me.columnEmployeeID.ReadOnly = True
				Me.columnEmployeeID.Unique = True
				Me.columnLastName.AllowDBNull = False
				Me.columnFirstName.AllowDBNull = False
			End Sub

			Public Function NewEmployeesRow() As EmployeesRow
				Return (CType(Me.NewRow(), EmployeesRow))
			End Function

			Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
				Return New EmployeesRow(builder)
			End Function

			Protected Overrides Function GetRowType() As System.Type
				Return GetType(EmployeesRow)
			End Function

			Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
				MyBase.OnRowChanged(e)
				If (Not Me.EmployeesRowChangedEvent Is Nothing) Then
					RaiseEvent EmployeesRowChanged(Me, New EmployeesRowChangeEvent((CType(e.Row, EmployeesRow)), e.Action))
				End If
			End Sub

			Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
				MyBase.OnRowChanging(e)
				If (Not Me.EmployeesRowChangingEvent Is Nothing) Then
					RaiseEvent EmployeesRowChanging(Me, New EmployeesRowChangeEvent((CType(e.Row, EmployeesRow)), e.Action))
				End If
			End Sub

			Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
				MyBase.OnRowDeleted(e)
				If (Not Me.EmployeesRowDeletedEvent Is Nothing) Then
					RaiseEvent EmployeesRowDeleted(Me, New EmployeesRowChangeEvent((CType(e.Row, EmployeesRow)), e.Action))
				End If
			End Sub

			Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
				MyBase.OnRowDeleting(e)
				If (Not Me.EmployeesRowDeletingEvent Is Nothing) Then
					RaiseEvent EmployeesRowDeleting(Me, New EmployeesRowChangeEvent((CType(e.Row, EmployeesRow)), e.Action))
				End If
			End Sub

			Public Sub RemoveEmployeesRow(ByVal row As EmployeesRow)
				Me.Rows.Remove(row)
			End Sub
		End Class

		<System.Diagnostics.DebuggerStepThrough()> _
		Public Class EmployeesRow : Inherits DataRow

			Private tableEmployees As EmployeesDataTable

			Friend Sub New(ByVal rb As DataRowBuilder)
				MyBase.New(rb)
				Me.tableEmployees = (CType(Me.Table, EmployeesDataTable))
			End Sub

			Public Property EmployeeID() As Integer
				Get
					Return (CInt(Me(Me.tableEmployees.EmployeeIDColumn)))
				End Get
				Set
					Me(Me.tableEmployees.EmployeeIDColumn) = Value
				End Set
			End Property

			Public Property LastName() As String
				Get
					Return (CStr(Me(Me.tableEmployees.LastNameColumn)))
				End Get
				Set
					Me(Me.tableEmployees.LastNameColumn) = Value
				End Set
			End Property

			Public Property FirstName() As String
				Get
					Return (CStr(Me(Me.tableEmployees.FirstNameColumn)))
				End Get
				Set
					Me(Me.tableEmployees.FirstNameColumn) = Value
				End Set
			End Property

			Public Property Title() As String
				Get
					Try
						Return (CStr(Me(Me.tableEmployees.TitleColumn)))
					Catch e As InvalidCastException
						Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableEmployees.TitleColumn) = Value
				End Set
			End Property

			Public Property TitleOfCourtesy() As String
				Get
					Try
						Return (CStr(Me(Me.tableEmployees.TitleOfCourtesyColumn)))
					Catch e As InvalidCastException
						Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableEmployees.TitleOfCourtesyColumn) = Value
				End Set
			End Property

			Public Property BirthDate() As System.DateTime
				Get
					Try
						Return (CDate(Me(Me.tableEmployees.BirthDateColumn)))
					Catch e As InvalidCastException
						Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableEmployees.BirthDateColumn) = Value
				End Set
			End Property

			Public Property HireDate() As System.DateTime
				Get
					Try
						Return (CDate(Me(Me.tableEmployees.HireDateColumn)))
					Catch e As InvalidCastException
						Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableEmployees.HireDateColumn) = Value
				End Set
			End Property

			Public Property Address() As String
				Get
					Try
						Return (CStr(Me(Me.tableEmployees.AddressColumn)))
					Catch e As InvalidCastException
						Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableEmployees.AddressColumn) = Value
				End Set
			End Property

			Public Property City() As String
				Get
					Try
						Return (CStr(Me(Me.tableEmployees.CityColumn)))
					Catch e As InvalidCastException
						Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableEmployees.CityColumn) = Value
				End Set
			End Property

			Public Property Region() As String
				Get
					Try
						Return (CStr(Me(Me.tableEmployees.RegionColumn)))
					Catch e As InvalidCastException
						Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableEmployees.RegionColumn) = Value
				End Set
			End Property

			Public Property PostalCode() As String
				Get
					Try
						Return (CStr(Me(Me.tableEmployees.PostalCodeColumn)))
					Catch e As InvalidCastException
						Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableEmployees.PostalCodeColumn) = Value
				End Set
			End Property

			Public Property Country() As String
				Get
					Try
						Return (CStr(Me(Me.tableEmployees.CountryColumn)))
					Catch e As InvalidCastException
						Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableEmployees.CountryColumn) = Value
				End Set
			End Property

			Public Property HomePhone() As String
				Get
					Try
						Return (CStr(Me(Me.tableEmployees.HomePhoneColumn)))
					Catch e As InvalidCastException
						Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableEmployees.HomePhoneColumn) = Value
				End Set
			End Property

			Public Property Extension() As String
				Get
					Try
						Return (CStr(Me(Me.tableEmployees.ExtensionColumn)))
					Catch e As InvalidCastException
						Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableEmployees.ExtensionColumn) = Value
				End Set
			End Property

			Public Property Photo() As System.Byte()
				Get
					Try
						Return (CType(Me(Me.tableEmployees.PhotoColumn), System.Byte()))
					Catch e As InvalidCastException
						Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableEmployees.PhotoColumn) = Value
				End Set
			End Property

			Public Property Notes() As String
				Get
					Try
						Return (CStr(Me(Me.tableEmployees.NotesColumn)))
					Catch e As InvalidCastException
						Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableEmployees.NotesColumn) = Value
				End Set
			End Property

			Public Property ReportsTo() As Integer
				Get
					Try
						Return (CInt(Me(Me.tableEmployees.ReportsToColumn)))
					Catch e As InvalidCastException
						Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableEmployees.ReportsToColumn) = Value
				End Set
			End Property

			Public Property PhotoPath() As String
				Get
					Try
						Return (CStr(Me(Me.tableEmployees.PhotoPathColumn)))
					Catch e As InvalidCastException
						Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableEmployees.PhotoPathColumn) = Value
				End Set
			End Property

			Public Function IsTitleNull() As Boolean
				Return Me.IsNull(Me.tableEmployees.TitleColumn)
			End Function

			Public Sub SetTitleNull()
				Me(Me.tableEmployees.TitleColumn) = System.Convert.DBNull
			End Sub

			Public Function IsTitleOfCourtesyNull() As Boolean
				Return Me.IsNull(Me.tableEmployees.TitleOfCourtesyColumn)
			End Function

			Public Sub SetTitleOfCourtesyNull()
				Me(Me.tableEmployees.TitleOfCourtesyColumn) = System.Convert.DBNull
			End Sub

			Public Function IsBirthDateNull() As Boolean
				Return Me.IsNull(Me.tableEmployees.BirthDateColumn)
			End Function

			Public Sub SetBirthDateNull()
				Me(Me.tableEmployees.BirthDateColumn) = System.Convert.DBNull
			End Sub

			Public Function IsHireDateNull() As Boolean
				Return Me.IsNull(Me.tableEmployees.HireDateColumn)
			End Function

			Public Sub SetHireDateNull()
				Me(Me.tableEmployees.HireDateColumn) = System.Convert.DBNull
			End Sub

			Public Function IsAddressNull() As Boolean
				Return Me.IsNull(Me.tableEmployees.AddressColumn)
			End Function

			Public Sub SetAddressNull()
				Me(Me.tableEmployees.AddressColumn) = System.Convert.DBNull
			End Sub

			Public Function IsCityNull() As Boolean
				Return Me.IsNull(Me.tableEmployees.CityColumn)
			End Function

			Public Sub SetCityNull()
				Me(Me.tableEmployees.CityColumn) = System.Convert.DBNull
			End Sub

			Public Function IsRegionNull() As Boolean
				Return Me.IsNull(Me.tableEmployees.RegionColumn)
			End Function

			Public Sub SetRegionNull()
				Me(Me.tableEmployees.RegionColumn) = System.Convert.DBNull
			End Sub

			Public Function IsPostalCodeNull() As Boolean
				Return Me.IsNull(Me.tableEmployees.PostalCodeColumn)
			End Function

			Public Sub SetPostalCodeNull()
				Me(Me.tableEmployees.PostalCodeColumn) = System.Convert.DBNull
			End Sub

			Public Function IsCountryNull() As Boolean
				Return Me.IsNull(Me.tableEmployees.CountryColumn)
			End Function

			Public Sub SetCountryNull()
				Me(Me.tableEmployees.CountryColumn) = System.Convert.DBNull
			End Sub

			Public Function IsHomePhoneNull() As Boolean
				Return Me.IsNull(Me.tableEmployees.HomePhoneColumn)
			End Function

			Public Sub SetHomePhoneNull()
				Me(Me.tableEmployees.HomePhoneColumn) = System.Convert.DBNull
			End Sub

			Public Function IsExtensionNull() As Boolean
				Return Me.IsNull(Me.tableEmployees.ExtensionColumn)
			End Function

			Public Sub SetExtensionNull()
				Me(Me.tableEmployees.ExtensionColumn) = System.Convert.DBNull
			End Sub

			Public Function IsPhotoNull() As Boolean
				Return Me.IsNull(Me.tableEmployees.PhotoColumn)
			End Function

			Public Sub SetPhotoNull()
				Me(Me.tableEmployees.PhotoColumn) = System.Convert.DBNull
			End Sub

			Public Function IsNotesNull() As Boolean
				Return Me.IsNull(Me.tableEmployees.NotesColumn)
			End Function

			Public Sub SetNotesNull()
				Me(Me.tableEmployees.NotesColumn) = System.Convert.DBNull
			End Sub

			Public Function IsReportsToNull() As Boolean
				Return Me.IsNull(Me.tableEmployees.ReportsToColumn)
			End Function

			Public Sub SetReportsToNull()
				Me(Me.tableEmployees.ReportsToColumn) = System.Convert.DBNull
			End Sub

			Public Function IsPhotoPathNull() As Boolean
				Return Me.IsNull(Me.tableEmployees.PhotoPathColumn)
			End Function

			Public Sub SetPhotoPathNull()
				Me(Me.tableEmployees.PhotoPathColumn) = System.Convert.DBNull
			End Sub

			Public Function GetOrdersRows() As OrdersRow()
				Return (CType(Me.GetChildRows(Me.Table.ChildRelations("EmployeesOrders")), OrdersRow()))
			End Function
		End Class

		<System.Diagnostics.DebuggerStepThrough()> _
		Public Class EmployeesRowChangeEvent : Inherits EventArgs

			Private eventRow As EmployeesRow

			Private eventAction As DataRowAction

'INSTANT VB NOTE: The parameter row was renamed since Visual Basic will not uniquely identify class members when parameters have the same name:
'INSTANT VB NOTE: The parameter action was renamed since Visual Basic will not uniquely identify class members when parameters have the same name:
			Public Sub New(ByVal row_Renamed As EmployeesRow, ByVal action_Renamed As DataRowAction)
				Me.eventRow = row_Renamed
				Me.eventAction = action_Renamed
			End Sub

			Public ReadOnly Property Row() As EmployeesRow
				Get
					Return Me.eventRow
				End Get
			End Property

			Public ReadOnly Property Action() As DataRowAction
				Get
					Return Me.eventAction
				End Get
			End Property
		End Class

		<System.Diagnostics.DebuggerStepThrough()> _
		Public Class OrdersDataTable : Inherits DataTable : Implements System.Collections.IEnumerable

			Private columnOrderID As DataColumn

			Private columnCustomerID As DataColumn

			Private columnEmployeeID As DataColumn

			Private columnOrderDate As DataColumn

			Private columnRequiredDate As DataColumn

			Private columnShippedDate As DataColumn

			Private columnShipVia As DataColumn

			Private columnFreight As DataColumn

			Private columnShipName As DataColumn

			Private columnShipAddress As DataColumn

			Private columnShipCity As DataColumn

			Private columnShipRegion As DataColumn

			Private columnShipPostalCode As DataColumn

			Private columnShipCountry As DataColumn

			Friend Sub New()
				MyBase.New("Orders")
				Me.InitClass()
			End Sub

			Friend Sub New(ByVal table As DataTable)
				MyBase.New(table.TableName)
				If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
					Me.CaseSensitive = table.CaseSensitive
				End If
				If (table.Locale.ToString() <> table.DataSet.Locale.ToString()) Then
					Me.Locale = table.Locale
				End If
				If (table.Namespace <> table.DataSet.Namespace) Then
					Me.Namespace = table.Namespace
				End If
				Me.Prefix = table.Prefix
				Me.MinimumCapacity = table.MinimumCapacity
				Me.DisplayExpression = table.DisplayExpression
			End Sub

			<System.ComponentModel.Browsable(False)> _
			Public ReadOnly Property Count() As Integer
				Get
					Return Me.Rows.Count
				End Get
			End Property

			Friend ReadOnly Property OrderIDColumn() As DataColumn
				Get
					Return Me.columnOrderID
				End Get
			End Property

			Friend ReadOnly Property CustomerIDColumn() As DataColumn
				Get
					Return Me.columnCustomerID
				End Get
			End Property

			Friend ReadOnly Property EmployeeIDColumn() As DataColumn
				Get
					Return Me.columnEmployeeID
				End Get
			End Property

			Friend ReadOnly Property OrderDateColumn() As DataColumn
				Get
					Return Me.columnOrderDate
				End Get
			End Property

			Friend ReadOnly Property RequiredDateColumn() As DataColumn
				Get
					Return Me.columnRequiredDate
				End Get
			End Property

			Friend ReadOnly Property ShippedDateColumn() As DataColumn
				Get
					Return Me.columnShippedDate
				End Get
			End Property

			Friend ReadOnly Property ShipViaColumn() As DataColumn
				Get
					Return Me.columnShipVia
				End Get
			End Property

			Friend ReadOnly Property FreightColumn() As DataColumn
				Get
					Return Me.columnFreight
				End Get
			End Property

			Friend ReadOnly Property ShipNameColumn() As DataColumn
				Get
					Return Me.columnShipName
				End Get
			End Property

			Friend ReadOnly Property ShipAddressColumn() As DataColumn
				Get
					Return Me.columnShipAddress
				End Get
			End Property

			Friend ReadOnly Property ShipCityColumn() As DataColumn
				Get
					Return Me.columnShipCity
				End Get
			End Property

			Friend ReadOnly Property ShipRegionColumn() As DataColumn
				Get
					Return Me.columnShipRegion
				End Get
			End Property

			Friend ReadOnly Property ShipPostalCodeColumn() As DataColumn
				Get
					Return Me.columnShipPostalCode
				End Get
			End Property

			Friend ReadOnly Property ShipCountryColumn() As DataColumn
				Get
					Return Me.columnShipCountry
				End Get
			End Property

			Public ReadOnly Default Property Item(ByVal index As Integer) As OrdersRow
				Get
					Return (CType(Me.Rows(index), OrdersRow))
				End Get
			End Property

			Public Event OrdersRowChanged As OrdersRowChangeEventHandler

			Public Event OrdersRowChanging As OrdersRowChangeEventHandler

			Public Event OrdersRowDeleted As OrdersRowChangeEventHandler

			Public Event OrdersRowDeleting As OrdersRowChangeEventHandler

			Public Sub AddOrdersRow(ByVal row As OrdersRow)
				Me.Rows.Add(row)
			End Sub

			Public Function AddOrdersRow(ByVal CustomerID As String, ByVal parentEmployeesRowByEmployeesOrders As EmployeesRow, ByVal OrderDate As System.DateTime, ByVal RequiredDate As System.DateTime, ByVal ShippedDate As System.DateTime, ByVal ShipVia As Integer, ByVal Freight As System.Decimal, ByVal ShipName As String, ByVal ShipAddress As String, ByVal ShipCity As String, ByVal ShipRegion As String, ByVal ShipPostalCode As String, ByVal ShipCountry As String) As OrdersRow
				Dim rowOrdersRow As OrdersRow = (CType(Me.NewRow(), OrdersRow))
				rowOrdersRow.ItemArray = New Object() { Nothing, CustomerID, parentEmployeesRowByEmployeesOrders(0), OrderDate, RequiredDate, ShippedDate, ShipVia, Freight, ShipName, ShipAddress, ShipCity, ShipRegion, ShipPostalCode, ShipCountry}
				Me.Rows.Add(rowOrdersRow)
				Return rowOrdersRow
			End Function

			Public Function FindByOrderID(ByVal OrderID As Integer) As OrdersRow
				Return (CType(Me.Rows.Find(New Object() { OrderID}), OrdersRow))
			End Function

			Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
				Return Me.Rows.GetEnumerator()
			End Function

			Public Overrides Function Clone() As DataTable
				Dim cln As OrdersDataTable = (CType(MyBase.Clone(), OrdersDataTable))
				cln.InitVars()
				Return cln
			End Function

			Protected Overrides Function CreateInstance() As DataTable
				Return New OrdersDataTable()
			End Function

			Friend Sub InitVars()
				Me.columnOrderID = Me.Columns("OrderID")
				Me.columnCustomerID = Me.Columns("CustomerID")
				Me.columnEmployeeID = Me.Columns("EmployeeID")
				Me.columnOrderDate = Me.Columns("OrderDate")
				Me.columnRequiredDate = Me.Columns("RequiredDate")
				Me.columnShippedDate = Me.Columns("ShippedDate")
				Me.columnShipVia = Me.Columns("ShipVia")
				Me.columnFreight = Me.Columns("Freight")
				Me.columnShipName = Me.Columns("ShipName")
				Me.columnShipAddress = Me.Columns("ShipAddress")
				Me.columnShipCity = Me.Columns("ShipCity")
				Me.columnShipRegion = Me.Columns("ShipRegion")
				Me.columnShipPostalCode = Me.Columns("ShipPostalCode")
				Me.columnShipCountry = Me.Columns("ShipCountry")
			End Sub

			Private Sub InitClass()
				Me.columnOrderID = New DataColumn("OrderID", GetType(Integer), Nothing, System.Data.MappingType.Element)
				Me.Columns.Add(Me.columnOrderID)
				Me.columnCustomerID = New DataColumn("CustomerID", GetType(String), Nothing, System.Data.MappingType.Element)
				Me.Columns.Add(Me.columnCustomerID)
				Me.columnEmployeeID = New DataColumn("EmployeeID", GetType(Integer), Nothing, System.Data.MappingType.Element)
				Me.Columns.Add(Me.columnEmployeeID)
				Me.columnOrderDate = New DataColumn("OrderDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
				Me.Columns.Add(Me.columnOrderDate)
				Me.columnRequiredDate = New DataColumn("RequiredDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
				Me.Columns.Add(Me.columnRequiredDate)
				Me.columnShippedDate = New DataColumn("ShippedDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
				Me.Columns.Add(Me.columnShippedDate)
				Me.columnShipVia = New DataColumn("ShipVia", GetType(Integer), Nothing, System.Data.MappingType.Element)
				Me.Columns.Add(Me.columnShipVia)
				Me.columnFreight = New DataColumn("Freight", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
				Me.Columns.Add(Me.columnFreight)
				Me.columnShipName = New DataColumn("ShipName", GetType(String), Nothing, System.Data.MappingType.Element)
				Me.Columns.Add(Me.columnShipName)
				Me.columnShipAddress = New DataColumn("ShipAddress", GetType(String), Nothing, System.Data.MappingType.Element)
				Me.Columns.Add(Me.columnShipAddress)
				Me.columnShipCity = New DataColumn("ShipCity", GetType(String), Nothing, System.Data.MappingType.Element)
				Me.Columns.Add(Me.columnShipCity)
				Me.columnShipRegion = New DataColumn("ShipRegion", GetType(String), Nothing, System.Data.MappingType.Element)
				Me.Columns.Add(Me.columnShipRegion)
				Me.columnShipPostalCode = New DataColumn("ShipPostalCode", GetType(String), Nothing, System.Data.MappingType.Element)
				Me.Columns.Add(Me.columnShipPostalCode)
				Me.columnShipCountry = New DataColumn("ShipCountry", GetType(String), Nothing, System.Data.MappingType.Element)
				Me.Columns.Add(Me.columnShipCountry)
				Me.Constraints.Add(New UniqueConstraint("Dataset1Key2", New DataColumn() { Me.columnOrderID}, True))
				Me.columnOrderID.AutoIncrement = True
				Me.columnOrderID.AllowDBNull = False
				Me.columnOrderID.ReadOnly = True
				Me.columnOrderID.Unique = True
			End Sub

			Public Function NewOrdersRow() As OrdersRow
				Return (CType(Me.NewRow(), OrdersRow))
			End Function

			Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
				Return New OrdersRow(builder)
			End Function

			Protected Overrides Function GetRowType() As System.Type
				Return GetType(OrdersRow)
			End Function

			Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
				MyBase.OnRowChanged(e)
				If (Not Me.OrdersRowChangedEvent Is Nothing) Then
					RaiseEvent OrdersRowChanged(Me, New OrdersRowChangeEvent((CType(e.Row, OrdersRow)), e.Action))
				End If
			End Sub

			Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
				MyBase.OnRowChanging(e)
				If (Not Me.OrdersRowChangingEvent Is Nothing) Then
					RaiseEvent OrdersRowChanging(Me, New OrdersRowChangeEvent((CType(e.Row, OrdersRow)), e.Action))
				End If
			End Sub

			Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
				MyBase.OnRowDeleted(e)
				If (Not Me.OrdersRowDeletedEvent Is Nothing) Then
					RaiseEvent OrdersRowDeleted(Me, New OrdersRowChangeEvent((CType(e.Row, OrdersRow)), e.Action))
				End If
			End Sub

			Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
				MyBase.OnRowDeleting(e)
				If (Not Me.OrdersRowDeletingEvent Is Nothing) Then
					RaiseEvent OrdersRowDeleting(Me, New OrdersRowChangeEvent((CType(e.Row, OrdersRow)), e.Action))
				End If
			End Sub

			Public Sub RemoveOrdersRow(ByVal row As OrdersRow)
				Me.Rows.Remove(row)
			End Sub
		End Class

		<System.Diagnostics.DebuggerStepThrough()> _
		Public Class OrdersRow : Inherits DataRow

			Private tableOrders As OrdersDataTable

			Friend Sub New(ByVal rb As DataRowBuilder)
				MyBase.New(rb)
				Me.tableOrders = (CType(Me.Table, OrdersDataTable))
			End Sub

			Public Property OrderID() As Integer
				Get
					Return (CInt(Me(Me.tableOrders.OrderIDColumn)))
				End Get
				Set
					Me(Me.tableOrders.OrderIDColumn) = Value
				End Set
			End Property

			Public Property CustomerID() As String
				Get
					Try
						Return (CStr(Me(Me.tableOrders.CustomerIDColumn)))
					Catch e As InvalidCastException
						Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableOrders.CustomerIDColumn) = Value
				End Set
			End Property

			Public Property EmployeeID() As Integer
				Get
					Try
						Return (CInt(Me(Me.tableOrders.EmployeeIDColumn)))
					Catch e As InvalidCastException
						Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableOrders.EmployeeIDColumn) = Value
				End Set
			End Property

			Public Property OrderDate() As System.DateTime
				Get
					Try
						Return (CDate(Me(Me.tableOrders.OrderDateColumn)))
					Catch e As InvalidCastException
						Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableOrders.OrderDateColumn) = Value
				End Set
			End Property

			Public Property RequiredDate() As System.DateTime
				Get
					Try
						Return (CDate(Me(Me.tableOrders.RequiredDateColumn)))
					Catch e As InvalidCastException
						Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableOrders.RequiredDateColumn) = Value
				End Set
			End Property

			Public Property ShippedDate() As System.DateTime
				Get
					Try
						Return (CDate(Me(Me.tableOrders.ShippedDateColumn)))
					Catch e As InvalidCastException
						Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableOrders.ShippedDateColumn) = Value
				End Set
			End Property

			Public Property ShipVia() As Integer
				Get
					Try
						Return (CInt(Me(Me.tableOrders.ShipViaColumn)))
					Catch e As InvalidCastException
						Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableOrders.ShipViaColumn) = Value
				End Set
			End Property

			Public Property Freight() As System.Decimal
				Get
					Try
						Return (CDec(Me(Me.tableOrders.FreightColumn)))
					Catch e As InvalidCastException
						Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableOrders.FreightColumn) = Value
				End Set
			End Property

			Public Property ShipName() As String
				Get
					Try
						Return (CStr(Me(Me.tableOrders.ShipNameColumn)))
					Catch e As InvalidCastException
						Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableOrders.ShipNameColumn) = Value
				End Set
			End Property

			Public Property ShipAddress() As String
				Get
					Try
						Return (CStr(Me(Me.tableOrders.ShipAddressColumn)))
					Catch e As InvalidCastException
						Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableOrders.ShipAddressColumn) = Value
				End Set
			End Property

			Public Property ShipCity() As String
				Get
					Try
						Return (CStr(Me(Me.tableOrders.ShipCityColumn)))
					Catch e As InvalidCastException
						Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableOrders.ShipCityColumn) = Value
				End Set
			End Property

			Public Property ShipRegion() As String
				Get
					Try
						Return (CStr(Me(Me.tableOrders.ShipRegionColumn)))
					Catch e As InvalidCastException
						Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableOrders.ShipRegionColumn) = Value
				End Set
			End Property

			Public Property ShipPostalCode() As String
				Get
					Try
						Return (CStr(Me(Me.tableOrders.ShipPostalCodeColumn)))
					Catch e As InvalidCastException
						Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableOrders.ShipPostalCodeColumn) = Value
				End Set
			End Property

			Public Property ShipCountry() As String
				Get
					Try
						Return (CStr(Me(Me.tableOrders.ShipCountryColumn)))
					Catch e As InvalidCastException
						Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableOrders.ShipCountryColumn) = Value
				End Set
			End Property

			Public Property EmployeesRow() As EmployeesRow
				Get
					Return (CType(Me.GetParentRow(Me.Table.ParentRelations("EmployeesOrders")), EmployeesRow))
				End Get
				Set
					Me.SetParentRow(Value, Me.Table.ParentRelations("EmployeesOrders"))
				End Set
			End Property

			Public Function IsCustomerIDNull() As Boolean
				Return Me.IsNull(Me.tableOrders.CustomerIDColumn)
			End Function

			Public Sub SetCustomerIDNull()
				Me(Me.tableOrders.CustomerIDColumn) = System.Convert.DBNull
			End Sub

			Public Function IsEmployeeIDNull() As Boolean
				Return Me.IsNull(Me.tableOrders.EmployeeIDColumn)
			End Function

			Public Sub SetEmployeeIDNull()
				Me(Me.tableOrders.EmployeeIDColumn) = System.Convert.DBNull
			End Sub

			Public Function IsOrderDateNull() As Boolean
				Return Me.IsNull(Me.tableOrders.OrderDateColumn)
			End Function

			Public Sub SetOrderDateNull()
				Me(Me.tableOrders.OrderDateColumn) = System.Convert.DBNull
			End Sub

			Public Function IsRequiredDateNull() As Boolean
				Return Me.IsNull(Me.tableOrders.RequiredDateColumn)
			End Function

			Public Sub SetRequiredDateNull()
				Me(Me.tableOrders.RequiredDateColumn) = System.Convert.DBNull
			End Sub

			Public Function IsShippedDateNull() As Boolean
				Return Me.IsNull(Me.tableOrders.ShippedDateColumn)
			End Function

			Public Sub SetShippedDateNull()
				Me(Me.tableOrders.ShippedDateColumn) = System.Convert.DBNull
			End Sub

			Public Function IsShipViaNull() As Boolean
				Return Me.IsNull(Me.tableOrders.ShipViaColumn)
			End Function

			Public Sub SetShipViaNull()
				Me(Me.tableOrders.ShipViaColumn) = System.Convert.DBNull
			End Sub

			Public Function IsFreightNull() As Boolean
				Return Me.IsNull(Me.tableOrders.FreightColumn)
			End Function

			Public Sub SetFreightNull()
				Me(Me.tableOrders.FreightColumn) = System.Convert.DBNull
			End Sub

			Public Function IsShipNameNull() As Boolean
				Return Me.IsNull(Me.tableOrders.ShipNameColumn)
			End Function

			Public Sub SetShipNameNull()
				Me(Me.tableOrders.ShipNameColumn) = System.Convert.DBNull
			End Sub

			Public Function IsShipAddressNull() As Boolean
				Return Me.IsNull(Me.tableOrders.ShipAddressColumn)
			End Function

			Public Sub SetShipAddressNull()
				Me(Me.tableOrders.ShipAddressColumn) = System.Convert.DBNull
			End Sub

			Public Function IsShipCityNull() As Boolean
				Return Me.IsNull(Me.tableOrders.ShipCityColumn)
			End Function

			Public Sub SetShipCityNull()
				Me(Me.tableOrders.ShipCityColumn) = System.Convert.DBNull
			End Sub

			Public Function IsShipRegionNull() As Boolean
				Return Me.IsNull(Me.tableOrders.ShipRegionColumn)
			End Function

			Public Sub SetShipRegionNull()
				Me(Me.tableOrders.ShipRegionColumn) = System.Convert.DBNull
			End Sub

			Public Function IsShipPostalCodeNull() As Boolean
				Return Me.IsNull(Me.tableOrders.ShipPostalCodeColumn)
			End Function

			Public Sub SetShipPostalCodeNull()
				Me(Me.tableOrders.ShipPostalCodeColumn) = System.Convert.DBNull
			End Sub

			Public Function IsShipCountryNull() As Boolean
				Return Me.IsNull(Me.tableOrders.ShipCountryColumn)
			End Function

			Public Sub SetShipCountryNull()
				Me(Me.tableOrders.ShipCountryColumn) = System.Convert.DBNull
			End Sub
		End Class

		<System.Diagnostics.DebuggerStepThrough()> _
		Public Class OrdersRowChangeEvent : Inherits EventArgs

			Private eventRow As OrdersRow

			Private eventAction As DataRowAction

'INSTANT VB NOTE: The parameter row was renamed since Visual Basic will not uniquely identify class members when parameters have the same name:
'INSTANT VB NOTE: The parameter action was renamed since Visual Basic will not uniquely identify class members when parameters have the same name:
			Public Sub New(ByVal row_Renamed As OrdersRow, ByVal action_Renamed As DataRowAction)
				Me.eventRow = row_Renamed
				Me.eventAction = action_Renamed
			End Sub

			Public ReadOnly Property Row() As OrdersRow
				Get
					Return Me.eventRow
				End Get
			End Property

			Public ReadOnly Property Action() As DataRowAction
				Get
					Return Me.eventAction
				End Get
			End Property
		End Class
	End Class
End Namespace
