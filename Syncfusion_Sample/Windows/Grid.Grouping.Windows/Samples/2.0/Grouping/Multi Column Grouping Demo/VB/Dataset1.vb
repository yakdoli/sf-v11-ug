#Region "Copyright Syncfusion Inc. 2001 - 2013"
' Copyright Syncfusion Inc. 2001 - 2013. All rights reserved.
' Use of this code is subject to the terms of our license.
' A copy of the current license can be obtained at any time by e-mailing
' licensing@syncfusion.com. Any infringement will be prosecuted under
' applicable laws. 
#End Region

'------------------------------------------------------------------------------
' <autogenerated>
'	 This code was generated by a tool.
'	 Runtime Version: 1.1.4322.2032
'
'	 Changes to this file may cause incorrect behavior and will be lost if 
'	 the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------


Imports Microsoft.VisualBasic
	Imports System
	Imports System.Data
	Imports System.Xml
	Imports System.Runtime.Serialization
Namespace Grouping_GGC


	<Serializable(), System.ComponentModel.DesignerCategoryAttribute("code"), System.Diagnostics.DebuggerStepThrough(), System.ComponentModel.ToolboxItem(True)> _
	Public Class Dataset1 : Inherits DataSet

		Private tableEmployees As EmployeesDataTable

		Public Sub New()
			Me.InitClass()
			Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = New System.ComponentModel.CollectionChangeEventHandler(AddressOf Me.SchemaChanged)
			AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
			AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
		End Sub

		Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
			Dim strSchema As String = (CStr(info.GetValue("XmlSchema", GetType(String))))
			If (Not strSchema Is Nothing) Then
				Dim ds As DataSet = New DataSet()
				ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
				If (Not ds.Tables("Employees") Is Nothing) Then
					Me.Tables.Add(New EmployeesDataTable(ds.Tables("Employees")))
				End If
				Me.DataSetName = ds.DataSetName
				Me.Prefix = ds.Prefix
				Me.Namespace = ds.Namespace
				Me.Locale = ds.Locale
				Me.CaseSensitive = ds.CaseSensitive
				Me.EnforceConstraints = ds.EnforceConstraints
				Me.Merge(ds, False, System.Data.MissingSchemaAction.Add)
				Me.InitVars()
			Else
				Me.InitClass()
			End If
			Me.GetSerializationData(info, context)
			Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = New System.ComponentModel.CollectionChangeEventHandler(AddressOf Me.SchemaChanged)
			AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
			AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
		End Sub

		<System.ComponentModel.Browsable(False), System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)> _
		Public ReadOnly Property Employees() As EmployeesDataTable
			Get
				Return Me.tableEmployees
			End Get
		End Property

		Public Overrides Function Clone() As DataSet
			Dim cln As Dataset1 = (CType(MyBase.Clone(), Dataset1))
			cln.InitVars()
			Return cln
		End Function

		Protected Overrides Function ShouldSerializeTables() As Boolean
			Return False
		End Function

		Protected Overrides Function ShouldSerializeRelations() As Boolean
			Return False
		End Function

		Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
			Me.Reset()
			Dim ds As DataSet = New DataSet()
			ds.ReadXml(reader)
			If (Not ds.Tables("Employees") Is Nothing) Then
				Me.Tables.Add(New EmployeesDataTable(ds.Tables("Employees")))
			End If
			Me.DataSetName = ds.DataSetName
			Me.Prefix = ds.Prefix
			Me.Namespace = ds.Namespace
			Me.Locale = ds.Locale
			Me.CaseSensitive = ds.CaseSensitive
			Me.EnforceConstraints = ds.EnforceConstraints
			Me.Merge(ds, False, System.Data.MissingSchemaAction.Add)
			Me.InitVars()
		End Sub

		Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
			Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream()
			Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
			stream.Position = 0
			Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
		End Function

		Friend Sub InitVars()
			Me.tableEmployees = (CType(Me.Tables("Employees"), EmployeesDataTable))
			If (Not Me.tableEmployees Is Nothing) Then
				Me.tableEmployees.InitVars()
			End If
		End Sub

		Private Sub InitClass()
			Me.DataSetName = "Dataset1"
			Me.Prefix = ""
			Me.Namespace = "http://www.tempuri.org/Dataset1.xsd"
			Me.Locale = New System.Globalization.CultureInfo("en-US")
			Me.CaseSensitive = False
			Me.EnforceConstraints = True
			Me.tableEmployees = New EmployeesDataTable()
			Me.Tables.Add(Me.tableEmployees)
		End Sub

		Private Function ShouldSerializeEmployees() As Boolean
			Return False
		End Function

		Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
			If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
				Me.InitVars()
			End If
		End Sub

		Public Delegate Sub EmployeesRowChangeEventHandler(ByVal sender As Object, ByVal e As EmployeesRowChangeEvent)

		<System.Diagnostics.DebuggerStepThrough()> _
		Public Class EmployeesDataTable : Inherits DataTable : Implements System.Collections.IEnumerable

			Private columnEmployeeID As DataColumn

			Private columnLastName As DataColumn

			Private columnFirstName As DataColumn

			Private columnTitle As DataColumn

			Private columnAddress As DataColumn

			Private columnCity As DataColumn

			Private columnCountry As DataColumn

			Friend Sub New()
				MyBase.New("Employees")
				Me.InitClass()
			End Sub

			Friend Sub New(ByVal table As DataTable)
				MyBase.New(table.TableName)
				If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
					Me.CaseSensitive = table.CaseSensitive
				End If
				If (table.Locale.ToString() <> table.DataSet.Locale.ToString()) Then
					Me.Locale = table.Locale
				End If
				If (table.Namespace <> table.DataSet.Namespace) Then
					Me.Namespace = table.Namespace
				End If
				Me.Prefix = table.Prefix
				Me.MinimumCapacity = table.MinimumCapacity
				Me.DisplayExpression = table.DisplayExpression
			End Sub

			<System.ComponentModel.Browsable(False)> _
			Public ReadOnly Property Count() As Integer
				Get
					Return Me.Rows.Count
				End Get
			End Property

			Friend ReadOnly Property EmployeeIDColumn() As DataColumn
				Get
					Return Me.columnEmployeeID
				End Get
			End Property

			Friend ReadOnly Property LastNameColumn() As DataColumn
				Get
					Return Me.columnLastName
				End Get
			End Property

			Friend ReadOnly Property FirstNameColumn() As DataColumn
				Get
					Return Me.columnFirstName
				End Get
			End Property

			Friend ReadOnly Property TitleColumn() As DataColumn
				Get
					Return Me.columnTitle
				End Get
			End Property

			Friend ReadOnly Property AddressColumn() As DataColumn
				Get
					Return Me.columnAddress
				End Get
			End Property

			Friend ReadOnly Property CityColumn() As DataColumn
				Get
					Return Me.columnCity
				End Get
			End Property

			Friend ReadOnly Property CountryColumn() As DataColumn
				Get
					Return Me.columnCountry
				End Get
			End Property

			Public ReadOnly Default Property Item(ByVal index As Integer) As EmployeesRow
				Get
					Return (CType(Me.Rows(index), EmployeesRow))
				End Get
			End Property

			Public Event EmployeesRowChanged As EmployeesRowChangeEventHandler

			Public Event EmployeesRowChanging As EmployeesRowChangeEventHandler

			Public Event EmployeesRowDeleted As EmployeesRowChangeEventHandler

			Public Event EmployeesRowDeleting As EmployeesRowChangeEventHandler

			Public Sub AddEmployeesRow(ByVal row As EmployeesRow)
				Me.Rows.Add(row)
			End Sub

			Public Function AddEmployeesRow(ByVal LastName As String, ByVal FirstName As String, ByVal Title As String, ByVal Address As String, ByVal City As String, ByVal Country As String) As EmployeesRow
				Dim rowEmployeesRow As EmployeesRow = (CType(Me.NewRow(), EmployeesRow))
				rowEmployeesRow.ItemArray = New Object() { Nothing, LastName, FirstName, Title, Address, City, Country}
				Me.Rows.Add(rowEmployeesRow)
				Return rowEmployeesRow
			End Function

			Public Function FindByEmployeeID(ByVal EmployeeID As Integer) As EmployeesRow
				Return (CType(Me.Rows.Find(New Object() { EmployeeID}), EmployeesRow))
			End Function

			Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
				Return Me.Rows.GetEnumerator()
			End Function

			Public Overrides Function Clone() As DataTable
				Dim cln As EmployeesDataTable = (CType(MyBase.Clone(), EmployeesDataTable))
				cln.InitVars()
				Return cln
			End Function

			Protected Overrides Function CreateInstance() As DataTable
				Return New EmployeesDataTable()
			End Function

			Friend Sub InitVars()
				Me.columnEmployeeID = Me.Columns("EmployeeID")
				Me.columnLastName = Me.Columns("LastName")
				Me.columnFirstName = Me.Columns("FirstName")
				Me.columnTitle = Me.Columns("Title")
				Me.columnAddress = Me.Columns("Address")
				Me.columnCity = Me.Columns("City")
				Me.columnCountry = Me.Columns("Country")
			End Sub

			Private Sub InitClass()
				Me.columnEmployeeID = New DataColumn("EmployeeID", GetType(Integer), Nothing, System.Data.MappingType.Element)
				Me.Columns.Add(Me.columnEmployeeID)
				Me.columnLastName = New DataColumn("LastName", GetType(String), Nothing, System.Data.MappingType.Element)
				Me.Columns.Add(Me.columnLastName)
				Me.columnFirstName = New DataColumn("FirstName", GetType(String), Nothing, System.Data.MappingType.Element)
				Me.Columns.Add(Me.columnFirstName)
				Me.columnTitle = New DataColumn("Title", GetType(String), Nothing, System.Data.MappingType.Element)
				Me.Columns.Add(Me.columnTitle)
				Me.columnAddress = New DataColumn("Address", GetType(String), Nothing, System.Data.MappingType.Element)
				Me.Columns.Add(Me.columnAddress)
				Me.columnCity = New DataColumn("City", GetType(String), Nothing, System.Data.MappingType.Element)
				Me.Columns.Add(Me.columnCity)
				Me.columnCountry = New DataColumn("Country", GetType(String), Nothing, System.Data.MappingType.Element)
				Me.Columns.Add(Me.columnCountry)
				Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() { Me.columnEmployeeID}, True))
				Me.columnEmployeeID.AutoIncrement = True
				Me.columnEmployeeID.AllowDBNull = False
				Me.columnEmployeeID.Unique = True
			End Sub

			Public Function NewEmployeesRow() As EmployeesRow
				Return (CType(Me.NewRow(), EmployeesRow))
			End Function

			Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
				Return New EmployeesRow(builder)
			End Function

			Protected Overrides Function GetRowType() As System.Type
				Return GetType(EmployeesRow)
			End Function

			Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
				MyBase.OnRowChanged(e)
				If (Not Me.EmployeesRowChangedEvent Is Nothing) Then
					RaiseEvent EmployeesRowChanged(Me, New EmployeesRowChangeEvent((CType(e.Row, EmployeesRow)), e.Action))
				End If
			End Sub

			Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
				MyBase.OnRowChanging(e)
				If (Not Me.EmployeesRowChangingEvent Is Nothing) Then
					RaiseEvent EmployeesRowChanging(Me, New EmployeesRowChangeEvent((CType(e.Row, EmployeesRow)), e.Action))
				End If
			End Sub

			Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
				MyBase.OnRowDeleted(e)
				If (Not Me.EmployeesRowDeletedEvent Is Nothing) Then
					RaiseEvent EmployeesRowDeleted(Me, New EmployeesRowChangeEvent((CType(e.Row, EmployeesRow)), e.Action))
				End If
			End Sub

			Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
				MyBase.OnRowDeleting(e)
				If (Not Me.EmployeesRowDeletingEvent Is Nothing) Then
					RaiseEvent EmployeesRowDeleting(Me, New EmployeesRowChangeEvent((CType(e.Row, EmployeesRow)), e.Action))
				End If
			End Sub

			Public Sub RemoveEmployeesRow(ByVal row As EmployeesRow)
				Me.Rows.Remove(row)
			End Sub
		End Class

		<System.Diagnostics.DebuggerStepThrough()> _
		Public Class EmployeesRow : Inherits DataRow

			Private tableEmployees As EmployeesDataTable

			Friend Sub New(ByVal rb As DataRowBuilder)
				MyBase.New(rb)
				Me.tableEmployees = (CType(Me.Table, EmployeesDataTable))
			End Sub

			Public Property EmployeeID() As Integer
				Get
					Return (CInt(Me(Me.tableEmployees.EmployeeIDColumn)))
				End Get
				Set
					Me(Me.tableEmployees.EmployeeIDColumn) = Value
				End Set
			End Property

			Public Property LastName() As String
				Get
					Try
						Return (CStr(Me(Me.tableEmployees.LastNameColumn)))
					Catch e As InvalidCastException
						Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableEmployees.LastNameColumn) = Value
				End Set
			End Property

			Public Property FirstName() As String
				Get
					Try
						Return (CStr(Me(Me.tableEmployees.FirstNameColumn)))
					Catch e As InvalidCastException
						Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableEmployees.FirstNameColumn) = Value
				End Set
			End Property

			Public Property Title() As String
				Get
					Try
						Return (CStr(Me(Me.tableEmployees.TitleColumn)))
					Catch e As InvalidCastException
						Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableEmployees.TitleColumn) = Value
				End Set
			End Property

			Public Property Address() As String
				Get
					Try
						Return (CStr(Me(Me.tableEmployees.AddressColumn)))
					Catch e As InvalidCastException
						Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableEmployees.AddressColumn) = Value
				End Set
			End Property

			Public Property City() As String
				Get
					Try
						Return (CStr(Me(Me.tableEmployees.CityColumn)))
					Catch e As InvalidCastException
						Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableEmployees.CityColumn) = Value
				End Set
			End Property

			Public Property Country() As String
				Get
					Try
						Return (CStr(Me(Me.tableEmployees.CountryColumn)))
					Catch e As InvalidCastException
						Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableEmployees.CountryColumn) = Value
				End Set
			End Property

			Public Function IsLastNameNull() As Boolean
				Return Me.IsNull(Me.tableEmployees.LastNameColumn)
			End Function

			Public Sub SetLastNameNull()
				Me(Me.tableEmployees.LastNameColumn) = System.Convert.DBNull
			End Sub

			Public Function IsFirstNameNull() As Boolean
				Return Me.IsNull(Me.tableEmployees.FirstNameColumn)
			End Function

			Public Sub SetFirstNameNull()
				Me(Me.tableEmployees.FirstNameColumn) = System.Convert.DBNull
			End Sub

			Public Function IsTitleNull() As Boolean
				Return Me.IsNull(Me.tableEmployees.TitleColumn)
			End Function

			Public Sub SetTitleNull()
				Me(Me.tableEmployees.TitleColumn) = System.Convert.DBNull
			End Sub

			Public Function IsAddressNull() As Boolean
				Return Me.IsNull(Me.tableEmployees.AddressColumn)
			End Function

			Public Sub SetAddressNull()
				Me(Me.tableEmployees.AddressColumn) = System.Convert.DBNull
			End Sub

			Public Function IsCityNull() As Boolean
				Return Me.IsNull(Me.tableEmployees.CityColumn)
			End Function

			Public Sub SetCityNull()
				Me(Me.tableEmployees.CityColumn) = System.Convert.DBNull
			End Sub

			Public Function IsCountryNull() As Boolean
				Return Me.IsNull(Me.tableEmployees.CountryColumn)
			End Function

			Public Sub SetCountryNull()
				Me(Me.tableEmployees.CountryColumn) = System.Convert.DBNull
			End Sub
		End Class

		<System.Diagnostics.DebuggerStepThrough()> _
		Public Class EmployeesRowChangeEvent : Inherits EventArgs

			Private eventRow As EmployeesRow

			Private eventAction As DataRowAction

'INSTANT VB NOTE: The parameter row was renamed since Visual Basic will not uniquely identify class members when parameters have the same name:
'INSTANT VB NOTE: The parameter action was renamed since Visual Basic will not uniquely identify class members when parameters have the same name:
			Public Sub New(ByVal row_Renamed As EmployeesRow, ByVal action_Renamed As DataRowAction)
				Me.eventRow = row_Renamed
				Me.eventAction = action_Renamed
			End Sub

			Public ReadOnly Property Row() As EmployeesRow
				Get
					Return Me.eventRow
				End Get
			End Property

			Public ReadOnly Property Action() As DataRowAction
				Get
					Return Me.eventAction
				End Get
			End Property
		End Class
	End Class
End Namespace
