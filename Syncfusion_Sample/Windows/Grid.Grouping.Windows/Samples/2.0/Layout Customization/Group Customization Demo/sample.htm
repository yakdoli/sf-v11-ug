<html><h1>Group Customization Demo</h1>

<p>This sample demonstrate how to customize the<strong> </strong>layout of 
groups. It adds a custom section for each group and displays the summary section above the 
group details. This sample also shows how to derive custom elements from a group 
and child table, and how to hook them into a customized engine object.
</p>

<p>The following is an image of the sample.</p>

<p><p align=center><img src="images/sample.png" alt="CustomSectionInGroup screenshot" title="CustomSectionInGroup" /></p>

<p>In the form's <strong>ctor()</strong>, a new <strong>GroupingEngineFactory</strong> 
is assigned, which has the modified <strong>GridChildTable </strong>in order to have an extra section.</p>
<p><br />
<font color="#8D2E1C"><pre>
    		// GroupingEngineFactory provides a modified GridChildTable that adds an extra section.
    		GridEngineFactory.Factory = new GroupingEngineFactory();  </pre></font></p>

<p>You will be able to see the <strong>GroupingEngineFactory</strong> 
implementation in <strong>CustomEngine.cs</strong>. <strong>GroupingEngineFactory</strong> returns a customized 
grid engine by overriding the <strong>CreateEngine()</strong> method.</p>
<p><br />
<font color="#8D2E1C"><pre>
    		/// &lt;summary&gt;
    		/// GroupingEngineFactory provides a trimmed down GridGroup which eliminates overhead of not needed preview rows,
    		/// header and footer cells.
    		/// &lt;/summary&gt;
<font color="#8D2E1C"><pre>
    		public class GroupingEngineFactory : GridEngineFactoryBase
    		{
    			// Add this line in your forms ctor:
    			// GroupingEngineFactory provides a modified GridChildTable that adds an extra section.
    			// GridEngineFactory.Factory = new GroupingEngineFactory();
    			public override GridEngine CreateEngine()
    			{
    				return new GroupingEngine();
    			}
    		}  </pre></font></pre></font></p>

<p>The grouping engine derives from the grid engine and overrides the <strong>CreateChildTable()</strong> method in order to return a customized 
child table.&nbsp; It also overrides the <strong>CreateGroup()</strong> method in order to return a customized 
group.</p>

<p><font color="#8D2E1C"><pre>
    		public class GroupingEngine : GridEngine
    		{
    			public override ChildTable CreateChildTable(Element parent)
    			{
    				return new GroupingChildTable(parent);
    			}
    			public override Group CreateGroup(Section parent)
    			{
    				return new GroupingGroup(parent);
    			}
    		}  </pre></font></p>

<p><p>The extra section to be displayed at the top is derived from the 
empty section providing the element count and the section width.</p></p>

<p>The grouping child table is derived from the <strong>ChildTable </strong>class and implements 
<strong>IGridGroupOptionsSource</strong>. It overrides the <strong>OnInitializeSections</strong> method 
in order to add the sections that should be shown in the top-level group in the following order:</p>

<ul><li><b>  Caption</b></li>
<li><b>   Column Headers</b></li>
<li><b>   Extra Section</b></li>
<li><b>   Add New Record</b></li>
<li><b>   Details (Records or Groups)</b></li>
<li><b>   Summary</b></li></ul>

<p><font color="#8D2E1C"><pre>
    		// GroupingChildTable class.
    		protected override void OnInitializeSections(bool hasRecords, SortColumnDescriptorCollection fields)
    		{
    			// Caption
    			this.Sections.Add(this.ParentTableDescriptor.CreateCaptionSection(this));</p>

<p><font color="#8D2E1C"><pre>
    			// Column Headers
    			this.Sections.Add(this.ParentTableDescriptor.CreateColumnHeaderSection(this));</p>

<p><font color="#8D2E1C"><pre>
    			// ExtraSection
    			this.Sections.Add(new ExtraSection(this));</p>

<p><font color="#8D2E1C"><pre>
    			// AddNewRecord
    			AddNewRecordSection addNewRecordSectionBeforeDetails = this.ParentTableDescriptor.CreateAddNewRecordSection(this);
    			addNewRecordSectionBeforeDetails.IsBeforeDetails = true;
    			this.Sections.Add(addNewRecordSectionBeforeDetails);</p>

<p><font color="#8D2E1C"><pre>
    			// Details (Records or Groups)
    			if (hasRecords)
    				this.Sections.Add(this.ParentTableDescriptor.CreateRecordsDetails(this, fields));
    			else
    			this.Sections.Add(this.ParentTableDescriptor.CreateGroupsDetails(this, fields));</p>

<p><font color="#8D2E1C"><pre>
    			// Summary
    						this.Sections.Add(this.ParentTableDescriptor.CreateSummarySection(this));
    		}  </pre></font></pre></font></pre></font></pre></font></pre></font></pre></font></p>

<p>The <em>Grouping</em> group is derived from 
the <strong>Group</strong> class and implements <strong>IGridGroupOptionsSource</strong>. 
It overrides the <strong>OnInitializeSections</strong> method in order to add the sections that should be shown in the 
group in the following order:</p>

<ul><li><b>  Caption</b></li>
<li><b>  Extra Section</b></li>
<li><b>  Summary</b></li>
<li><b>  Add New Record</b></li>
<li><b>  Details (Records or Groups)</b></li></ul>

<p><font color="#8D2E1C"><pre>
    		// GroupingGroup class
    		protected override void OnInitializeSections(bool hasRecords, SortColumnDescriptorCollection fields)
    		{
    			// Caption
    			this.Sections.Add(this.ParentTableDescriptor.CreateCaptionSection(this));</p>

<p><font color="#8D2E1C"><pre>
    			// Extra section
    			this.Sections.Add(new ExtraSection(this));</p>

<p><font color="#8D2E1C"><pre>
    			// Summary
    			this.Sections.Add(this.ParentTableDescriptor.CreateSummarySection(this));</p>

<p><font color="#8D2E1C"><pre>
    			// AddNewRecord
    			AddNewRecordSection addNewRecordSectionBeforeDetails = this.ParentTableDescriptor.CreateAddNewRecordSection(this);
    			addNewRecordSectionBeforeDetails.IsBeforeDetails = true;
    			this.Sections.Add(addNewRecordSectionBeforeDetails);</p>

<p><font color="#8D2E1C"><pre>
    			// Details (Records or Groups)
    			if (hasRecords)
    				this.Sections.Add(this.ParentTableDescriptor.CreateRecordsDetails(this, fields));
    			else
    				this.Sections.Add(this.ParentTableDescriptor.CreateGroupsDetails(this, fields));
    		}  </pre></font></pre></font></pre></font></pre></font></pre></font></p>

<p>Three cells in the extra sections are covered by handling the table model's
<strong>QueryCoveredRange</strong> event. You can see the extra section, Orders, covering the 
order ID, customer ID, and employee ID in the above images.</p>

<p><font color="#8D2E1C"><pre>
    		int extraSectionCoverCols = 3;
    		private void TableModel_QueryCoveredRange(object sender, GridQueryCoveredRangeEventArgs e)
    		{
    			GridTable thisTable = this.gridGroupingControl1.Table;
    			if (e.RowIndex &lt; thisTable.DisplayElements.Count)
    			{
    				Element el = thisTable.DisplayElements[e.RowIndex];
    				if (el is ExtraSection)
    				{
    					// Cover some cells of the extra section (specified with extraSectionCoverCols).
    					int startCol = el.GroupLevel + 1;  // Add +1 so we have place for column header
    					if (e.ColIndex >= startCol &amp;&amp; e.ColIndex &lt;= this.extraSectionCoverCols + el.ParentTableDescriptor.GroupedColumns.Count)
    					{
    						e.Range = GridRangeInfo.Cells
    						(e.RowIndex, startCol, e.RowIndex, this.extraSectionCoverCols + el.ParentTableDescriptor.GroupedColumns.Count);
    						e.Handled = true;
    					}
    				}
    			}
    		}  </pre></font></p>

<p>The extra section is populated by handling the <strong>QueryCellStyleInfo</strong> event. The extra section&#8217;s Freight column is assigned with the 
freight-average value by getting the summary values using the <strong>GridEngine.GetSummaryText</strong> method.</p>

<p><font color="#8D2E1C"><pre>
    		// QueryCellStyleInfo event handler in Form1.cs.
    		// Using that column you could try and identify the summary that should be displayed in this cell.
                    		  if( column.MappingName == "Freight")
                    		  {
                        			  // Calling this method to demonstrate different alternatives to get the summary text.
                        			  e.Style.Text = GetSummaryText(el.ParentGroup, "SummaryRow 1", "FreightAverage");</p>

<p><font color="#8D2E1C"><pre>
                        			   // Easier method is to simply call the built-in routine.
                        			 e.Style.Text = GridEngine.GetSummaryText(el.ParentGroup, "SummaryRow 1", "FreightAverage");
                    		  }  </pre></font></pre></font></p>

<p>Also, a record indicator is drawn for the extra section, if it becomes a current element, by handling the 
grouping grid's <strong>TableControlCellDrawn</strong> event.</p>
<p><br />
<font color="#8D2E1C"><pre>
    		private void gridGroupingControl1_TableControlCellDrawn(object sender, GridTableControlDrawCellEventArgs e)
    		{
    			GridTableCellStyleInfo style = e.TableControl.Model[e.Inner.RowIndex, e.Inner.ColIndex];
    			GridTableCellStyleInfoIdentity id = style.TableCellIdentity;
    			Element el = id.DisplayElement;
    			if (el is ExtraSection)
    			{
    				if (id.ColIndex == 0)
    				{
    					// Row Header and ExtraSection is CurrentElement.
    					if (el == el.ParentTable.CurrentElement)
    					{
    						// Draw Record Indicator.
    						try
    						{
    							Rectangle iconBounds = Rectangle.FromLTRB
    							(e.Inner.Bounds.Right-15, e.Inner.Bounds.Top, e.Inner.Bounds.Right, e.Inner.Bounds.Bottom);
    							iconBounds.Offset(-2, 0);
    							IconPainter.PaintIcon(e.Inner.Graphics, iconBounds, Point.Empty, "SFARROW.BMP", style.TextColor);
    						}
    						catch
    						{}
    					}
    				}
    			}
    		}  </pre></font></p>
</html>