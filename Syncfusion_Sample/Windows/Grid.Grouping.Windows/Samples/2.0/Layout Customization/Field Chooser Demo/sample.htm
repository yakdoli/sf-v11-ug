<html><h1>Field Chooser Demo</h1>

<p><p>This sample demonstrates how to use a plug-in utility called <strong> Field Chooser,</strong> 
which will help you customize the view of a grid&nbsp; based on column visibility.   
</p>

<P><FONT SIZE=4><B>Features</B></FONT></P>
<UL>
<LI><P>The <strong>FieldChooser</strong> class of a GridGroupingControl has been 
implemented to add or remove columns from a grid. This implementation is simple, 
which is performed by declaring the class where the constructor takes a parameter 
as a GridGroupingControl object.</p>
</UL>

<h3><FONT SIZE=4><B>Interactive Features</B></FONT></h3>
<UL>
	<LI><P>Right click on a column header and select the Field Chooser menu item to view the <STRONG>Field Chooser dialog</STRONG>.</P>
<LI><P>This dialog will list all the column names with check boxes adjacent to them.</P>
<LI><P> The columns visible in the 
grid will be checked; un-checking a box makes a column disappear.</p>
</UL>

<p>Below is an image of the Field Chooser dialog. </p>

<p><p align=center><img src="images/sample2.png" alt="Field Chooser Dialog Box screenshot" title="Field Chooser Dialog Box" /></p>

<p><p>Here is a code snippet used to implement the class of the Field Chooser:</p></p>

<p><font color="#8D2E1C"><pre>
		FieldChooser fieldChooserObj = new FieldChooser(this.gridGroupingControl1);
 </pre></font></p>


</html>