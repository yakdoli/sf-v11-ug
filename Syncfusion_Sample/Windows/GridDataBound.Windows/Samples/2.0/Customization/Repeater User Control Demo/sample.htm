<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML>
<HEAD>
	<META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset=windows-1252">
	<TITLE></TITLE>
	<META NAME="GENERATOR" CONTENT="OpenOffice.org 2.0  (Win32)">
	<META NAME="CREATED" CONTENT="20081231;4541476">
	<META NAME="CHANGED" CONTENT="20081231;4564631">
</HEAD>
<BODY LANG="en-US" DIR="LTR">
<H1>Repeater User Control Demo</H1>
<P>This sample demonstrates the
definition of a user control in order to edit a row in a data table.
For example, your user control may have several text boxes, checked
list box, radio buttons, or Windows Forms controls that are
appropriate for allowing the user to edit the row data. You can implement this user
control as a repeater control using three methods in an interface that will allow you to display and edit
multiple records in a scrolling window where this user control is
displayed multiple times. 
</P>
<P>The implementation of this functionality uses a grid control in
virtual mode with a custom cell type based on the user control.</P>
<P ALIGN=CENTER><img src="images/sample.png" NAME="graphics1" ALT=" RepeaterUserControlSample screenshot" ALIGN=BOTTOM  BORDER=0></P>
<P><FONT SIZE=4><B>Features</B></FONT></P>
<UL>
	<LI><P><STRONG>GenericUserControlCell.cs</STRONG>
	of the <STRONG>CellUserControl</STRONG>
	class is derived from the user control and implements the
	<STRONG>ICellUserControl</STRONG>
	interface. 
	</P>
	<LI><P>The user control that needs to be repeated
	should be derived from the cell user control class by implementing
	the <STRONG>ICellUserControl'</STRONG>s<STRONG>
	UserControlSetValues</STRONG>,
	<STRONG>UserControlGetValues</STRONG>,
	and <STRONG>UserControlIsModified
	</STRONG>methods.</P>
	<UL>
		<LI><P><STRONG>UserControlSetValues- </STRONG>Sets
		values for the user control</P>
		<LI><P><STRONG>UserControlGetValues- </STRONG>Gets
		values from the user control</P>
		<LI><P><STRONG>UserControlIsModified- </STRONG>Specifies
		whether the user control&rsquo;s values have been modified</P>
	</UL>
	<LI><P>With this implementation in the
	<STRONG>SampleUserControl </STRONG>class,
	the data row values are set to the user control's
	text boxes (UserControlSetValues),
	and the text box&rsquo;s values are saved back to the data row
	(UserControlGetValues).
	
	</P>
	<LI><P>The<STRONG> GenericPanelCellModel</STRONG>
	and the <STRONG>GenericPanelCellRenderer</STRONG>
	classes are derived from the
	<STRONG>GridGenericControlCellModel/GridGenericControlCellRenderer</STRONG> classes.</P>
	<LI><P>They use two instances of the
	<STRONG>CellUserControl - </STRONG>they
	are<STRONG> ActiveControl </STRONG>for
	active drawing and <STRONG>StaticControl
	</STRONG>for static drawing.</P>
</UL>
<H3><FONT SIZE=4><B>Grid Repeater User Control:</B></FONT></H3>
<P>The Grid Repeater User Control is derived from the user control
and uses the <STRONG>Grid Control</STRONG> in a virtual mode in order to
display data that is in the sample user control. 
</P>
<UL>
	<LI><P>It adds a repeater cell to the grid and
	passes two instances of the cell user control - <STRONG>ActiveControl
	</STRONG>and <STRONG>StaticControl</STRONG>.</P>
	<LI><P>Active and static controls are used in
	<STRONG>GenericPanelCellRenderer</STRONG> class.</P>
	<LI><P>Data from the data row view is
	initialized to the active control in the renderer&rsquo;s
	<STRONG>OnInitialize </STRONG>override
	and then saved back to the <STRONG>DataRowView</STRONG>
	in the renderer&rsquo;s <STRONG>OnSaveChanges</STRONG>
	override.</P>
	<LI><P>The grid listens to the data source&rsquo;s <STRONG>ListChanged
	</STRONG>event in order to refresh itself to display the updated values.</P>
</UL>
</BODY>
</HTML>